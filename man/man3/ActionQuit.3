.TH "ActionQuit" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ActionQuit
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($args)"
.br
.ti -1c
.RI "\fBprocessWindow\fP ($window, $id, $ctrl, $param1, $param2)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBterminatePhpProcesses\fP ($excludePid, $window=null, $splash=null, $timeout=10)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBGAUGE_OTHERS\fP = 1"
.br
.ti -1c
.RI "const \fBGAUGE_PROCESSES\fP = 1"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$splash\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBActionQuit\fP Handles the quitting process of the \fBBearsampp\fP application\&. Displays a splash screen and stops all services and processes\&. 
.PP
Definition at line \fB16\fP of file \fBclass\&.action\&.quit\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $args)"
\fBActionQuit\fP constructor\&. Initializes the quitting process, displays the splash screen, and sets up the main loop\&.

.PP
\fBParameters\fP
.RS 4
\fI$args\fP Command line arguments\&. 
.RE
.PP

.PP
Definition at line \fB35\fP of file \fBclass\&.action\&.quit\&.php\fP\&.
.nf
36     {
37         global $bearsamppCore, $bearsamppLang, $bearsamppBins, $bearsamppWinbinder, $arrayOfCurrents;
38 
39         // Start splash screen
40         $this\->splash = new Splash();
41         $this\->splash\->init(
42             $bearsamppLang\->getValue( Lang::QUIT ),
43             self::GAUGE_PROCESSES * count( $bearsamppBins\->getServices() ) + self::GAUGE_OTHERS,
44             sprintf( $bearsamppLang\->getValue( Lang::EXIT_LEAVING_TEXT ), APP_TITLE \&. ' ' \&. $bearsamppCore\->getAppVersion() )
45         );
46 
47         // Set handler for the splash screen window
48         $bearsamppWinbinder\->setHandler( $this\->splash\->getWbWindow(), $this, 'processWindow', 2000 );
49         $bearsamppWinbinder\->mainLoop();
50         $bearsamppWinbinder\->reset();
51     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fB$bearsamppCore\fP, \fB$bearsamppLang\fP, \fBAPP_TITLE\fP, \fBLang\\EXIT_LEAVING_TEXT\fP, and \fBLang\\QUIT\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "processWindow ( $window,  $id,  $ctrl,  $param1,  $param2)"
Processes the splash screen window events\&. Stops all services, deletes symlinks, and kills remaining processes\&.

.PP
\fBParameters\fP
.RS 4
\fI$window\fP The window resource\&. 
.br
\fI$id\fP The event ID\&. 
.br
\fI$ctrl\fP The control ID\&. 
.br
\fI$param1\fP Additional parameter 1\&. 
.br
\fI$param2\fP Additional parameter 2\&. 
.RE
.PP

.PP
Definition at line \fB64\fP of file \fBclass\&.action\&.quit\&.php\fP\&.
.nf
65     {
66         global $bearsamppBins, $bearsamppLang, $bearsamppWinbinder;
67 
68         // Stop all services
69         foreach ( $bearsamppBins\->getServices() as $sName => $service ) {
70             $name = $bearsamppBins\->getApache()\->getName() \&. ' ' \&. $bearsamppBins\->getApache()\->getVersion();
71             if ( $sName == BinMysql::SERVICE_NAME ) {
72                 $name = $bearsamppBins\->getMysql()\->getName() \&. ' ' \&. $bearsamppBins\->getMysql()\->getVersion();
73             }
74             elseif ( $sName == BinMailpit::SERVICE_NAME ) {
75                 $name = $bearsamppBins\->getMailpit()\->getName() \&. ' ' \&. $bearsamppBins\->getMailpit()\->getVersion();
76             }
77             elseif ( $sName == BinMariadb::SERVICE_NAME ) {
78                 $name = $bearsamppBins\->getMariadb()\->getName() \&. ' ' \&. $bearsamppBins\->getMariadb()\->getVersion();
79             }
80             elseif ( $sName == BinPostgresql::SERVICE_NAME ) {
81                 $name = $bearsamppBins\->getPostgresql()\->getName() \&. ' ' \&. $bearsamppBins\->getPostgresql()\->getVersion();
82             }
83             elseif ( $sName == BinMemcached::SERVICE_NAME ) {
84                 $name = $bearsamppBins\->getMemcached()\->getName() \&. ' ' \&. $bearsamppBins\->getMemcached()\->getVersion();
85             }
86             elseif ($sName == BinXlight::SERVICE_NAME) {
87                 $name = $bearsamppBins\->getXlight()\->getName() \&. ' ' \&. $bearsamppBins\->getXlight()\->getVersion();
88             }
89             $name \&.= ' (' \&. $service\->getName() \&. ')';
90 
91             $this\->splash\->incrProgressBar();
92             $this\->splash\->setTextLoading( sprintf( $bearsamppLang\->getValue( Lang::EXIT_REMOVE_SERVICE_TEXT ), $name ) );
93             $service\->delete();
94         }
95 
96         // Purge "current" symlinks
97         Symlinks::deleteCurrentSymlinks();
98 
99         // Stop other processes
100         $this\->splash\->incrProgressBar();
101         $this\->splash\->setTextLoading( $bearsamppLang\->getValue( Lang::EXIT_STOP_OTHER_PROCESS_TEXT ) );
102         Win32Ps::killBins( true );
103 
104         // Terminate any remaining processes
105         // Final termination sequence
106         $this\->splash\->setTextLoading('Completing shutdown\&.\&.\&.');
107         if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
108             $currentPid = Win32Ps::getCurrentPid();
109 
110             // Terminate PHP processes with a timeout of 15 seconds
111             self::terminatePhpProcesses($currentPid, $window, $this\->splash, 15);
112             
113             // Force exit if still running
114             exit(0);
115         }
116 
117         // Non\-Windows fallback
118         $bearsamppWinbinder\->destroyWindow($window);
119         exit(0);
120     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fB$bearsamppLang\fP, \fBSymlinks\\deleteCurrentSymlinks()\fP, \fBexit\fP, \fBLang\\EXIT_REMOVE_SERVICE_TEXT\fP, \fBLang\\EXIT_STOP_OTHER_PROCESS_TEXT\fP, \fBWin32Ps\\getCurrentPid()\fP, \fBWin32Ps\\killBins()\fP, \fBBinMailpit\\SERVICE_NAME\fP, \fBBinMariadb\\SERVICE_NAME\fP, \fBBinMemcached\\SERVICE_NAME\fP, \fBBinMysql\\SERVICE_NAME\fP, \fBBinPostgresql\\SERVICE_NAME\fP, \fBBinXlight\\SERVICE_NAME\fP, and \fBterminatePhpProcesses()\fP\&.
.SS "terminatePhpProcesses ( $excludePid,  $window = \fRnull\fP,  $splash = \fRnull\fP,  $timeout = \fR10\fP)\fR [static]\fP"
Terminates PHP processes with timeout handling\&.

.PP
\fBParameters\fP
.RS 4
\fI$excludePid\fP Process ID to exclude 
.br
\fI$window\fP Window handle or null 
.br
\fI$splash\fP \fBSplash\fP screen or null 
.br
\fI$timeout\fP Maximum time to wait for termination (seconds) 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line \fB131\fP of file \fBclass\&.action\&.quit\&.php\fP\&.
.nf
132     {
133         global $bearsamppWinbinder;
134 
135         $currentPid = Win32Ps::getCurrentPid();
136         $startTime = microtime(true);
137         
138         Util::logTrace('Starting PHP process termination (excluding PID: ' \&. $excludePid \&. ')');
139 
140         $targets = ['php\-win\&.exe', 'php\&.exe'];
141         foreach (Win32Ps::getListProcs() as $proc) {
142             // Check if we've exceeded our timeout
143             if (microtime(true) \- $startTime > $timeout) {
144                 Util::logTrace('Process termination timeout exceeded, continuing with remaining operations');
145                 break;
146             }
147             
148             $exe = strtolower(basename($proc[Win32Ps::EXECUTABLE_PATH]));
149             $pid = $proc[Win32Ps::PROCESS_ID];
150 
151             if (in_array($exe, $targets) && $pid != $excludePid) {
152                 Util::logTrace('Terminating PHP process: ' \&. $pid);
153                 Win32Ps::kill($pid);
154                 usleep(100000); // 100ms delay between terminations
155             }
156         }
157 
158         // Initiate self\-termination with timeout
159         if ($splash !== null) {
160             $splash\->setTextLoading('Final cleanup\&.\&.\&.');
161         }
162         
163         try {
164             Util::logTrace('Initiating self\-termination for PID: ' \&. $currentPid);
165             // Add a timeout wrapper around the killProc call
166             $killSuccess = Vbs::killProc($currentPid);
167             if (!$killSuccess) {
168                 Util::logTrace('Self\-termination via Vbs::killProc failed, using alternative method');
169             }
170         } catch (\\Exception $e) {
171             Util::logTrace('Exception during self\-termination: ' \&. $e\->getMessage());
172         }
173 
174         // Destroy window after process termination
175         // Fix for PHP 8\&.2: Check if window is not null before destroying
176         if ($window && $bearsamppWinbinder) {
177             try {
178                 Util::logTrace('Destroying window');
179                 $bearsamppWinbinder\->destroyWindow($window);
180             } catch (\\Exception $e) {
181                 Util::logTrace('Exception during window destruction: ' \&. $e\->getMessage());
182             }
183         }
184         
185         // Force exit if still running after timeout
186         if (microtime(true) \- $startTime > $timeout * 1\&.5) {
187             Util::logTrace('Forcing exit due to timeout');
188             exit(0);
189         }
190     }
.PP
.fi

.PP
References \fB$proc\fP, \fB$splash\fP, \fBWin32Ps\\EXECUTABLE_PATH\fP, \fBexit\fP, \fBWin32Ps\\getCurrentPid()\fP, \fBWin32Ps\\getListProcs()\fP, \fBWin32Ps\\kill()\fP, \fBVbs\\killProc()\fP, \fBUtil\\logTrace()\fP, and \fBWin32Ps\\PROCESS_ID\fP\&.
.PP
Referenced by \fBprocessWindow()\fP, and \fBActionStartup\\processWindow()\fP\&.
.SH "Field Documentation"
.PP 
.SS "$splash\fR [private]\fP"

.PP
Definition at line \fB21\fP of file \fBclass\&.action\&.quit\&.php\fP\&.
.PP
Referenced by \fBterminatePhpProcesses()\fP\&.
.SS "const GAUGE_OTHERS = 1"

.PP
Definition at line \fB27\fP of file \fBclass\&.action\&.quit\&.php\fP\&.
.SS "const GAUGE_PROCESSES = 1"
Gauge values for progress bar increments\&. 
.PP
Definition at line \fB26\fP of file \fBclass\&.action\&.quit\&.php\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
