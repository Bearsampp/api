.TH "Registry" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Registry
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ()"
.br
.ti -1c
.RI "\fBdeleteValue\fP ($key, $subkey, $entry)"
.br
.ti -1c
.RI "\fBexists\fP ($key, $subkey, $entry=null)"
.br
.ti -1c
.RI "\fBgetLatestError\fP ()"
.br
.ti -1c
.RI "\fBgetValue\fP ($key, $subkey, $entry=null)"
.br
.ti -1c
.RI "\fBsetExpandStringValue\fP ($key, $subkey, $entry, $value)"
.br
.ti -1c
.RI "\fBsetStringValue\fP ($key, $subkey, $entry, $value)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBAPP_BINS_REG_ENTRY\fP = 'BEARSAMPP_BINS'"
.br
.ti -1c
.RI "const \fBAPP_PATH_REG_ENTRY\fP = 'BEARSAMPP_PATH'"
.br
.ti -1c
.RI "const \fBEND_PROCESS_STR\fP = 'FINISHED!'"
.br
.ti -1c
.RI "const \fBENV_KEY\fP = 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment'"
.br
.ti -1c
.RI "const \fBHKEY_CLASSES_ROOT\fP = 'HKCR'"
.br
.ti -1c
.RI "const \fBHKEY_CURRENT_USER\fP = 'HKCU'"
.br
.ti -1c
.RI "const \fBHKEY_LOCAL_MACHINE\fP = 'HKLM'"
.br
.ti -1c
.RI "const \fBHKEY_USERS\fP = 'HKEY_USERS'"
.br
.ti -1c
.RI "const \fBPROCESSOR_REG_ENTRY\fP = 'Identifier'"
.br
.ti -1c
.RI "const \fBPROCESSOR_REG_SUBKEY\fP = 'HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0'"
.br
.ti -1c
.RI "const \fBREG_BINARY\fP = 'REG_BINARY'"
.br
.ti -1c
.RI "const \fBREG_DWORD\fP = 'REG_DWORD'"
.br
.ti -1c
.RI "const \fBREG_ERROR_ENTRY\fP = 'REG_ERROR_ENTRY'"
.br
.ti -1c
.RI "const \fBREG_ERROR_SET\fP = 'REG_ERROR_SET'"
.br
.ti -1c
.RI "const \fBREG_EXPAND_SZ\fP = 'REG_EXPAND_SZ'"
.br
.ti -1c
.RI "const \fBREG_MULTI_SZ\fP = 'REG_MULTI_SZ'"
.br
.ti -1c
.RI "const \fBREG_NO_ERROR\fP = 'REG_NO_ERROR'"
.br
.ti -1c
.RI "const \fBREG_SZ\fP = 'REG_SZ'"
.br
.ti -1c
.RI "const \fBSYSPATH_REG_ENTRY\fP = 'Path'"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBsetValue\fP ($key, $subkey, $entry, $value, $type)"
.br
.ti -1c
.RI "\fBwriteLog\fP ($log)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$latestError\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBRegistry\fP

.PP
This class provides methods to interact with the Windows \fBRegistry\fP using VBScript\&. It includes functionalities to check the existence of registry keys, get and set values, and delete registry entries\&. The class also logs operations and errors\&. 
.PP
Definition at line \fB17\fP of file \fBclass\&.registry\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ()"
\fBRegistry\fP constructor\&. Initializes the \fBRegistry\fP class and logs the initialization\&. 
.PP
Definition at line \fB57\fP of file \fBclass\&.registry\&.php\fP\&.
.nf
58     {
59         Util::logInitClass($this);
60         $this\->latestError = null;
61     }
.PP
.fi

.PP
References \fBUtil\\logInitClass()\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "deleteValue ( $key,  $subkey,  $entry)"
Deletes a registry entry\&.

.PP
\fBParameters\fP
.RS 4
\fI$key\fP The root key (e\&.g\&., HKEY_LOCAL_MACHINE)\&. 
.br
\fI$subkey\fP The subkey path\&. 
.br
\fI$entry\fP The entry name\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the entry was deleted successfully, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB213\fP of file \fBclass\&.registry\&.php\fP\&.
.nf
214     {
215         $this\->writeLog('delete');
216         return $this\->setValue($key, $subkey, $entry, null, 'DeleteValue');
217     }
.PP
.fi

.PP
References \fBsetValue()\fP, and \fBwriteLog()\fP\&.
.SS "exists ( $key,  $subkey,  $entry = \fRnull\fP)"
Checks if a registry key or entry exists\&.

.PP
\fBParameters\fP
.RS 4
\fI$key\fP The root key (e\&.g\&., HKEY_LOCAL_MACHINE)\&. 
.br
\fI$subkey\fP The subkey path\&. 
.br
\fI$entry\fP The entry name (optional)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the key or entry exists, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB82\fP of file \fBclass\&.registry\&.php\fP\&.
.nf
83     {
84         $basename = 'registryExists';
85         $resultFile = Vbs::getResultFile($basename);
86 
87         $scriptContent = 'On Error Resume Next' \&. PHP_EOL;
88         $scriptContent \&.= 'Err\&.Clear' \&. PHP_EOL \&. PHP_EOL;
89 
90         $scriptContent \&.= 'Dim objShell, objFso, objFile, outFile, bExists' \&. PHP_EOL \&. PHP_EOL;
91 
92         $scriptContent \&.= 'outFile = "' \&. $resultFile \&. '"' \&. PHP_EOL;
93         $scriptContent \&.= 'Set objShell = WScript\&.CreateObject("WScript\&.Shell")' \&. PHP_EOL;
94         $scriptContent \&.= 'Set objFso = CreateObject("Scripting\&.FileSystemObject")' \&. PHP_EOL;
95         $scriptContent \&.= 'Set objFile = objFso\&.CreateTextFile(outFile, True)' \&. PHP_EOL \&. PHP_EOL;
96 
97         $scriptContent \&.= 'strKey = "' \&. $key \&. '\\\\' \&. $subkey \&. '\\\\' \&. $entry \&. '"' \&. PHP_EOL;
98         $scriptContent \&.= 'entryValue = objShell\&.RegRead(strKey)' \&. PHP_EOL;
99         $scriptContent \&.= 'If Err\&.Number <> 0 Then' \&. PHP_EOL;
100         $scriptContent \&.= '    If Right(strKey,1) = "\\" Then' \&. PHP_EOL;
101         $scriptContent \&.= '        If Instr(1, Err\&.Description, ssig, 1) <> 0 Then' \&. PHP_EOL;
102         $scriptContent \&.= '            bExists = true' \&. PHP_EOL;
103         $scriptContent \&.= '        Else' \&. PHP_EOL;
104         $scriptContent \&.= '            bExists = false' \&. PHP_EOL;
105         $scriptContent \&.= '        End If' \&. PHP_EOL;
106         $scriptContent \&.= '    Else' \&. PHP_EOL;
107         $scriptContent \&.= '        bExists = false' \&. PHP_EOL;
108         $scriptContent \&.= '    End If' \&. PHP_EOL;
109         $scriptContent \&.= '    Err\&.Clear' \&. PHP_EOL;
110         $scriptContent \&.= 'Else' \&. PHP_EOL;
111         $scriptContent \&.= '    bExists = true' \&. PHP_EOL;
112         $scriptContent \&.= 'End If' \&. PHP_EOL \&. PHP_EOL;
113 
114         $scriptContent \&.= 'On Error Goto 0' \&. PHP_EOL;
115         $scriptContent \&.= 'If bExists = vbFalse Then' \&. PHP_EOL;
116         $scriptContent \&.= '    objFile\&.Write "0"' \&. PHP_EOL;
117         $scriptContent \&.= 'Else' \&. PHP_EOL;
118         $scriptContent \&.= '    objFile\&.Write "1"' \&. PHP_EOL;
119         $scriptContent \&.= 'End If' \&. PHP_EOL;
120         $scriptContent \&.= 'objFile\&.Close' \&. PHP_EOL;
121 
122         $result = Vbs::exec($basename, $resultFile, $scriptContent);
123         $result = isset($result[0]) ? $result[0] : null;
124 
125         $this\->writeLog('Exists ' \&. $key \&. '\\\\' \&. $subkey \&. '\\\\' \&. $entry);
126         $this\->writeLog('\-> result: ' \&. $result);
127 
128         return !empty($result) && intval($result) == 1;
129     }
.PP
.fi

.PP
References \fB$result\fP, \fBVbs\\exec()\fP, \fBVbs\\getResultFile()\fP, and \fBwriteLog()\fP\&.
.SS "getLatestError ()"
Retrieves the latest error message\&.

.PP
\fBReturns\fP
.RS 4
string|null The latest error message, or null if no error occurred\&. 
.RE
.PP

.PP
Definition at line \fB311\fP of file \fBclass\&.registry\&.php\fP\&.
.nf
312     {
313         return $this\->latestError;
314     }
.PP
.fi

.PP
References \fB$latestError\fP\&.
.SS "getValue ( $key,  $subkey,  $entry = \fRnull\fP)"
Retrieves the value of a registry entry\&.

.PP
\fBParameters\fP
.RS 4
\fI$key\fP The root key (e\&.g\&., HKEY_LOCAL_MACHINE)\&. 
.br
\fI$subkey\fP The subkey path\&. 
.br
\fI$entry\fP The entry name (optional)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
mixed The value of the registry entry, or false on error\&. 
.RE
.PP

.PP
Definition at line \fB139\fP of file \fBclass\&.registry\&.php\fP\&.
.nf
140     {
141         global $bearsamppLang;
142 
143         $basename = 'registryGetValue';
144         $resultFile = Vbs::getResultFile($basename);
145         $this\->latestError = null;
146 
147         $scriptContent = 'On Error Resume Next' \&. PHP_EOL;
148         $scriptContent \&.= 'Err\&.Clear' \&. PHP_EOL \&. PHP_EOL;
149 
150         $scriptContent \&.= 'Dim objShell, objFso, objFile, outFile, entryValue' \&. PHP_EOL \&. PHP_EOL;
151 
152         $scriptContent \&.= 'outFile = "' \&. $resultFile \&. '"' \&. PHP_EOL;
153         $scriptContent \&.= 'Set objShell = WScript\&.CreateObject("WScript\&.Shell")' \&. PHP_EOL;
154         $scriptContent \&.= 'Set objFso = CreateObject("Scripting\&.FileSystemObject")' \&. PHP_EOL;
155         $scriptContent \&.= 'Set objFile = objFso\&.CreateTextFile(outFile, True)' \&. PHP_EOL \&. PHP_EOL;
156 
157         $scriptContent \&.= 'entryValue = objShell\&.RegRead("' \&. $key \&. '\\\\' \&. $subkey \&. '\\\\' \&. $entry \&. '")' \&. PHP_EOL;
158         $scriptContent \&.= 'If Err\&.Number <> 0 Then' \&. PHP_EOL;
159         $scriptContent \&.= '    objFile\&.Write "' \&. self::REG_ERROR_ENTRY \&. '" & Err\&.Number & ": " & Err\&.Description' \&. PHP_EOL;
160         $scriptContent \&.= 'Else' \&. PHP_EOL;
161         $scriptContent \&.= '    objFile\&.Write entryValue' \&. PHP_EOL;
162         $scriptContent \&.= 'End If' \&. PHP_EOL;
163         $scriptContent \&.= 'objFile\&.Close' \&. PHP_EOL;
164 
165         $result = Vbs::exec($basename, $resultFile, $scriptContent);
166         $result = isset($result[0]) ? $result[0] : null;
167         $this\->writeLog('GetValue ' \&. $key \&. '\\\\' \&. $subkey \&. '\\\\' \&. $entry);
168         $this\->writeLog('\-> result: ' \&. $result);
169         if (Util::startWith($result, self::REG_ERROR_ENTRY)) {
170             $this\->latestError = $bearsamppLang\->getValue(Lang::ERROR) \&. ' ' \&. str_replace(self::REG_ERROR_ENTRY, '', $result);
171             return false;
172         }
173 
174         return $result;
175     }
.PP
.fi

.PP
References \fB$bearsamppLang\fP, \fB$result\fP, \fBLang\\ERROR\fP, \fBVbs\\exec()\fP, \fBVbs\\getResultFile()\fP, \fBUtil\\startWith()\fP, and \fBwriteLog()\fP\&.
.SS "setExpandStringValue ( $key,  $subkey,  $entry,  $value)"
Sets an expanded string value in the registry\&.

.PP
\fBParameters\fP
.RS 4
\fI$key\fP The root key (e\&.g\&., HKEY_LOCAL_MACHINE)\&. 
.br
\fI$subkey\fP The subkey path\&. 
.br
\fI$entry\fP The entry name\&. 
.br
\fI$value\fP The value to set\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the value was set successfully, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB200\fP of file \fBclass\&.registry\&.php\fP\&.
.nf
201     {
202         return $this\->setValue($key, $subkey, $entry, $value, 'SetExpandedStringValue');
203     }
.PP
.fi

.PP
References \fBsetValue()\fP\&.
.SS "setStringValue ( $key,  $subkey,  $entry,  $value)"
Sets a string value in the registry\&.

.PP
\fBParameters\fP
.RS 4
\fI$key\fP The root key (e\&.g\&., HKEY_LOCAL_MACHINE)\&. 
.br
\fI$subkey\fP The subkey path\&. 
.br
\fI$entry\fP The entry name\&. 
.br
\fI$value\fP The value to set\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the value was set successfully, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB186\fP of file \fBclass\&.registry\&.php\fP\&.
.nf
187     {
188         return $this\->setValue($key, $subkey, $entry, $value, 'SetStringValue');
189     }
.PP
.fi

.PP
References \fBsetValue()\fP\&.
.SS "setValue ( $key,  $subkey,  $entry,  $value,  $type)\fR [private]\fP"
Sets a value in the registry\&.

.PP
\fBParameters\fP
.RS 4
\fI$key\fP The root key (e\&.g\&., HKEY_LOCAL_MACHINE)\&. 
.br
\fI$subkey\fP The subkey path\&. 
.br
\fI$entry\fP The entry name\&. 
.br
\fI$value\fP The value to set (optional)\&. 
.br
\fI$type\fP The type of value to set (e\&.g\&., SetStringValue)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the value was set successfully, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB229\fP of file \fBclass\&.registry\&.php\fP\&.
.nf
230     {
231         global $bearsamppLang;
232 
233         $basename = 'registrySetValue';
234         $resultFile = Vbs::getResultFile($basename);
235         $this\->latestError = null;
236 
237         $strKey = $key;
238         if ($key == self::HKEY_CLASSES_ROOT) {
239             $key = '&H80000000';
240         } elseif ($key == self::HKEY_CURRENT_USER) {
241             $key = '&H80000001';
242         } elseif ($key == self::HKEY_LOCAL_MACHINE) {
243             $key = '&H80000002';
244         } elseif ($key == self::HKEY_LOCAL_MACHINE) {
245             $key = '&H80000003';
246         }
247 
248         $scriptContent = 'On Error Resume Next' \&. PHP_EOL;
249         $scriptContent \&.= 'Err\&.Clear' \&. PHP_EOL \&. PHP_EOL;
250 
251         $scriptContent \&.= 'Const HKEY = ' \&. $key \&. PHP_EOL \&. PHP_EOL;
252 
253         $scriptContent \&.= 'Dim objShell, objRegistry, objFso, objFile, outFile, entryValue, newValue' \&. PHP_EOL \&. PHP_EOL;
254 
255         $scriptContent \&.= 'newValue = "' \&. (!empty($value) ? str_replace('"', '""', $value) : '') \&. '"' \&. PHP_EOL;
256         $scriptContent \&.= 'outFile = "' \&. $resultFile \&. '"' \&. PHP_EOL;
257         $scriptContent \&.= 'Set objShell = WScript\&.CreateObject("WScript\&.Shell")' \&. PHP_EOL;
258         $scriptContent \&.= 'Set objRegistry = GetObject("winmgmts://\&./root/default:StdRegProv")' \&. PHP_EOL;
259         $scriptContent \&.= 'Set objFso = CreateObject("Scripting\&.FileSystemObject")' \&. PHP_EOL;
260         $scriptContent \&.= 'Set objFile = objFso\&.CreateTextFile(outFile, True)' \&. PHP_EOL \&. PHP_EOL;
261 
262         if (!empty($value)) {
263             $scriptContent \&.= 'objRegistry\&.' \&. $type \&. ' HKEY, "' \&. $subkey \&. '", "' \&. $entry \&. '", newValue' \&. PHP_EOL;
264         } elseif (!empty($entry)) {
265             $scriptContent \&.= 'objRegistry\&.' \&. $type \&. ' HKEY, "' \&. $subkey \&. '", "' \&. $entry \&. '"' \&. PHP_EOL;
266         } else {
267             $scriptContent \&.= 'objRegistry\&.' \&. $type \&. ' HKEY, "' \&. $subkey \&. '"' \&. PHP_EOL;
268         }
269         $scriptContent \&.= 'If Err\&.Number <> 0 Then' \&. PHP_EOL;
270         $scriptContent \&.= '    objFile\&.Write "' \&. self::REG_ERROR_ENTRY \&. '" & Err\&.Number & ": " & Err\&.Description' \&. PHP_EOL;
271         $scriptContent \&.= 'Else' \&. PHP_EOL;
272         if (!empty($value)) {
273             $scriptContent \&.= '    entryValue = objShell\&.RegRead("' \&. $strKey \&. '\\\\' \&. $subkey \&. '\\\\' \&. $entry \&. '")' \&. PHP_EOL;
274             $scriptContent \&.= '    If entryValue = newValue Then' \&. PHP_EOL;
275             $scriptContent \&.= '        objFile\&.Write "' \&. self::REG_NO_ERROR \&. '"' \&. PHP_EOL;
276             $scriptContent \&.= '    Else' \&. PHP_EOL;
277             $scriptContent \&.= '        objFile\&.Write "' \&. self::REG_ERROR_SET \&. '" & newValue' \&. PHP_EOL;
278             $scriptContent \&.= '    End If' \&. PHP_EOL;
279         } else {
280             $scriptContent \&.= '    objFile\&.Write "' \&. self::REG_NO_ERROR \&. '"' \&. PHP_EOL;
281         }
282         $scriptContent \&.= 'End If' \&. PHP_EOL;
283         $scriptContent \&.= 'objFile\&.Close' \&. PHP_EOL;
284 
285         $result = Vbs::exec($basename, $resultFile, $scriptContent);
286         $result = isset($result[0]) ? $result[0] : null;
287 
288         if ($subkey == self::ENV_KEY) {
289             Batch::refreshEnvVars();
290         }
291 
292         $this\->writeLog('SetValue ' \&. $strKey \&. '\\\\' \&. $subkey \&. '\\\\' \&. $entry);
293         $this\->writeLog('\-> value: ' \&. $value);
294         $this\->writeLog('\-> result: ' \&. $result);
295         if (Util::startWith($result, self::REG_ERROR_SET)) {
296             $this\->latestError = sprintf($bearsamppLang\->getValue(Lang::REGISTRY_SET_ERROR_TEXT), str_replace(self::REG_ERROR_SET, '', $result));
297             return false;
298         } elseif (Util::startWith($result, self::REG_ERROR_ENTRY)) {
299             $this\->latestError = $bearsamppLang\->getValue(Lang::ERROR) \&. ' ' \&. str_replace(self::REG_ERROR_ENTRY, '', $result);
300             return false;
301         }
302 
303         return $result == self::REG_NO_ERROR;
304     }
.PP
.fi

.PP
References \fB$bearsamppLang\fP, \fB$result\fP, \fBLang\\ERROR\fP, \fBVbs\\exec()\fP, \fBVbs\\getResultFile()\fP, \fBBatch\\refreshEnvVars()\fP, \fBLang\\REGISTRY_SET_ERROR_TEXT\fP, \fBUtil\\startWith()\fP, and \fBwriteLog()\fP\&.
.PP
Referenced by \fBdeleteValue()\fP, \fBsetExpandStringValue()\fP, and \fBsetStringValue()\fP\&.
.SS "writeLog ( $log)\fR [private]\fP"
Writes a log entry\&.

.PP
\fBParameters\fP
.RS 4
\fI$log\fP The log message to write\&. 
.RE
.PP

.PP
Definition at line \fB68\fP of file \fBclass\&.registry\&.php\fP\&.
.nf
69     {
70         global $bearsamppRoot;
71         Util::logDebug($log, $bearsamppRoot\->getRegistryLogFilePath());
72     }
.PP
.fi

.PP
References \fB$bearsamppRoot\fP, and \fBUtil\\logDebug()\fP\&.
.PP
Referenced by \fBdeleteValue()\fP, \fBexists()\fP, \fBgetValue()\fP, and \fBsetValue()\fP\&.
.SH "Field Documentation"
.PP 
.SS "$latestError\fR [private]\fP"

.PP
Definition at line \fB51\fP of file \fBclass\&.registry\&.php\fP\&.
.PP
Referenced by \fBgetLatestError()\fP\&.
.SS "const APP_BINS_REG_ENTRY = 'BEARSAMPP_BINS'"

.PP
Definition at line \fB39\fP of file \fBclass\&.registry\&.php\fP\&.
.PP
Referenced by \fBActionStartup\\checkBinsRegKey()\fP, \fBActionStartup\\checkSystemPathRegKey()\fP, \fBUtil\\getAppBinsRegKey()\fP, \fBActionSwitchVersion\\processWindow()\fP, and \fBUtil\\setAppBinsRegKey()\fP\&.
.SS "const APP_PATH_REG_ENTRY = 'BEARSAMPP_PATH'"

.PP
Definition at line \fB42\fP of file \fBclass\&.registry\&.php\fP\&.
.PP
Referenced by \fBActionStartup\\checkPathRegKey()\fP, \fBUtil\\getAppPathRegKey()\fP, \fBBatch\\refreshEnvVars()\fP, and \fBUtil\\setAppPathRegKey()\fP\&.
.SS "const END_PROCESS_STR = 'FINISHED!'"

.PP
Definition at line \fB19\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const ENV_KEY = 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment'"

.PP
Definition at line \fB36\fP of file \fBclass\&.registry\&.php\fP\&.
.PP
Referenced by \fBUtil\\getAppBinsRegKey()\fP, \fBUtil\\getAppPathRegKey()\fP, \fBUtil\\getSysPathRegKey()\fP, \fBUtil\\setAppBinsRegKey()\fP, \fBUtil\\setAppPathRegKey()\fP, and \fBUtil\\setSysPathRegKey()\fP\&.
.SS "const HKEY_CLASSES_ROOT = 'HKCR'"

.PP
Definition at line \fB21\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const HKEY_CURRENT_USER = 'HKCU'"

.PP
Definition at line \fB22\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const HKEY_LOCAL_MACHINE = 'HKLM'"

.PP
Definition at line \fB23\fP of file \fBclass\&.registry\&.php\fP\&.
.PP
Referenced by \fBActionStartup\\cleanOldBehaviors()\fP, \fBUtil\\getAppBinsRegKey()\fP, \fBUtil\\getAppPathRegKey()\fP, \fBUtil\\getProcessorRegKey()\fP, \fBUtil\\getSysPathRegKey()\fP, \fBNssm\\infos()\fP, \fBBinMailpit\\rebuildConf()\fP, \fBBinMemcached\\rebuildConf()\fP, \fBBinXlight\\rebuildConf()\fP, \fBUtil\\setAppBinsRegKey()\fP, \fBUtil\\setAppPathRegKey()\fP, and \fBUtil\\setSysPathRegKey()\fP\&.
.SS "const HKEY_USERS = 'HKEY_USERS'"

.PP
Definition at line \fB24\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const PROCESSOR_REG_ENTRY = 'Identifier'"

.PP
Definition at line \fB49\fP of file \fBclass\&.registry\&.php\fP\&.
.PP
Referenced by \fBUtil\\getProcessorRegKey()\fP\&.
.SS "const PROCESSOR_REG_SUBKEY = 'HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0'"

.PP
Definition at line \fB48\fP of file \fBclass\&.registry\&.php\fP\&.
.PP
Referenced by \fBUtil\\getProcessorRegKey()\fP\&.
.SS "const REG_BINARY = 'REG_BINARY'"

.PP
Definition at line \fB28\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const REG_DWORD = 'REG_DWORD'"

.PP
Definition at line \fB29\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const REG_ERROR_ENTRY = 'REG_ERROR_ENTRY'"

.PP
Definition at line \fB32\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const REG_ERROR_SET = 'REG_ERROR_SET'"

.PP
Definition at line \fB33\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const REG_EXPAND_SZ = 'REG_EXPAND_SZ'"

.PP
Definition at line \fB27\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const REG_MULTI_SZ = 'REG_MULTI_SZ'"

.PP
Definition at line \fB30\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const REG_NO_ERROR = 'REG_NO_ERROR'"

.PP
Definition at line \fB34\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const REG_SZ = 'REG_SZ'"

.PP
Definition at line \fB26\fP of file \fBclass\&.registry\&.php\fP\&.
.SS "const SYSPATH_REG_ENTRY = 'Path'"

.PP
Definition at line \fB45\fP of file \fBclass\&.registry\&.php\fP\&.
.PP
Referenced by \fBActionStartup\\checkSystemPathRegKey()\fP, \fBUtil\\getSysPathRegKey()\fP, and \fBUtil\\setSysPathRegKey()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
