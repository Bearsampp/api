.TH "ToolRuby" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ToolRuby
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBModule\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($id, $type)"
.br
.ti -1c
.RI "\fBgetConsoleExe\fP ()"
.br
.ti -1c
.RI "\fBgetExe\fP ()"
.br
.ti -1c
.RI "\fBreload\fP ($id=null, $type=null)"
.br
.ti -1c
.RI "\fBsetVersion\fP ($version)"
.br
.in -1c

Public Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__toString\fP ()"
.br
.ti -1c
.RI "\fBgetCurrentPath\fP ()"
.br
.ti -1c
.RI "\fBgetId\fP ()"
.br
.ti -1c
.RI "\fBgetName\fP ()"
.br
.ti -1c
.RI "\fBgetRelease\fP ()"
.br
.ti -1c
.RI "\fBgetRootPath\fP ()"
.br
.ti -1c
.RI "\fBgetSymlinkPath\fP ()"
.br
.ti -1c
.RI "\fBgetType\fP ()"
.br
.ti -1c
.RI "\fBgetVersion\fP ()"
.br
.ti -1c
.RI "\fBgetVersionList\fP ()"
.br
.ti -1c
.RI "\fBisEnable\fP ()"
.br
.ti -1c
.RI "\fBupdate\fP ($sub=0, $showWindow=false)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBLOCAL_CFG_CONSOLE_EXE\fP = 'rubyConsoleExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_EXE\fP = 'rubyExe'"
.br
.ti -1c
.RI "const \fBROOT_CFG_VERSION\fP = 'rubyVersion'"
.br
.in -1c

Data Fields inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "const \fBBUNDLE_RELEASE\fP = 'bundleRelease'"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$consoleExe\fP"
.br
.ti -1c
.RI "\fB$exe\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__construct\fP ()"
.br
.ti -1c
.RI "\fBreplace\fP ($key, $value)"
.br
.ti -1c
.RI "\fBreplaceAll\fP ($params)"
.br
.ti -1c
.RI "\fBupdateConfig\fP ($version=null, $sub=0, $showWindow=false)"
.br
.in -1c

Protected Attributes inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB$bearsamppConf\fP"
.br
.ti -1c
.RI "\fB$bearsamppConfRaw\fP"
.br
.ti -1c
.RI "\fB$currentPath\fP"
.br
.ti -1c
.RI "\fB$enable\fP"
.br
.ti -1c
.RI "\fB$name\fP"
.br
.ti -1c
.RI "\fB$release\fP = 'N/A'"
.br
.ti -1c
.RI "\fB$rootPath\fP"
.br
.ti -1c
.RI "\fB$symlinkPath\fP"
.br
.ti -1c
.RI "\fB$version\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBToolRuby\fP

.PP
This class represents a Ruby tool module in the \fBBearsampp\fP application\&. It extends the \fBModule\fP class and provides functionalities specific to managing Ruby tools, including loading configurations, setting versions, and retrieving executable paths\&. 
.PP
Definition at line \fB18\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $id,  $type)"
Constructor for the \fBToolRuby\fP class\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. 
.br
\fI$type\fP The type of the module\&. 
.RE
.PP

.PP
Definition at line \fB51\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.nf
51                                             {
52         Util::logInitClass($this);
53         $this\->reload($id, $type);
54     }
.PP
.fi

.PP
References \fBModule\\$id\fP, \fBModule\\$type\fP, \fBUtil\\logInitClass()\fP, and \fBreload()\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "getConsoleExe ()"
Gets the path to the Ruby console executable\&.

.PP
\fBReturns\fP
.RS 4
string The path to the Ruby console executable\&. 
.RE
.PP

.PP
Definition at line \fB123\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.nf
123                                     {
124         return $this\->consoleExe;
125     }
.PP
.fi

.PP
References \fB$consoleExe\fP\&.
.SS "getExe ()"
Gets the path to the Ruby executable\&.

.PP
\fBReturns\fP
.RS 4
string The path to the Ruby executable\&. 
.RE
.PP

.PP
Definition at line \fB114\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.nf
114                              {
115         return $this\->exe;
116     }
.PP
.fi

.PP
References \fB$exe\fP\&.
.SS "reload ( $id = \fRnull\fP,  $type = \fRnull\fP)"
Reloads the Ruby tool configuration based on the provided ID and type\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. If null, the current ID is used\&. 
.br
\fI$type\fP The type of the module\&. If null, the current type is used\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB62\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.nf
62                                                      {
63         global $bearsamppConfig, $bearsamppLang;
64         Util::logReloadClass($this);
65 
66         $this\->name = $bearsamppLang\->getValue(Lang::RUBY);
67         $this\->version = $bearsamppConfig\->getRaw(self::ROOT_CFG_VERSION);
68         parent::reload($id, $type);
69 
70         if ($this\->bearsamppConfRaw !== false) {
71             $this\->exe = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_EXE];
72             $this\->consoleExe = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CONSOLE_EXE];
73         }
74 
75         if (!$this\->enable) {
76             Util::logInfo($this\->name \&. ' is not enabled!');
77             return;
78         }
79         if (!is_dir($this\->currentPath)) {
80             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_FILE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->currentPath));
81         }
82         if (!is_dir($this\->symlinkPath)) {
83             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_FILE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->symlinkPath));
84             return;
85         }
86         if (!is_file($this\->bearsamppConf)) {
87             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_CONF_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->bearsamppConf));
88         }
89         if (!is_file($this\->exe)) {
90             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->exe));
91         }
92         if (!is_file($this\->consoleExe)) {
93             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->consoleExe));
94         }
95     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fBModule\\$id\fP, \fBModule\\$type\fP, \fBLang\\ERROR_CONF_NOT_FOUND\fP, \fBLang\\ERROR_EXE_NOT_FOUND\fP, \fBLang\\ERROR_FILE_NOT_FOUND\fP, \fBUtil\\logError()\fP, \fBUtil\\logInfo()\fP, \fBUtil\\logReloadClass()\fP, and \fBLang\\RUBY\fP\&.
.PP
Referenced by \fB__construct()\fP, and \fBsetVersion()\fP\&.
.SS "setVersion ( $version)"
Sets the version of the Ruby tool and reloads the configuration\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to set\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB102\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.nf
102                                          {
103         global $bearsamppConfig;
104         $this\->version = $version;
105         $bearsamppConfig\->replace(self::ROOT_CFG_VERSION, $version);
106         $this\->reload();
107     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fBModule\\$version\fP, and \fBreload()\fP\&.
.SH "Field Documentation"
.PP 
.SS "$consoleExe\fR [private]\fP"

.PP
Definition at line \fB43\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.PP
Referenced by \fBgetConsoleExe()\fP\&.
.SS "$exe\fR [private]\fP"

.PP
Definition at line \fB38\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.PP
Referenced by \fBgetExe()\fP\&.
.SS "const LOCAL_CFG_CONSOLE_EXE = 'rubyConsoleExe'"
Configuration key for the Ruby console executable in the local configuration\&. 
.PP
Definition at line \fB33\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.SS "const LOCAL_CFG_EXE = 'rubyExe'"
Configuration key for the Ruby executable in the local configuration\&. 
.PP
Definition at line \fB28\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.
.SS "const ROOT_CFG_VERSION = 'rubyVersion'"
Configuration key for the Ruby version in the root configuration\&. 
.PP
Definition at line \fB23\fP of file \fBclass\&.tool\&.ruby\&.php\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
