.TH "BinMariadb" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BinMariadb
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBModule\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($id, $type)"
.br
.ti -1c
.RI "\fBchangePort\fP ($port, $checkUsed=false, $wbProgressBar=null)"
.br
.ti -1c
.RI "\fBchangeRootPassword\fP ($currentPwd, $newPwd, $wbProgressBar=null)"
.br
.ti -1c
.RI "\fBcheckPort\fP ($port, $showWindow=false)"
.br
.ti -1c
.RI "\fBcheckRootPassword\fP ($currentPwd=null, $wbProgressBar=null)"
.br
.ti -1c
.RI "\fBgetAdmin\fP ()"
.br
.ti -1c
.RI "\fBgetCliExe\fP ()"
.br
.ti -1c
.RI "\fBgetCmdLineOutput\fP ($cmd)"
.br
.ti -1c
.RI "\fBgetConf\fP ()"
.br
.ti -1c
.RI "\fBgetErrorLog\fP ()"
.br
.ti -1c
.RI "\fBgetExe\fP ()"
.br
.ti -1c
.RI "\fBgetPort\fP ()"
.br
.ti -1c
.RI "\fBgetRootPwd\fP ()"
.br
.ti -1c
.RI "\fBgetRootUser\fP ()"
.br
.ti -1c
.RI "\fBgetService\fP ()"
.br
.ti -1c
.RI "\fBreload\fP ($id=null, $type=null)"
.br
.ti -1c
.RI "\fBsetEnable\fP ($enabled, $showWindow=false)"
.br
.ti -1c
.RI "\fBsetPort\fP ($port)"
.br
.ti -1c
.RI "\fBsetRootPwd\fP ($rootPwd)"
.br
.ti -1c
.RI "\fBsetRootUser\fP ($rootUser)"
.br
.ti -1c
.RI "\fBsetVersion\fP ($version)"
.br
.ti -1c
.RI "\fBswitchVersion\fP ($version, $showWindow=false)"
.br
.in -1c

Public Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__toString\fP ()"
.br
.ti -1c
.RI "\fBgetCurrentPath\fP ()"
.br
.ti -1c
.RI "\fBgetId\fP ()"
.br
.ti -1c
.RI "\fBgetName\fP ()"
.br
.ti -1c
.RI "\fBgetRelease\fP ()"
.br
.ti -1c
.RI "\fBgetRootPath\fP ()"
.br
.ti -1c
.RI "\fBgetSymlinkPath\fP ()"
.br
.ti -1c
.RI "\fBgetType\fP ()"
.br
.ti -1c
.RI "\fBgetVersion\fP ()"
.br
.ti -1c
.RI "\fBgetVersionList\fP ()"
.br
.ti -1c
.RI "\fBisEnable\fP ()"
.br
.ti -1c
.RI "\fBupdate\fP ($sub=0, $showWindow=false)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBCMD_SYNTAX_CHECK\fP = '\-\-help \-\-verbose 1>NUL'"
.br
.ti -1c
.RI "const \fBCMD_VARIABLES\fP = 'variables'"
.br
.ti -1c
.RI "const \fBCMD_VERSION\fP = '\-\-version'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_ADMIN\fP = 'mariadbAdmin'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_CLI_EXE\fP = 'mariadbCliExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_CONF\fP = 'mariadbConf'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_EXE\fP = 'mariadbExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_PORT\fP = 'mariadbPort'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_ROOT_PWD\fP = 'mariadbRootPwd'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_ROOT_USER\fP = 'mariadbRootUser'"
.br
.ti -1c
.RI "const \fBROOT_CFG_ENABLE\fP = 'mariadbEnable'"
.br
.ti -1c
.RI "const \fBROOT_CFG_VERSION\fP = 'mariadbVersion'"
.br
.ti -1c
.RI "const \fBSERVICE_NAME\fP = 'bearsamppmariadb'"
.br
.in -1c

Data Fields inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "const \fBBUNDLE_RELEASE\fP = 'bundleRelease'"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBreplaceAll\fP ($params)"
.br
.ti -1c
.RI "\fBupdateConfig\fP ($version=null, $sub=0, $showWindow=false)"
.br
.in -1c

Protected Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__construct\fP ()"
.br
.ti -1c
.RI "\fBreplace\fP ($key, $value)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$admin\fP"
.br
.ti -1c
.RI "\fB$cliExe\fP"
.br
.ti -1c
.RI "\fB$conf\fP"
.br
.ti -1c
.RI "\fB$errorLog\fP"
.br
.ti -1c
.RI "\fB$exe\fP"
.br
.ti -1c
.RI "\fB$port\fP"
.br
.ti -1c
.RI "\fB$rootPwd\fP"
.br
.ti -1c
.RI "\fB$rootUser\fP"
.br
.ti -1c
.RI "\fB$service\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Attributes inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB$bearsamppConf\fP"
.br
.ti -1c
.RI "\fB$bearsamppConfRaw\fP"
.br
.ti -1c
.RI "\fB$currentPath\fP"
.br
.ti -1c
.RI "\fB$enable\fP"
.br
.ti -1c
.RI "\fB$name\fP"
.br
.ti -1c
.RI "\fB$release\fP = 'N/A'"
.br
.ti -1c
.RI "\fB$rootPath\fP"
.br
.ti -1c
.RI "\fB$symlinkPath\fP"
.br
.ti -1c
.RI "\fB$version\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBBinMariadb\fP

.PP
This class represents the MariaDB module in the \fBBearsampp\fP application\&. It handles the configuration, management, and operations related to MariaDB\&. 
.PP
Definition at line \fB16\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $id,  $type)"
Constructs a \fBBinMariadb\fP object and initializes the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. 
.br
\fI$type\fP The type of the module\&. 
.RE
.PP

.PP
Definition at line \fB52\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
53     {
54         Util::logInitClass( $this );
55         $this\->reload( $id, $type );
56     }
.PP
.fi

.PP
References \fBModule\\$id\fP, \fBModule\\$type\fP, \fBUtil\\logInitClass()\fP, and \fBreload()\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "changePort ( $port,  $checkUsed = \fRfalse\fP,  $wbProgressBar = \fRnull\fP)"
Changes the port for MariaDB\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The new port number\&. 
.br
\fI$checkUsed\fP Whether to check if the port is already in use\&. 
.br
\fI$wbProgressBar\fP The progress bar object for UI updates\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool|string True if the port was changed successfully, or the process using the port if it is in use\&. 
.RE
.PP

.PP
Definition at line \fB182\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
183     {
184         global $bearsamppWinbinder;
185 
186         if ( !Util::isValidPort( $port ) ) {
187             Util::logError( $this\->getName() \&. ' port not valid: ' \&. $port );
188 
189             return false;
190         }
191 
192         $port = intval( $port );
193         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
194 
195         $isPortInUse = Util::isPortInUse( $port );
196         if ( !$checkUsed || $isPortInUse === false ) {
197             // bearsampp\&.conf
198             $this\->setPort( $port );
199             $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
200 
201             // conf
202             $this\->update();
203             $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
204 
205             return true;
206         }
207 
208         Util::logDebug( $this\->getName() \&. ' port in used: ' \&. $port \&. ' \- ' \&. $isPortInUse );
209 
210         return $isPortInUse;
211     }
.PP
.fi

.PP
References \fB$port\fP, \fBModule\\getName()\fP, \fBUtil\\isPortInUse()\fP, \fBUtil\\isValidPort()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBsetPort()\fP, and \fBModule\\update()\fP\&.
.SS "changeRootPassword ( $currentPwd,  $newPwd,  $wbProgressBar = \fRnull\fP)"
Changes the root password for MariaDB\&.

.PP
\fBParameters\fP
.RS 4
\fI$currentPwd\fP The current root password\&. 
.br
\fI$newPwd\fP The new root password\&. 
.br
\fI$wbProgressBar\fP The progress bar object for UI updates\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool|string True if the password was changed successfully, or an error message if it failed\&. 
.RE
.PP

.PP
Definition at line \fB313\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
314     {
315         global $bearsamppWinbinder;
316         $error = null;
317 
318         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
319         if ( version_compare( phpversion(), '5\&.3' ) === \-1 ) {
320             $dbLink = @mysqli_connect( '127\&.0\&.0\&.1', $this\->rootUser, $currentPwd, '', $this\->port );
321         }
322         else {
323             $dbLink = @mysqli_connect( '127\&.0\&.0\&.1:' \&. $this\->port, $this\->rootUser, $currentPwd );
324         }
325         if ( !$dbLink ) {
326             $error = mysqli_connect_error();
327         }
328 
329         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
330         $stmt = @mysqli_prepare( $dbLink, 'UPDATE mysql\&.user SET Password=PASSWORD(?) WHERE User=?' );
331         if ( empty( $error ) && $stmt === false ) {
332             $error = mysqli_error( $dbLink );
333         }
334 
335         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
336         if ( empty( $error ) && !@mysqli_stmt_bind_param( $stmt, 'ss', $newPwd, $this\->rootUser ) ) {
337             $error = mysqli_stmt_error( $stmt );
338         }
339 
340         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
341         if ( empty( $error ) && !@mysqli_stmt_execute( $stmt ) ) {
342             $error = mysqli_stmt_error( $stmt );
343         }
344 
345         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
346         if ( $stmt !== false ) {
347             mysqli_stmt_close( $stmt );
348         }
349 
350         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
351         if ( empty( $error ) && @mysqli_query( $dbLink, 'FLUSH PRIVILEGES' ) === false ) {
352             $error = mysqli_error( $dbLink );
353         }
354 
355         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
356         if ( $dbLink ) {
357             mysqli_close( $dbLink );
358         }
359 
360         if ( !empty( $error ) ) {
361             return $error;
362         }
363 
364         // bearsampp\&.conf
365         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
366         $this\->setRootPwd( $newPwd );
367 
368         // conf
369         $this\->update();
370         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
371 
372         return true;
373     }
.PP
.fi

.PP
References \fBsetRootPwd()\fP, and \fBModule\\update()\fP\&.
.SS "checkPort ( $port,  $showWindow = \fRfalse\fP)"
Checks if the specified port is used by MariaDB\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The port number to check\&. 
.br
\fI$showWindow\fP Whether to show a window with the result\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the port is used by MariaDB, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB221\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
222     {
223         global $bearsamppLang, $bearsamppWinbinder;
224         $boxTitle = sprintf( $bearsamppLang\->getValue( Lang::CHECK_PORT_TITLE ), $this\->getName(), $port );
225 
226         if ( !Util::isValidPort( $port ) ) {
227             Util::logError( $this\->getName() \&. ' port not valid: ' \&. $port );
228 
229             return false;
230         }
231 
232         $fp = @fsockopen( '127\&.0\&.0\&.1', $port, $errno, $errstr, 5 );
233         if ( $fp ) {
234             if ( version_compare( phpversion(), '5\&.3' ) === \-1 ) {
235                 $dbLink = mysqli_connect( '127\&.0\&.0\&.1', $this\->rootUser, $this\->rootPwd, '', $port );
236             }
237             else {
238                 $dbLink = mysqli_connect( '127\&.0\&.0\&.1:' \&. $port, $this\->rootUser, $this\->rootPwd );
239             }
240             $isMariadb = false;
241             $version   = false;
242 
243             if ( $dbLink ) {
244                 $result = mysqli_query( $dbLink, 'SHOW VARIABLES' );
245                 if ( $result ) {
246                     while ( false !== ($row = mysqli_fetch_array( $result, MYSQLI_NUM )) ) {
247                         if ( $row[0] == 'version' ) {
248                             $version = explode( '\-', $row[1] );
249                             $version = count( $version ) > 1 ? $version[0] : $row[1];
250                         }
251                         if ( $row[0] == 'version_comment' && Util::startWith( strtolower( $row[1] ), 'mariadb' ) ) {
252                             $isMariadb = true;
253                         }
254                         if ( $isMariadb && $version !== false ) {
255                             break;
256                         }
257                     }
258                     if ( !$isMariadb ) {
259                         Util::logDebug( $this\->getName() \&. ' port used by another DBMS: ' \&. $port );
260                         if ( $showWindow ) {
261                             $bearsamppWinbinder\->messageBoxWarning(
262                                 sprintf( $bearsamppLang\->getValue( Lang::PORT_USED_BY_ANOTHER_DBMS ), $port ),
263                                 $boxTitle
264                             );
265                         }
266                     }
267                     else {
268                         Util::logDebug( $this\->getName() \&. ' port ' \&. $port \&. ' is used by: ' \&. $this\->getName() \&. ' ' \&. $version );
269                         if ( $showWindow ) {
270                             $bearsamppWinbinder\->messageBoxInfo(
271                                 sprintf( $bearsamppLang\->getValue( Lang::PORT_USED_BY ), $port, $this\->getName() \&. ' ' \&. $version ),
272                                 $boxTitle
273                             );
274                         }
275 
276                         return true;
277                     }
278                 }
279                 mysqli_close( $dbLink );
280             }
281             else {
282                 Util::logDebug( $this\->getName() \&. ' port ' \&. $port \&. ' is used by another application' );
283                 if ( $showWindow ) {
284                     $bearsamppWinbinder\->messageBoxWarning(
285                         sprintf( $bearsamppLang\->getValue( Lang::PORT_NOT_USED_BY ), $port ),
286                         $boxTitle
287                     );
288                 }
289             }
290         }
291         else {
292             Util::logDebug( $this\->getName() \&. ' port ' \&. $port \&. ' is not used' );
293             if ( $showWindow ) {
294                 $bearsamppWinbinder\->messageBoxError(
295                     sprintf( $bearsamppLang\->getValue( Lang::PORT_NOT_USED ), $port ),
296                     $boxTitle
297                 );
298             }
299         }
300 
301         return false;
302     }
.PP
.fi

.PP
References \fB$bearsamppLang\fP, \fB$port\fP, \fB$result\fP, \fBModule\\$version\fP, \fBLang\\CHECK_PORT_TITLE\fP, \fBModule\\getName()\fP, \fBUtil\\isValidPort()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBLang\\PORT_NOT_USED\fP, \fBLang\\PORT_NOT_USED_BY\fP, \fBLang\\PORT_USED_BY\fP, \fBLang\\PORT_USED_BY_ANOTHER_DBMS\fP, and \fBUtil\\startWith()\fP\&.
.SS "checkRootPassword ( $currentPwd = \fRnull\fP,  $wbProgressBar = \fRnull\fP)"
Checks if the provided root password is correct\&.

.PP
\fBParameters\fP
.RS 4
\fI$currentPwd\fP The current root password\&. If null, the stored root password is used\&. 
.br
\fI$wbProgressBar\fP The progress bar object for UI updates\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool|string True if the password is correct, or an error message if it is incorrect\&. 
.RE
.PP

.PP
Definition at line \fB383\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
384     {
385         global $bearsamppWinbinder;
386         $currentPwd = $currentPwd == null ? $this\->rootPwd : $currentPwd;
387         $error      = null;
388 
389         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
390         if ( version_compare( phpversion(), '5\&.3' ) === \-1 ) {
391             $dbLink = @mysqli_connect( '127\&.0\&.0\&.1', $this\->rootUser, $currentPwd, '', $this\->port );
392         }
393         else {
394             $dbLink = @mysqli_connect( '127\&.0\&.0\&.1:' \&. $this\->port, $this\->rootUser, $currentPwd );
395         }
396         if ( !$dbLink ) {
397             $error = mysqli_connect_error();
398         }
399 
400         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
401         if ( $dbLink ) {
402             mysqli_close( $dbLink );
403         }
404 
405         if ( !empty( $error ) ) {
406             return $error;
407         }
408 
409         return true;
410     }
.PP
.fi

.SS "getAdmin ()"
Retrieves the admin executable path for the module\&.

.PP
\fBReturns\fP
.RS 4
string The admin executable path\&. 
.RE
.PP

.PP
Definition at line \fB677\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
677                            {
678     return $this\->admin;
679 }}
.PP
.fi

.PP
References \fB$admin\fP\&.
.PP
Referenced by \fBgetCmdLineOutput()\fP\&.
.SS "getCliExe ()"
Retrieves the CLI executable path for the module\&.

.PP
\fBReturns\fP
.RS 4
string The CLI executable path\&. 
.RE
.PP

.PP
Definition at line \fB668\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
668                             {
669     return $this\->cliExe;
670 }
.PP
.fi

.PP
References \fB$cliExe\fP\&.
.SS "getCmdLineOutput ( $cmd)"
Retrieves the command line output for a given command\&.

.PP
\fBParameters\fP
.RS 4
\fI$cmd\fP The command to execute\&. 
.RE
.PP
\fBReturns\fP
.RS 4
array An associative array containing:
.IP "\(bu" 2
'syntaxOk' (bool): Whether the command executed without syntax errors\&.
.IP "\(bu" 2
'content' (string|null): The output content of the command\&. 
.PP
.RE
.PP

.PP
Definition at line \fB495\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
495                                        {
496     $result = array(
497         'syntaxOk' => false,
498         'content'  => null,
499     );
500 
501     $bin = $this\->getExe();
502     $removeLines = 0;
503     $outputFrom = '';
504     if ($cmd == self::CMD_SYNTAX_CHECK) {
505         $outputFrom = '2';
506     } elseif ($cmd == self::CMD_VARIABLES) {
507         $bin = $this\->getAdmin();
508         $cmd \&.= ' \-\-user=' \&. $this\->getRootUser();
509         if ($this\->getRootPwd()) {
510             $cmd \&.= ' \-\-password=' \&. $this\->getRootPwd();
511         }
512         $removeLines = 2;
513     }
514 
515     if (file_exists($bin)) {
516         $tmpResult = Batch::exec('mariadbGetCmdLineOutput', '"' \&. $bin \&. '" ' \&. $cmd \&. ' ' \&. $outputFrom, 5);
517         if ($tmpResult !== false && is_array($tmpResult)) {
518             $result['syntaxOk'] = empty($tmpResult) || !Util::contains(trim($tmpResult[count($tmpResult) \- 1]), '[ERROR]');
519             for ($i = 0; $i < $removeLines; $i++) {
520                 unset($tmpResult[$i]);
521             }
522             $result['content'] = trim(str_replace($bin, '', implode(PHP_EOL, $tmpResult)));
523         }
524     }
525 
526     return $result;
527 }
.PP
.fi

.PP
References \fB$result\fP, \fBUtil\\contains()\fP, \fBBatch\\exec()\fP, \fBgetAdmin()\fP, \fBgetExe()\fP, \fBgetRootPwd()\fP, and \fBgetRootUser()\fP\&.
.SS "getConf ()"
Retrieves the configuration file path for the module\&.

.PP
\fBReturns\fP
.RS 4
string The configuration file path\&. 
.RE
.PP

.PP
Definition at line \fB605\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
605                           {
606     return $this\->conf;
607 }
.PP
.fi

.PP
References \fB$conf\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "getErrorLog ()"
Retrieves the error log path for the module\&.

.PP
\fBReturns\fP
.RS 4
string The error log path\&. 
.RE
.PP

.PP
Definition at line \fB587\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
587                               {
588     return $this\->errorLog;
589 }
.PP
.fi

.PP
References \fB$errorLog\fP\&.
.SS "getExe ()"
Retrieves the executable path for the module\&.

.PP
\fBReturns\fP
.RS 4
string The executable path\&. 
.RE
.PP

.PP
Definition at line \fB596\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
596                          {
597     return $this\->exe;
598 }
.PP
.fi

.PP
References \fB$exe\fP\&.
.PP
Referenced by \fBgetCmdLineOutput()\fP\&.
.SS "getPort ()"
Retrieves the port number for the module\&.

.PP
\fBReturns\fP
.RS 4
int The port number\&. 
.RE
.PP

.PP
Definition at line \fB614\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
614                           {
615     return $this\->port;
616 }
.PP
.fi

.PP
References \fB$port\fP\&.
.SS "getRootPwd ()"
Retrieves the root password for the module\&.

.PP
\fBReturns\fP
.RS 4
string The root password\&. 
.RE
.PP

.PP
Definition at line \fB650\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
650                              {
651     return $this\->rootPwd;
652 }
.PP
.fi

.PP
References \fB$rootPwd\fP\&.
.PP
Referenced by \fBgetCmdLineOutput()\fP\&.
.SS "getRootUser ()"
Retrieves the root user for the module\&.

.PP
\fBReturns\fP
.RS 4
string The root user\&. 
.RE
.PP

.PP
Definition at line \fB632\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
632                               {
633     return $this\->rootUser;
634 }
.PP
.fi

.PP
References \fB$rootUser\fP\&.
.PP
Referenced by \fBgetCmdLineOutput()\fP\&.
.SS "getService ()"
Retrieves the service associated with the module\&.

.PP
\fBReturns\fP
.RS 4
\fBWin32Service\fP The service object\&. 
.RE
.PP

.PP
Definition at line \fB546\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
546                              {
547     return $this\->service;
548 }
.PP
.fi

.PP
References \fB$service\fP\&.
.SS "reload ( $id = \fRnull\fP,  $type = \fRnull\fP)"
Reloads the module configuration based on the provided ID and type\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. If null, the current ID is used\&. 
.br
\fI$type\fP The type of the module\&. If null, the current type is used\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB64\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
65     {
66         global $bearsamppRoot, $bearsamppConfig, $bearsamppLang;
67         Util::logReloadClass( $this );
68 
69         $this\->name    = $bearsamppLang\->getValue( Lang::MARIADB );
70         $this\->version = $bearsamppConfig\->getRaw( self::ROOT_CFG_VERSION );
71         parent::reload( $id, $type );
72 
73         $this\->enable   = $this\->enable && $bearsamppConfig\->getRaw( self::ROOT_CFG_ENABLE );
74         $this\->service  = new Win32Service( self::SERVICE_NAME );
75         $this\->errorLog = $bearsamppRoot\->getLogsPath() \&. '/mariadb\&.log';
76 
77         if ( $this\->bearsamppConfRaw !== false ) {
78             $this\->exe      = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_EXE];
79             $this\->conf     = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CONF];
80             $this\->port     = $this\->bearsamppConfRaw[self::LOCAL_CFG_PORT];
81             $this\->rootUser = isset( $this\->bearsamppConfRaw[self::LOCAL_CFG_ROOT_USER] ) ? $this\->bearsamppConfRaw[self::LOCAL_CFG_ROOT_USER] : 'root';
82             $this\->rootPwd  = isset( $this\->bearsamppConfRaw[self::LOCAL_CFG_ROOT_PWD] ) ? $this\->bearsamppConfRaw[self::LOCAL_CFG_ROOT_PWD] : '';
83             $this\->cliExe   = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CLI_EXE];
84             $this\->admin    = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_ADMIN];
85         }
86 
87         if ( !$this\->enable ) {
88             Util::logInfo( $this\->name \&. ' is not enabled!' );
89 
90             return;
91         }
92         if ( !is_dir( $this\->currentPath ) ) {
93             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_FILE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->currentPath ) );
94 
95             return;
96         }
97         if ( !is_dir( $this\->symlinkPath ) ) {
98             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_FILE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->symlinkPath ) );
99 
100             return;
101         }
102         if ( !is_file( $this\->bearsamppConf ) ) {
103             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_CONF_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->bearsamppConf ) );
104 
105             return;
106         }
107         if ( !is_file( $this\->exe ) ) {
108             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_EXE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->exe ) );
109 
110             return;
111         }
112         if ( !is_file( $this\->conf ) ) {
113             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_CONF_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->conf ) );
114 
115             return;
116         }
117         if ( !is_numeric( $this\->port ) || $this\->port <= 0 ) {
118             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_INVALID_PARAMETER ), self::LOCAL_CFG_PORT, $this\->port ) );
119 
120             return;
121         }
122         if ( empty( $this\->rootUser ) ) {
123             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_INVALID_PARAMETER ), self::LOCAL_CFG_ROOT_USER, $this\->rootUser ) );
124 
125             return;
126         }
127         if ( !is_file( $this\->cliExe ) ) {
128             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_EXE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->cliExe ) );
129 
130             return;
131         }
132         if ( !is_file( $this\->admin ) ) {
133             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_EXE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->admin ) );
134 
135             return;
136         }
137 
138         $this\->service\->setDisplayName( APP_TITLE \&. ' ' \&. $this\->getName() );
139         $this\->service\->setBinPath( $this\->exe );
140         $this\->service\->setParams( self::SERVICE_NAME );
141         $this\->service\->setStartType( Win32Service::SERVICE_DEMAND_START );
142         $this\->service\->setErrorControl( Win32Service::SERVER_ERROR_NORMAL );
143     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fB$bearsamppRoot\fP, \fBModule\\$id\fP, \fBModule\\$type\fP, \fBAPP_TITLE\fP, \fBLang\\ERROR_CONF_NOT_FOUND\fP, \fBLang\\ERROR_EXE_NOT_FOUND\fP, \fBLang\\ERROR_FILE_NOT_FOUND\fP, \fBLang\\ERROR_INVALID_PARAMETER\fP, \fBModule\\getName()\fP, \fBUtil\\logError()\fP, \fBUtil\\logInfo()\fP, \fBUtil\\logReloadClass()\fP, \fBLang\\MARIADB\fP, \fBWin32Service\\SERVER_ERROR_NORMAL\fP, and \fBWin32Service\\SERVICE_DEMAND_START\fP\&.
.PP
Referenced by \fB__construct()\fP, \fBsetEnable()\fP, and \fBsetVersion()\fP\&.
.SS "replaceAll ( $params)\fR [protected]\fP"
Replaces multiple key-value pairs in the configuration file\&.

.PP
\fBParameters\fP
.RS 4
\fI$params\fP An associative array of key-value pairs to replace\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB150\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
151     {
152         $content = file_get_contents( $this\->bearsamppConf );
153 
154         foreach ( $params as $key => $value ) {
155             $content                      = preg_replace( '|' \&. $key \&. ' = \&.*|', $key \&. ' = ' \&. '"' \&. $value \&. '"', $content );
156             $this\->bearsamppConfRaw[$key] = $value;
157             switch ( $key ) {
158                 case self::LOCAL_CFG_PORT:
159                     $this\->port = $value;
160                     break;
161                 case self::LOCAL_CFG_ROOT_USER:
162                     $this\->rootUser = $value;
163                     break;
164                 case self::LOCAL_CFG_ROOT_PWD:
165                     $this\->rootPwd = $value;
166                     break;
167             }
168         }
169 
170         file_put_contents( $this\->bearsamppConf, $content );
171     }
.PP
.fi

.SS "setEnable ( $enabled,  $showWindow = \fRfalse\fP)"
Enables or disables the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$enabled\fP Whether to enable or disable the module\&. 
.br
\fI$showWindow\fP Whether to show a window with the result\&. 
.RE
.PP

.PP
Definition at line \fB556\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
556                                                          {
557     global $bearsamppConfig, $bearsamppLang, $bearsamppWinbinder;
558 
559     if ($enabled == Config::ENABLED && !is_dir($this\->currentPath)) {
560         Util::logDebug($this\->getName() \&. ' cannot be enabled because bundle ' \&. $this\->getVersion() \&. ' does not exist in ' \&. $this\->currentPath);
561         if ($showWindow) {
562             $bearsamppWinbinder\->messageBoxError(
563                 sprintf($bearsamppLang\->getValue(Lang::ENABLE_BUNDLE_NOT_EXIST), $this\->getName(), $this\->getVersion(), $this\->currentPath),
564                 sprintf($bearsamppLang\->getValue(Lang::ENABLE_TITLE), $this\->getName())
565             );
566         }
567         $enabled = Config::DISABLED;
568     }
569 
570     Util::logInfo($this\->getName() \&. ' switched to ' \&. ($enabled == Config::ENABLED ? 'enabled' : 'disabled'));
571     $this\->enable = $enabled == Config::ENABLED;
572     $bearsamppConfig\->replace(self::ROOT_CFG_ENABLE, $enabled);
573 
574     $this\->reload();
575     if ($this\->enable) {
576         Util::installService($this, $this\->port, self::CMD_SYNTAX_CHECK, $showWindow);
577     } else {
578         Util::removeService($this\->service, $this\->name);
579     }
580 }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fBConfig\\DISABLED\fP, \fBLang\\ENABLE_BUNDLE_NOT_EXIST\fP, \fBLang\\ENABLE_TITLE\fP, \fBConfig\\ENABLED\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\installService()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logInfo()\fP, \fBreload()\fP, and \fBUtil\\removeService()\fP\&.
.SS "setPort ( $port)"
Sets the port number for the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The port number to set\&. 
.RE
.PP

.PP
Definition at line \fB623\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
623                                {
624     $this\->replace(self::LOCAL_CFG_PORT, $port);
625 }
.PP
.fi

.PP
References \fB$port\fP, and \fBModule\\replace()\fP\&.
.PP
Referenced by \fBchangePort()\fP\&.
.SS "setRootPwd ( $rootPwd)"
Sets the root password for the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$rootPwd\fP The root password to set\&. 
.RE
.PP

.PP
Definition at line \fB659\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
659                                      {
660     $this\->replace(self::LOCAL_CFG_ROOT_PWD, $rootPwd);
661 }
.PP
.fi

.PP
References \fB$rootPwd\fP, and \fBModule\\replace()\fP\&.
.PP
Referenced by \fBchangeRootPassword()\fP\&.
.SS "setRootUser ( $rootUser)"
Sets the root user for the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$rootUser\fP The root user to set\&. 
.RE
.PP

.PP
Definition at line \fB641\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
641                                        {
642     $this\->replace(self::LOCAL_CFG_ROOT_USER, $rootUser);
643 }
.PP
.fi

.PP
References \fB$rootUser\fP, and \fBModule\\replace()\fP\&.
.SS "setVersion ( $version)"
Sets the version of the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to set\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB534\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
534                                      {
535     global $bearsamppConfig;
536     $this\->version = $version;
537     $bearsamppConfig\->replace(self::ROOT_CFG_VERSION, $version);
538     $this\->reload();
539 }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fBModule\\$version\fP, and \fBreload()\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "switchVersion ( $version,  $showWindow = \fRfalse\fP)"
Switches the version of MariaDB\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to switch to\&. 
.br
\fI$showWindow\fP Whether to show a window with the result\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the version was switched successfully, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB420\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
421     {
422         Util::logDebug( 'Switch ' \&. $this\->name \&. ' version to ' \&. $version );
423 
424         return $this\->updateConfig( $version, 0, $showWindow );
425     }
.PP
.fi

.PP
References \fBModule\\$version\fP, \fBUtil\\logDebug()\fP, and \fBupdateConfig()\fP\&.
.SS "updateConfig ( $version = \fRnull\fP,  $sub = \fR0\fP,  $showWindow = \fRfalse\fP)\fR [protected]\fP"
Updates the configuration for the specified version\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to update to\&. If null, the current version is used\&. 
.br
\fI$sub\fP The sub-level for logging indentation\&. 
.br
\fI$showWindow\fP Whether to show a window with the result\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the configuration was updated successfully, false otherwise\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB436\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.nf
436                                                                                     {
437         global $bearsamppLang, $bearsamppApps, $bearsamppWinbinder;
438 
439         if (!$this\->enable) {
440             return true;
441         }
442 
443         $version = $version == null ? $this\->version : $version;
444         Util::logDebug(($sub > 0 ? str_repeat(' ', 2 * $sub) : '') \&. 'Update ' \&. $this\->name \&. ' ' \&. $version \&. ' config');
445 
446         $boxTitle = sprintf($bearsamppLang\->getValue(Lang::SWITCH_VERSION_TITLE), $this\->getName(), $version);
447 
448         $conf = str_replace('mariadb' \&. $this\->getVersion(), 'mariadb' \&. $version, $this\->getConf());
449         $bearsamppConf = str_replace('mariadb' \&. $this\->getVersion(), 'mariadb' \&. $version, $this\->bearsamppConf);
450 
451         if (!file_exists($conf) || !file_exists($bearsamppConf)) {
452             Util::logError('bearsampp config files not found for ' \&. $this\->getName() \&. ' ' \&. $version);
453             if ($showWindow) {
454                 $bearsamppWinbinder\->messageBoxError(
455                     sprintf($bearsamppLang\->getValue(Lang::BEARSAMPP_CONF_NOT_FOUND_ERROR), $this\->getName() \&. ' ' \&. $version),
456                     $boxTitle
457                 );
458             }
459             return false;
460         }
461 
462         $bearsamppConfRaw = parse_ini_file($bearsamppConf);
463         if ($bearsamppConfRaw === false || !isset($bearsamppConfRaw[self::ROOT_CFG_VERSION]) || $bearsamppConfRaw[self::ROOT_CFG_VERSION] != $version) {
464             Util::logError('bearsampp config file malformed for ' \&. $this\->getName() \&. ' ' \&. $version);
465             if ($showWindow) {
466                 $bearsamppWinbinder\->messageBoxError(
467                     sprintf($bearsamppLang\->getValue(Lang::BEARSAMPP_CONF_MALFORMED_ERROR), $this\->getName() \&. ' ' \&. $version),
468                     $boxTitle
469                 );
470             }
471             return false;
472         }
473 
474         // bearsampp\&.conf
475         $this\->setVersion($version);
476 
477         // conf
478         Util::replaceInFile($this\->getConf(), array(
479             '/^port(\&.*?)=(\&.*?)(\\d+)/' => 'port = ' \&. $this\->port
480         ));
481 
482         // phpmyadmin
483         $bearsamppApps\->getPhpmyadmin()\->update($sub + 1);
484 
485         return true;
486     }
.PP
.fi

.PP
References \fBModule\\$bearsamppConf\fP, \fBModule\\$bearsamppConfRaw\fP, \fB$bearsamppLang\fP, \fB$conf\fP, \fBModule\\$version\fP, \fBLang\\BEARSAMPP_CONF_MALFORMED_ERROR\fP, \fBLang\\BEARSAMPP_CONF_NOT_FOUND_ERROR\fP, \fBgetConf()\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBUtil\\replaceInFile()\fP, \fBsetVersion()\fP, and \fBLang\\SWITCH_VERSION_TITLE\fP\&.
.PP
Referenced by \fBswitchVersion()\fP\&.
.SH "Field Documentation"
.PP 
.SS "$admin\fR [private]\fP"

.PP
Definition at line \fB44\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBgetAdmin()\fP\&.
.SS "$cliExe\fR [private]\fP"

.PP
Definition at line \fB43\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBgetCliExe()\fP\&.
.SS "$conf\fR [private]\fP"

.PP
Definition at line \fB39\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBgetConf()\fP, and \fBupdateConfig()\fP\&.
.SS "$errorLog\fR [private]\fP"

.PP
Definition at line \fB36\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBgetErrorLog()\fP\&.
.SS "$exe\fR [private]\fP"

.PP
Definition at line \fB38\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBgetExe()\fP\&.
.SS "$port\fR [private]\fP"

.PP
Definition at line \fB40\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBchangePort()\fP, \fBcheckPort()\fP, \fBgetPort()\fP, and \fBsetPort()\fP\&.
.SS "$rootPwd\fR [private]\fP"

.PP
Definition at line \fB42\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBgetRootPwd()\fP, and \fBsetRootPwd()\fP\&.
.SS "$rootUser\fR [private]\fP"

.PP
Definition at line \fB41\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBgetRootUser()\fP, and \fBsetRootUser()\fP\&.
.SS "$service\fR [private]\fP"

.PP
Definition at line \fB35\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBgetService()\fP\&.
.SS "const CMD_SYNTAX_CHECK = '\-\-help \-\-verbose 1>NUL'"

.PP
Definition at line \fB33\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBActionDebugMariadb\\__construct()\fP, \fBActionService\\__construct()\fP, \fBTplAppMariadb\\getMenuMariadbDebug()\fP, \fBActionStartup\\installServices()\fP, and \fBWin32Service\\start()\fP\&.
.SS "const CMD_VARIABLES = 'variables'"

.PP
Definition at line \fB32\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBActionDebugMariadb\\__construct()\fP, and \fBTplAppMariadb\\getMenuMariadbDebug()\fP\&.
.SS "const CMD_VERSION = '\-\-version'"

.PP
Definition at line \fB31\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBActionDebugMariadb\\__construct()\fP, and \fBTplAppMariadb\\getMenuMariadbDebug()\fP\&.
.SS "const LOCAL_CFG_ADMIN = 'mariadbAdmin'"

.PP
Definition at line \fB25\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SS "const LOCAL_CFG_CLI_EXE = 'mariadbCliExe'"

.PP
Definition at line \fB24\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SS "const LOCAL_CFG_CONF = 'mariadbConf'"

.PP
Definition at line \fB26\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SS "const LOCAL_CFG_EXE = 'mariadbExe'"

.PP
Definition at line \fB23\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SS "const LOCAL_CFG_PORT = 'mariadbPort'"

.PP
Definition at line \fB27\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SS "const LOCAL_CFG_ROOT_PWD = 'mariadbRootPwd'"

.PP
Definition at line \fB29\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SS "const LOCAL_CFG_ROOT_USER = 'mariadbRootUser'"

.PP
Definition at line \fB28\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SS "const ROOT_CFG_ENABLE = 'mariadbEnable'"

.PP
Definition at line \fB20\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SS "const ROOT_CFG_VERSION = 'mariadbVersion'"

.PP
Definition at line \fB21\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.SS "const SERVICE_NAME = 'bearsamppmariadb'"

.PP
Definition at line \fB18\fP of file \fBclass\&.bin\&.mariadb\&.php\fP\&.
.PP
Referenced by \fBActionService\\__construct()\fP, \fBTplAppMariadb\\getActionInstallMariadbService()\fP, \fBTplAppMariadb\\getActionRemoveMariadbService()\fP, \fBBins\\getServices()\fP, \fBActionStartup\\installServices()\fP, \fBActionQuit\\processWindow()\fP, and \fBWin32Service\\start()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
