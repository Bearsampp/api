.TH "BinNodejs" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BinNodejs
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBModule\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($id, $type)"
.br
.ti -1c
.RI "\fBgetConf\fP ()"
.br
.ti -1c
.RI "\fBgetExe\fP ()"
.br
.ti -1c
.RI "\fBgetLaunch\fP ()"
.br
.ti -1c
.RI "\fBgetNpm\fP ()"
.br
.ti -1c
.RI "\fBgetVars\fP ()"
.br
.ti -1c
.RI "\fBreload\fP ($id=null, $type=null)"
.br
.ti -1c
.RI "\fBsetEnable\fP ($enabled, $showWindow=false)"
.br
.ti -1c
.RI "\fBsetVersion\fP ($version)"
.br
.ti -1c
.RI "\fBswitchVersion\fP ($version, $showWindow=false)"
.br
.in -1c

Public Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__toString\fP ()"
.br
.ti -1c
.RI "\fBgetCurrentPath\fP ()"
.br
.ti -1c
.RI "\fBgetId\fP ()"
.br
.ti -1c
.RI "\fBgetName\fP ()"
.br
.ti -1c
.RI "\fBgetRelease\fP ()"
.br
.ti -1c
.RI "\fBgetRootPath\fP ()"
.br
.ti -1c
.RI "\fBgetSymlinkPath\fP ()"
.br
.ti -1c
.RI "\fBgetType\fP ()"
.br
.ti -1c
.RI "\fBgetVersion\fP ()"
.br
.ti -1c
.RI "\fBgetVersionList\fP ()"
.br
.ti -1c
.RI "\fBisEnable\fP ()"
.br
.ti -1c
.RI "\fBupdate\fP ($sub=0, $showWindow=false)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBLOCAL_CFG_CONF\fP = 'nodejsConf'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_EXE\fP = 'nodejsExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_LAUNCH\fP = 'nodejsLaunch'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_NPM\fP = 'nodejsNpm'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_VARS\fP = 'nodejsVars'"
.br
.ti -1c
.RI "const \fBROOT_CFG_ENABLE\fP = 'nodejsEnable'"
.br
.ti -1c
.RI "const \fBROOT_CFG_VERSION\fP = 'nodejsVersion'"
.br
.in -1c

Data Fields inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "const \fBBUNDLE_RELEASE\fP = 'bundleRelease'"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBupdateConfig\fP ($version=null, $sub=0, $showWindow=false)"
.br
.in -1c

Protected Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__construct\fP ()"
.br
.ti -1c
.RI "\fBreplace\fP ($key, $value)"
.br
.ti -1c
.RI "\fBreplaceAll\fP ($params)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$conf\fP"
.br
.ti -1c
.RI "\fB$exe\fP"
.br
.ti -1c
.RI "\fB$launch\fP"
.br
.ti -1c
.RI "\fB$npm\fP"
.br
.ti -1c
.RI "\fB$vars\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Attributes inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB$bearsamppConf\fP"
.br
.ti -1c
.RI "\fB$bearsamppConfRaw\fP"
.br
.ti -1c
.RI "\fB$currentPath\fP"
.br
.ti -1c
.RI "\fB$enable\fP"
.br
.ti -1c
.RI "\fB$name\fP"
.br
.ti -1c
.RI "\fB$release\fP = 'N/A'"
.br
.ti -1c
.RI "\fB$rootPath\fP"
.br
.ti -1c
.RI "\fB$symlinkPath\fP"
.br
.ti -1c
.RI "\fB$version\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBBinNodejs\fP

.PP
The \fR\fBBinNodejs\fP\fP class extends the \fR\fBModule\fP\fP class and provides functionalities specific to managing the Node\&.js module within the \fBBearsampp\fP application\&. It includes methods for reloading the module configuration, switching versions, enabling/disabling the module, and retrieving various configuration paths such as the executable, configuration file, variables file, npm executable, and launch script\&.

.PP
Constants:
.IP "\(bu" 2
\fRROOT_CFG_ENABLE\fP: Configuration key for enabling the Node\&.js module\&.
.IP "\(bu" 2
\fRROOT_CFG_VERSION\fP: Configuration key for the Node\&.js version\&.
.IP "\(bu" 2
\fRLOCAL_CFG_EXE\fP: Configuration key for the Node\&.js executable\&.
.IP "\(bu" 2
\fRLOCAL_CFG_VARS\fP: Configuration key for the Node\&.js variables\&.
.IP "\(bu" 2
\fRLOCAL_CFG_NPM\fP: Configuration key for the npm executable\&.
.IP "\(bu" 2
\fRLOCAL_CFG_LAUNCH\fP: Configuration key for the Node\&.js launch script\&.
.IP "\(bu" 2
\fRLOCAL_CFG_CONF\fP: Configuration key for the Node\&.js configuration file\&.
.PP

.PP
Properties:
.IP "\(bu" 2
\fRexe\fP: Path to the Node\&.js executable\&.
.IP "\(bu" 2
\fRconf\fP: Path to the Node\&.js configuration file\&.
.IP "\(bu" 2
\fRvars\fP: Path to the Node\&.js variables file\&.
.IP "\(bu" 2
\fRnpm\fP: Path to the npm executable\&.
.IP "\(bu" 2
\fRlaunch\fP: Path to the Node\&.js launch script\&.
.PP

.PP
Methods:
.IP "\(bu" 2
\fR__construct($id, $type)\fP: Constructs a \fR\fBBinNodejs\fP\fP object and initializes the module with the given ID and type\&.
.IP "\(bu" 2
\fRreload($id = null, $type = null)\fP: Reloads the module configuration based on the provided ID and type\&.
.IP "\(bu" 2
\fRswitchVersion($version, $showWindow = false)\fP: Switches the Node\&.js version to the specified version\&.
.IP "\(bu" 2
\fRupdateConfig($version = null, $sub = 0, $showWindow = false)\fP: Updates the module configuration with a specific version\&.
.IP "\(bu" 2
\fRsetVersion($version)\fP: Sets the version of the module\&.
.IP "\(bu" 2
\fRsetEnable($enabled, $showWindow = false)\fP: Enables or disables the module\&.
.IP "\(bu" 2
\fR\fBgetExe()\fP\fP: Retrieves the executable path for Node\&.js\&.
.IP "\(bu" 2
\fR\fBgetConf()\fP\fP: Retrieves the configuration file path for Node\&.js\&.
.IP "\(bu" 2
\fR\fBgetVars()\fP\fP: Retrieves the variables file path for Node\&.js\&.
.IP "\(bu" 2
\fR\fBgetNpm()\fP\fP: Retrieves the npm executable path for Node\&.js\&.
.IP "\(bu" 2
\fR\fBgetLaunch()\fP\fP: Retrieves the launch script path for Node\&.js\&. 
.PP

.PP
Definition at line \fB48\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $id,  $type)"
Constructs a \fBBinNodejs\fP object and initializes the module with the given ID and type\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. 
.br
\fI$type\fP The type of the module\&. 
.RE
.PP

.PP
Definition at line \fB71\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
71                                             {
72         Util::logInitClass($this);
73         $this\->reload($id, $type);
74     }
.PP
.fi

.PP
References \fBModule\\$id\fP, \fBModule\\$type\fP, \fBUtil\\logInitClass()\fP, and \fBreload()\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "getConf ()"
Retrieves the configuration file path for Node\&.js\&.

.PP
\fBReturns\fP
.RS 4
string The configuration file path\&. 
.RE
.PP

.PP
Definition at line \fB248\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
248                               {
249         return $this\->conf;
250     }
.PP
.fi

.PP
References \fB$conf\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "getExe ()"
Retrieves the executable path for Node\&.js\&.

.PP
\fBReturns\fP
.RS 4
string The executable path\&. 
.RE
.PP

.PP
Definition at line \fB239\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
239                              {
240         return $this\->exe;
241     }
.PP
.fi

.PP
References \fB$exe\fP\&.
.SS "getLaunch ()"
Retrieves the launch script path for Node\&.js\&.

.PP
\fBReturns\fP
.RS 4
string The launch script path\&. 
.RE
.PP

.PP
Definition at line \fB275\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
275                                 {
276         return $this\->launch;
277     }
.PP
.fi

.PP
References \fB$launch\fP\&.
.SS "getNpm ()"
Retrieves the npm executable path for Node\&.js\&.

.PP
\fBReturns\fP
.RS 4
string The npm executable path\&. 
.RE
.PP

.PP
Definition at line \fB266\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
266                              {
267         return $this\->npm;
268     }
.PP
.fi

.PP
References \fB$npm\fP\&.
.SS "getVars ()"
Retrieves the variables file path for Node\&.js\&.

.PP
\fBReturns\fP
.RS 4
string The variables file path\&. 
.RE
.PP

.PP
Definition at line \fB257\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
257                               {
258         return $this\->vars;
259     }
.PP
.fi

.PP
References \fB$vars\fP\&.
.SS "reload ( $id = \fRnull\fP,  $type = \fRnull\fP)"
Reloads the module configuration based on the provided ID and type\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. If null, the current ID is used\&. 
.br
\fI$type\fP The type of the module\&. If null, the current type is used\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB82\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
82                                                      {
83         global $bearsamppConfig, $bearsamppLang;
84         Util::logReloadClass($this);
85 
86         $this\->name = $bearsamppLang\->getValue(Lang::NODEJS);
87         $this\->version = $bearsamppConfig\->getRaw(self::ROOT_CFG_VERSION);
88         parent::reload($id, $type);
89 
90         $this\->enable = $this\->enable && $bearsamppConfig\->getRaw(self::ROOT_CFG_ENABLE);
91 
92         if ($this\->bearsamppConfRaw !== false) {
93             $this\->exe = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_EXE];
94             $this\->conf = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CONF];
95             $this\->vars = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_VARS];
96             $this\->npm = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_NPM];
97             $this\->launch = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_LAUNCH];
98         }
99 
100         if (!$this\->enable) {
101             Util::logInfo($this\->name \&. ' is not enabled!');
102             return;
103         }
104         if (!is_dir($this\->currentPath)) {
105             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_FILE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->currentPath));
106             return;
107         }
108         if (!is_dir($this\->symlinkPath)) {
109             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_FILE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->symlinkPath));
110             return;
111         }
112         if (!is_file($this\->bearsamppConf)) {
113             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_CONF_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->bearsamppConf));
114             return;
115         }
116         if (!is_file($this\->exe)) {
117             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->exe));
118         }
119         if (!is_file($this\->conf)) {
120             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_CONF_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->conf));
121         }
122         if (!is_file($this\->vars)) {
123             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->vars));
124         }
125         if (!is_file($this\->npm)) {
126             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->npm));
127         }
128         if (!is_file($this\->launch)) {
129             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->launch));
130         }
131     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fBModule\\$id\fP, \fBModule\\$type\fP, \fBLang\\ERROR_CONF_NOT_FOUND\fP, \fBLang\\ERROR_EXE_NOT_FOUND\fP, \fBLang\\ERROR_FILE_NOT_FOUND\fP, \fBUtil\\logError()\fP, \fBUtil\\logInfo()\fP, \fBUtil\\logReloadClass()\fP, and \fBLang\\NODEJS\fP\&.
.PP
Referenced by \fB__construct()\fP, and \fBsetVersion()\fP\&.
.SS "setEnable ( $enabled,  $showWindow = \fRfalse\fP)"
Enables or disables the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$enabled\fP The enable status (1 for enabled, 0 for disabled)\&. 
.br
\fI$showWindow\fP Whether to show a window during the enable/disable process\&. 
.RE
.PP

.PP
Definition at line \fB215\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
215                                                              {
216         global $bearsamppConfig, $bearsamppLang, $bearsamppWinbinder;
217 
218         if ($enabled == Config::ENABLED && !is_dir($this\->currentPath)) {
219             Util::logDebug($this\->getName() \&. ' cannot be enabled because bundle ' \&. $this\->getVersion() \&. ' does not exist in ' \&. $this\->currentPath);
220             if ($showWindow) {
221                 $bearsamppWinbinder\->messageBoxError(
222                     sprintf($bearsamppLang\->getValue(Lang::ENABLE_BUNDLE_NOT_EXIST), $this\->getName(), $this\->getVersion(), $this\->currentPath),
223                     sprintf($bearsamppLang\->getValue(Lang::ENABLE_TITLE), $this\->getName())
224                 );
225             }
226             $enabled = Config::DISABLED;
227         }
228 
229         Util::logInfo($this\->getName() \&. ' switched to ' \&. ($enabled == Config::ENABLED ? 'enabled' : 'disabled'));
230         $this\->enable = $enabled == Config::ENABLED;
231         $bearsamppConfig\->replace(self::ROOT_CFG_ENABLE, $enabled);
232     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fBConfig\\DISABLED\fP, \fBLang\\ENABLE_BUNDLE_NOT_EXIST\fP, \fBLang\\ENABLE_TITLE\fP, \fBConfig\\ENABLED\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\logDebug()\fP, and \fBUtil\\logInfo()\fP\&.
.SS "setVersion ( $version)"
Sets the version of the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to set\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB202\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
202                                          {
203         global $bearsamppConfig;
204         $this\->version = $version;
205         $bearsamppConfig\->replace(self::ROOT_CFG_VERSION, $version);
206         $this\->reload();
207     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fBModule\\$version\fP, and \fBreload()\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "switchVersion ( $version,  $showWindow = \fRfalse\fP)"
Switches the Node\&.js version to the specified version\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to switch to\&. 
.br
\fI$showWindow\fP Whether to show a window during the switch process\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the switch was successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB140\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
140                                                                  {
141         Util::logDebug('Switch ' \&. $this\->name \&. ' version to ' \&. $version);
142         return $this\->updateConfig($version, 0, $showWindow);
143     }
.PP
.fi

.PP
References \fBModule\\$version\fP, \fBUtil\\logDebug()\fP, and \fBupdateConfig()\fP\&.
.SS "updateConfig ( $version = \fRnull\fP,  $sub = \fR0\fP,  $showWindow = \fRfalse\fP)\fR [protected]\fP"
Updates the module configuration with a specific version\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to update to\&. If null, the current version is used\&. 
.br
\fI$sub\fP The sub-level for logging indentation\&. 
.br
\fI$showWindow\fP Whether to show a window during the update process\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the update was successful, false otherwise\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB153\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.nf
153                                                                                     {
154         global $bearsamppLang, $bearsamppWinbinder;
155 
156         if (!$this\->enable) {
157             return true;
158         }
159 
160         $version = $version == null ? $this\->version : $version;
161         Util::logDebug(($sub > 0 ? str_repeat(' ', 2 * $sub) : '') \&. 'Update ' \&. $this\->name \&. ' ' \&. $version \&. ' config');
162 
163         $boxTitle = sprintf($bearsamppLang\->getValue(Lang::SWITCH_VERSION_TITLE), $this\->getName(), $version);
164 
165         $conf = str_replace('nodejs' \&. $this\->getVersion(), 'nodejs' \&. $version, $this\->getConf());
166         $bearsamppConf = str_replace('nodejs' \&. $this\->getVersion(), 'nodejs' \&. $version, $this\->bearsamppConf);
167 
168         if (!file_exists($conf) || !file_exists($bearsamppConf)) {
169             Util::logError('bearsampp config files not found for ' \&. $this\->getName() \&. ' ' \&. $version);
170             if ($showWindow) {
171                 $bearsamppWinbinder\->messageBoxError(
172                     sprintf($bearsamppLang\->getValue(Lang::BEARSAMPP_CONF_NOT_FOUND_ERROR), $this\->getName() \&. ' ' \&. $version),
173                     $boxTitle
174                 );
175             }
176             return false;
177         }
178 
179         $bearsamppConfRaw = parse_ini_file($bearsamppConf);
180         if ($bearsamppConfRaw === false || !isset($bearsamppConfRaw[self::ROOT_CFG_VERSION]) || $bearsamppConfRaw[self::ROOT_CFG_VERSION] != $version) {
181             Util::logError('bearsampp config file malformed for ' \&. $this\->getName() \&. ' ' \&. $version);
182             if ($showWindow) {
183                 $bearsamppWinbinder\->messageBoxError(
184                     sprintf($bearsamppLang\->getValue(Lang::BEARSAMPP_CONF_MALFORMED_ERROR), $this\->getName() \&. ' ' \&. $version),
185                     $boxTitle
186                 );
187             }
188             return false;
189         }
190 
191         // bearsampp\&.conf
192         $this\->setVersion($version);
193 
194         return true;
195     }
.PP
.fi

.PP
References \fBModule\\$bearsamppConf\fP, \fBModule\\$bearsamppConfRaw\fP, \fB$bearsamppLang\fP, \fB$conf\fP, \fBModule\\$version\fP, \fBLang\\BEARSAMPP_CONF_MALFORMED_ERROR\fP, \fBLang\\BEARSAMPP_CONF_NOT_FOUND_ERROR\fP, \fBgetConf()\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBsetVersion()\fP, and \fBLang\\SWITCH_VERSION_TITLE\fP\&.
.PP
Referenced by \fBswitchVersion()\fP\&.
.SH "Field Documentation"
.PP 
.SS "$conf\fR [private]\fP"

.PP
Definition at line \fB60\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.PP
Referenced by \fBgetConf()\fP, and \fBupdateConfig()\fP\&.
.SS "$exe\fR [private]\fP"

.PP
Definition at line \fB59\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.PP
Referenced by \fBgetExe()\fP\&.
.SS "$launch\fR [private]\fP"

.PP
Definition at line \fB63\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.PP
Referenced by \fBgetLaunch()\fP\&.
.SS "$npm\fR [private]\fP"

.PP
Definition at line \fB62\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.PP
Referenced by \fBgetNpm()\fP\&.
.SS "$vars\fR [private]\fP"

.PP
Definition at line \fB61\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.PP
Referenced by \fBgetVars()\fP\&.
.SS "const LOCAL_CFG_CONF = 'nodejsConf'"

.PP
Definition at line \fB57\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.SS "const LOCAL_CFG_EXE = 'nodejsExe'"

.PP
Definition at line \fB53\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.SS "const LOCAL_CFG_LAUNCH = 'nodejsLaunch'"

.PP
Definition at line \fB56\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.SS "const LOCAL_CFG_NPM = 'nodejsNpm'"

.PP
Definition at line \fB55\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.SS "const LOCAL_CFG_VARS = 'nodejsVars'"

.PP
Definition at line \fB54\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.SS "const ROOT_CFG_ENABLE = 'nodejsEnable'"

.PP
Definition at line \fB50\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.
.SS "const ROOT_CFG_VERSION = 'nodejsVersion'"

.PP
Definition at line \fB51\fP of file \fBclass\&.bin\&.nodejs\&.php\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
