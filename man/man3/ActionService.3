.TH "ActionService" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ActionService
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($args)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBCREATE\fP = '\fBcreate\fP'"
.br
.ti -1c
.RI "const \fBINSTALL\fP = '\fBinstall\fP'"
.br
.ti -1c
.RI "const \fBREMOVE\fP = '\fBremove\fP'"
.br
.ti -1c
.RI "const \fBRESTART\fP = '\fBrestart\fP'"
.br
.ti -1c
.RI "const \fBSTART\fP = '\fBstart\fP'"
.br
.ti -1c
.RI "const \fBSTOP\fP = '\fBstop\fP'"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBcreate\fP ($service)"
.br
.ti -1c
.RI "\fBinstall\fP ($bin, $port, $syntaxCheckCmd)"
.br
.ti -1c
.RI "\fBremove\fP ($service, $name)"
.br
.ti -1c
.RI "\fBrestart\fP ($bin, $syntaxCheckCmd)"
.br
.ti -1c
.RI "\fBstart\fP ($bin, $syntaxCheckCmd)"
.br
.ti -1c
.RI "\fBstop\fP ($service)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBActionService\fP Handles various actions related to services such as creating, starting, stopping, restarting, installing, and removing\&. 
.PP
Definition at line \fB14\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $args)"
\fBActionService\fP constructor\&. Initializes the service action based on provided arguments\&.

.PP
\fBParameters\fP
.RS 4
\fI$args\fP Arguments for the service action\&. 
.RE
.PP

.PP
Definition at line \fB30\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.nf
31     {
32         global $bearsamppBins;
33         Util::startLoading();
34 
35         // Reload bins
36         $bearsamppBins\->reload();
37 
38         if ( isset( $args[0] ) && !empty( $args[0] ) && isset( $args[1] ) && !empty( $args[1] ) ) {
39             $sName          = $args[0];
40             $bin            = null;
41             $port           = 0;
42             $syntaxCheckCmd = null;
43 
44             if ( $sName == BinMailpit::SERVICE_NAME ) {
45                 $bin  = $bearsamppBins\->getMailpit();
46                 $port = $bin\->getSmtpPort();
47             }
48             elseif ( $sName == BinMemcached::SERVICE_NAME ) {
49                 $bin  = $bearsamppBins\->getMemcached();
50                 $port = $bin\->getPort();
51             }
52             elseif ( $sName == BinApache::SERVICE_NAME ) {
53                 $bin            = $bearsamppBins\->getApache();
54                 $port           = $bin\->getPort();
55                 $syntaxCheckCmd = BinApache::CMD_SYNTAX_CHECK;
56             }
57             elseif ( $sName == BinMysql::SERVICE_NAME ) {
58                 $bin            = $bearsamppBins\->getMysql();
59                 $port           = $bin\->getPort();
60                 $syntaxCheckCmd = BinMysql::CMD_SYNTAX_CHECK;
61             }
62             elseif ( $sName == BinMariadb::SERVICE_NAME ) {
63                 $bin            = $bearsamppBins\->getMariadb();
64                 $port           = $bin\->getPort();
65                 $syntaxCheckCmd = BinMariadb::CMD_SYNTAX_CHECK;
66             }
67             elseif ( $sName == BinPostgresql::SERVICE_NAME ) {
68                 $bin  = $bearsamppBins\->getPostgresql();
69                 $port = $bin\->getPort();
70             }
71             elseif ( $sName == BinXlight::SERVICE_NAME ) {
72                 $bin  = $bearsamppBins\->getXlight();
73                 $port = $bin\->getPort();
74             }
75 
76             $name    = $bin\->getName();
77             $service = $bin\->getService();
78 
79             if ( !empty( $service ) && $service instanceof Win32Service ) {
80                 if ( $args[1] == self::CREATE ) {
81                     $this\->create( $service );
82                 }
83                 elseif ( $args[1] == self::START ) {
84                     $this\->start( $bin, $syntaxCheckCmd );
85                 }
86                 elseif ( $args[1] == self::STOP ) {
87                     $this\->stop( $service );
88                 }
89                 elseif ( $args[1] == self::RESTART ) {
90                     $this\->restart( $bin, $syntaxCheckCmd );
91                 }
92                 elseif ( $args[1] == self::INSTALL ) {
93                     if ( !empty( $port ) ) {
94                         $this\->install( $bin, $port, $syntaxCheckCmd );
95                     }
96                 }
97                 elseif ( $args[1] == self::REMOVE ) {
98                     $this\->remove( $service, $name );
99                 }
100             }
101         }
102 
103         Util::stopLoading();
104     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fB$port\fP, \fBBinApache\\CMD_SYNTAX_CHECK\fP, \fBBinMariadb\\CMD_SYNTAX_CHECK\fP, \fBBinMysql\\CMD_SYNTAX_CHECK\fP, \fBcreate()\fP, \fBinstall()\fP, \fBrestart()\fP, \fBBinApache\\SERVICE_NAME\fP, \fBBinMailpit\\SERVICE_NAME\fP, \fBBinMariadb\\SERVICE_NAME\fP, \fBBinMemcached\\SERVICE_NAME\fP, \fBBinMysql\\SERVICE_NAME\fP, \fBBinPostgresql\\SERVICE_NAME\fP, \fBBinXlight\\SERVICE_NAME\fP, \fBstart()\fP, \fBUtil\\startLoading()\fP, \fBstop()\fP, and \fBUtil\\stopLoading()\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "create ( $service)\fR [private]\fP"
Creates a service\&.

.PP
\fBParameters\fP
.RS 4
\fI$service\fP The service to create\&. 
.RE
.PP

.PP
Definition at line \fB111\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.nf
112     {
113         $service\->create();
114     }
.PP
.fi

.PP
Referenced by \fB__construct()\fP\&.
.SS "install ( $bin,  $port,  $syntaxCheckCmd)\fR [private]\fP"
Installs a service\&.

.PP
\fBParameters\fP
.RS 4
\fI$bin\fP The binary object of the service\&. 
.br
\fI$port\fP The port number for the service\&. 
.br
\fI$syntaxCheckCmd\fP The command to check syntax, if applicable\&. 
.RE
.PP

.PP
Definition at line \fB157\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.nf
158     {
159         Util::installService( $bin, $port, $syntaxCheckCmd, true );
160     }
.PP
.fi

.PP
References \fB$port\fP, and \fBUtil\\installService()\fP\&.
.PP
Referenced by \fB__construct()\fP\&.
.SS "remove ( $service,  $name)\fR [private]\fP"
Removes a service\&.

.PP
\fBParameters\fP
.RS 4
\fI$service\fP The service to remove\&. 
.br
\fI$name\fP The name of the service\&. 
.RE
.PP

.PP
Definition at line \fB168\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.nf
169     {
170         Util::removeService( $service, $name );
171     }
.PP
.fi

.PP
References \fBUtil\\removeService()\fP\&.
.SS "restart ( $bin,  $syntaxCheckCmd)\fR [private]\fP"
Restarts a service\&.

.PP
\fBParameters\fP
.RS 4
\fI$bin\fP The binary object of the service\&. 
.br
\fI$syntaxCheckCmd\fP The command to check syntax, if applicable\&. 
.RE
.PP

.PP
Definition at line \fB143\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.nf
144     {
145         if ( $bin\->getService()\->stop() ) {
146             $this\->start( $bin, $syntaxCheckCmd );
147         }
148     }
.PP
.fi

.PP
References \fBstart()\fP\&.
.PP
Referenced by \fB__construct()\fP\&.
.SS "start ( $bin,  $syntaxCheckCmd)\fR [private]\fP"
Starts a service\&.

.PP
\fBParameters\fP
.RS 4
\fI$bin\fP The binary object of the service\&. 
.br
\fI$syntaxCheckCmd\fP The command to check syntax, if applicable\&. 
.RE
.PP

.PP
Definition at line \fB122\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.nf
123     {
124         Util::startService( $bin, $syntaxCheckCmd, true );
125     }
.PP
.fi

.PP
References \fBUtil\\startService()\fP\&.
.PP
Referenced by \fB__construct()\fP, and \fBrestart()\fP\&.
.SS "stop ( $service)\fR [private]\fP"
Stops a service\&.

.PP
\fBParameters\fP
.RS 4
\fI$service\fP The service to stop\&. 
.RE
.PP

.PP
Definition at line \fB132\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.nf
133     {
134         $service\->stop();
135     }
.PP
.fi

.PP
Referenced by \fB__construct()\fP\&.
.SH "Field Documentation"
.PP 
.SS "const CREATE = '\fBcreate\fP'"

.PP
Definition at line \fB16\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.PP
Referenced by \fBTplService\\getActionCreate()\fP\&.
.SS "const INSTALL = '\fBinstall\fP'"

.PP
Definition at line \fB21\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.PP
Referenced by \fBTplService\\getActionInstall()\fP, \fBTplAppApache\\getActionInstallApacheService()\fP, \fBTplAppMailpit\\getActionInstallMailpitService()\fP, \fBTplAppMariadb\\getActionInstallMariadbService()\fP, \fBTplAppMemcached\\getActionInstallMemcachedService()\fP, \fBTplAppMysql\\getActionInstallMysqlService()\fP, \fBTplAppPostgresql\\getActionInstallPostgresqlService()\fP, \fBTplAppXlight\\getActionInstallXlightService()\fP, and \fBTplService\\getItemInstall()\fP\&.
.SS "const REMOVE = '\fBremove\fP'"

.PP
Definition at line \fB22\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.PP
Referenced by \fBTplService\\getActionRemove()\fP, \fBTplAppApache\\getActionRemoveApacheService()\fP, \fBTplAppMailpit\\getActionRemoveMailpitService()\fP, \fBTplAppMariadb\\getActionRemoveMariadbService()\fP, \fBTplAppMemcached\\getActionRemoveMemcachedService()\fP, \fBTplAppMysql\\getActionRemoveMysqlService()\fP, \fBTplAppPostgresql\\getActionRemovePostgresqlService()\fP, \fBTplAppXlight\\getActionRemoveXlightService()\fP, and \fBTplService\\getItemRemove()\fP\&.
.SS "const RESTART = '\fBrestart\fP'"

.PP
Definition at line \fB19\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.PP
Referenced by \fBTplService\\getActionRestart()\fP, and \fBTplService\\getItemRestart()\fP\&.
.SS "const START = '\fBstart\fP'"

.PP
Definition at line \fB17\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.PP
Referenced by \fBTplService\\getActionStart()\fP, and \fBTplService\\getItemStart()\fP\&.
.SS "const STOP = '\fBstop\fP'"

.PP
Definition at line \fB18\fP of file \fBclass\&.action\&.service\&.php\fP\&.
.PP
Referenced by \fBTplService\\getActionStop()\fP, and \fBTplService\\getItemStop()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
