.TH "TplAppMysql" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TplAppMysql
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBgetActionChangeMysqlPort\fP ()"
.br
.ti -1c
.RI "static \fBgetActionChangeMysqlRootPwd\fP ()"
.br
.ti -1c
.RI "static \fBgetActionEnableMysql\fP ($enable)"
.br
.ti -1c
.RI "static \fBgetActionInstallMysqlService\fP ()"
.br
.ti -1c
.RI "static \fBgetActionRemoveMysqlService\fP ()"
.br
.ti -1c
.RI "static \fBgetActionSwitchMysqlVersion\fP ($version)"
.br
.ti -1c
.RI "static \fBgetMenuMysql\fP ()"
.br
.ti -1c
.RI "static \fBgetMenuMysqlDebug\fP ()"
.br
.ti -1c
.RI "static \fBgetMenuMysqlService\fP ()"
.br
.ti -1c
.RI "static \fBgetMenuMysqlVersions\fP ()"
.br
.ti -1c
.RI "static \fBprocess\fP ()"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBACTION_CHANGE_PORT\fP = 'changeMysqlPort'"
.br
.ti -1c
.RI "const \fBACTION_CHANGE_ROOT_PWD\fP = 'changeMysqlRootPwd'"
.br
.ti -1c
.RI "const \fBACTION_ENABLE\fP = 'enableMysql'"
.br
.ti -1c
.RI "const \fBACTION_INSTALL_SERVICE\fP = 'installMysqlService'"
.br
.ti -1c
.RI "const \fBACTION_REMOVE_SERVICE\fP = 'removeMysqlService'"
.br
.ti -1c
.RI "const \fBACTION_SWITCH_VERSION\fP = 'switchMysqlVersion'"
.br
.ti -1c
.RI "const \fBMENU\fP = 'mysql'"
.br
.ti -1c
.RI "const \fBMENU_DEBUG\fP = 'mysqlDebug'"
.br
.ti -1c
.RI "const \fBMENU_SERVICE\fP = 'mysqlService'"
.br
.ti -1c
.RI "const \fBMENU_VERSIONS\fP = 'mysqlVersions'"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBTplAppMysql\fP

.PP
This class provides methods to generate and manage menu items, actions, and sections related to MySQL within the \fBBearsampp\fP application\&. It includes functionalities for enabling/disabling MySQL, switching versions, changing ports, managing services, and debugging\&. 
.PP
Definition at line \fB17\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "getActionChangeMysqlPort ()\fR [static]\fP"
Generates the action to change MySQL port\&.

.PP
This method creates the action string for changing the MySQL port\&.

.PP
@global object $bearsamppBins Provides access to system binaries and their configurations\&.

.PP
\fBReturns\fP
.RS 4
string The generated action string for changing MySQL port\&. 
.RE
.PP

.PP
Definition at line \fB294\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
295     {
296         global $bearsamppBins;
297 
298         return TplApp::getActionRun(Action::CHANGE_PORT, array($bearsamppBins\->getMysql()\->getName())) \&. PHP_EOL \&.
299             TplAppReload::getActionReload();
300     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fBAction\\CHANGE_PORT\fP, \fBTplAppReload\\getActionReload()\fP, and \fBTplApp\\getActionRun()\fP\&.
.SS "getActionChangeMysqlRootPwd ()\fR [static]\fP"
Generates the action to change MySQL root password\&.

.PP
This method creates the action string for changing the MySQL root password\&.

.PP
@global object $bearsamppBins Provides access to system binaries and their configurations\&.

.PP
\fBReturns\fP
.RS 4
string The generated action string for changing MySQL root password\&. 
.RE
.PP

.PP
Definition at line \fB311\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
312     {
313         global $bearsamppBins;
314 
315         return TplApp::getActionRun(Action::CHANGE_DB_ROOT_PWD, array($bearsamppBins\->getMysql()\->getName())) \&. PHP_EOL \&.
316             TplAppReload::getActionReload();
317     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fBAction\\CHANGE_DB_ROOT_PWD\fP, \fBTplAppReload\\getActionReload()\fP, and \fBTplApp\\getActionRun()\fP\&.
.SS "getActionEnableMysql ( $enable)\fR [static]\fP"
Generates the action to enable or disable MySQL\&.

.PP
This method creates the action string for enabling or disabling MySQL\&.

.PP
@global object $bearsamppBins Provides access to system binaries and their configurations\&.

.PP
\fBParameters\fP
.RS 4
\fI$enable\fP The enable/disable flag (1 for enable, 0 for disable)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
string The generated action string for enabling/disabling MySQL\&. 
.RE
.PP

.PP
Definition at line \fB161\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
162     {
163         global $bearsamppBins;
164 
165         return TplApp::getActionRun(Action::ENABLE, array($bearsamppBins\->getMysql()\->getName(), $enable)) \&. PHP_EOL \&.
166             TplAppReload::getActionReload();
167     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fBAction\\ENABLE\fP, \fBTplAppReload\\getActionReload()\fP, and \fBTplApp\\getActionRun()\fP\&.
.SS "getActionInstallMysqlService ()\fR [static]\fP"
Generates the action to install MySQL service\&.

.PP
This method creates the action string for installing the MySQL service\&.

.PP
\fBReturns\fP
.RS 4
string The generated action string for installing MySQL service\&. 
.RE
.PP

.PP
Definition at line \fB326\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
327     {
328         return TplApp::getActionRun(Action::SERVICE, array(BinMysql::SERVICE_NAME, ActionService::INSTALL)) \&. PHP_EOL \&.
329             TplAppReload::getActionReload();
330     }
.PP
.fi

.PP
References \fBTplAppReload\\getActionReload()\fP, \fBTplApp\\getActionRun()\fP, \fBActionService\\INSTALL\fP, \fBAction\\SERVICE\fP, and \fBBinMysql\\SERVICE_NAME\fP\&.
.SS "getActionRemoveMysqlService ()\fR [static]\fP"
Generates the action to remove MySQL service\&.

.PP
This method creates the action string for removing the MySQL service\&.

.PP
\fBReturns\fP
.RS 4
string The generated action string for removing MySQL service\&. 
.RE
.PP

.PP
Definition at line \fB339\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
340     {
341         return TplApp::getActionRun(Action::SERVICE, array(BinMysql::SERVICE_NAME, ActionService::REMOVE)) \&. PHP_EOL \&.
342             TplAppReload::getActionReload();
343     }
.PP
.fi

.PP
References \fBTplAppReload\\getActionReload()\fP, \fBTplApp\\getActionRun()\fP, \fBActionService\\REMOVE\fP, \fBAction\\SERVICE\fP, and \fBBinMysql\\SERVICE_NAME\fP\&.
.SS "getActionSwitchMysqlVersion ( $version)\fR [static]\fP"
Generates the action to switch MySQL version\&.

.PP
This method creates the action string for switching to a different MySQL version\&.

.PP
@global object $bearsamppBins Provides access to system binaries and their configurations\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to switch to\&. 
.RE
.PP
\fBReturns\fP
.RS 4
string The generated action string for switching MySQL version\&. 
.RE
.PP

.PP
Definition at line \fB179\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
180     {
181         global $bearsamppBins;
182 
183         return TplApp::getActionRun(Action::SWITCH_VERSION, array($bearsamppBins\->getMysql()\->getName(), $version)) \&. PHP_EOL \&.
184             TplAppReload::getActionReload() \&. PHP_EOL;
185     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fBTplAppReload\\getActionReload()\fP, \fBTplApp\\getActionRun()\fP, and \fBAction\\SWITCH_VERSION\fP\&.
.SS "getMenuMysql ()\fR [static]\fP"
Generates the MySQL menu items and actions\&.

.PP
This method creates menu items and actions for MySQL, including download links, enabling/disabling, version switching, service management, debugging, and configuration file access\&.

.PP
@global object $bearsamppBins Provides access to system binaries and their configurations\&. @global object $bearsamppLang Provides language support for retrieving language-specific values\&. @global object $bearsamppTools Provides access to various tools used in the application\&.

.PP
\fBReturns\fP
.RS 4
string The generated MySQL menu items and actions\&. 
.RE
.PP

.PP
Definition at line \fB61\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
62     {
63         global $bearsamppBins, $bearsamppLang, $bearsamppTools;
64         $resultItems = $resultActions = '';
65 
66         $isEnabled = $bearsamppBins\->getMysql()\->isEnable();
67 
68         // Download
69         $resultItems \&.= TplAestan::getItemLink( $bearsamppLang\->getValue(Lang::DOWNLOAD_MORE),
70             Util::getWebsiteUrl('module/mysql', '#releases'),
71             false,
72             TplAestan::GLYPH_BROWSER
73         ) \&. PHP_EOL;
74 
75         // Enable
76         $tplEnable = TplApp::getActionMulti(
77             self::ACTION_ENABLE, array($isEnabled ? Config::DISABLED : Config::ENABLED),
78             array($bearsamppLang\->getValue(Lang::MENU_ENABLE), $isEnabled ? TplAestan::GLYPH_CHECK : ''),
79             false, get_called_class()
80         );
81         $resultItems \&.= $tplEnable[TplApp::SECTION_CALL] \&. PHP_EOL;
82         $resultActions \&.= $tplEnable[TplApp::SECTION_CONTENT] \&. PHP_EOL;
83 
84         if ($isEnabled) {
85             $resultItems \&.= TplAestan::getItemSeparator() \&. PHP_EOL;
86 
87             // Versions
88             $tplVersions = TplApp::getMenu($bearsamppLang\->getValue(Lang::VERSIONS), self::MENU_VERSIONS, get_called_class());
89             $resultItems \&.= $tplVersions[TplApp::SECTION_CALL] \&. PHP_EOL;
90             $resultActions \&.= $tplVersions[TplApp::SECTION_CONTENT] \&. PHP_EOL;
91 
92             // Service
93             $tplService = TplApp::getMenu($bearsamppLang\->getValue(Lang::SERVICE), self::MENU_SERVICE, get_called_class());
94             $resultItems \&.= $tplService[TplApp::SECTION_CALL] \&. PHP_EOL;
95             $resultActions \&.= $tplService[TplApp::SECTION_CONTENT] \&. PHP_EOL;
96 
97             // Debug
98             $tplDebug = TplApp::getMenu($bearsamppLang\->getValue(Lang::DEBUG), self::MENU_DEBUG, get_called_class());
99             $resultItems \&.= $tplDebug[TplApp::SECTION_CALL] \&. PHP_EOL;
100             $resultActions \&.= $tplDebug[TplApp::SECTION_CONTENT];
101 
102             // Console
103             $resultItems \&.= TplAestan::getItemConsoleZ(
104                 $bearsamppLang\->getValue(Lang::CONSOLE),
105                 TplAestan::GLYPH_CONSOLEZ,
106                 $bearsamppTools\->getConsoleZ()\->getTabTitleMysql()
107             ) \&. PHP_EOL;
108 
109             // Conf
110             $resultItems \&.= TplAestan::getItemNotepad(basename($bearsamppBins\->getMysql()\->getConf()), $bearsamppBins\->getMysql()\->getConf()) \&. PHP_EOL;
111 
112             // Errors log
113             $resultItems \&.= TplAestan::getItemNotepad($bearsamppLang\->getValue(Lang::MENU_ERROR_LOGS), $bearsamppBins\->getMysql()\->getErrorLog()) \&. PHP_EOL;
114         }
115 
116         return $resultItems \&. PHP_EOL \&. $resultActions;
117     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fB$bearsamppLang\fP, \fBLang\\CONSOLE\fP, \fBLang\\DEBUG\fP, \fBConfig\\DISABLED\fP, \fBLang\\DOWNLOAD_MORE\fP, \fBConfig\\ENABLED\fP, \fBTplApp\\getActionMulti()\fP, \fBTplAestan\\getItemConsoleZ()\fP, \fBTplAestan\\getItemLink()\fP, \fBTplAestan\\getItemNotepad()\fP, \fBTplAestan\\getItemSeparator()\fP, \fBTplApp\\getMenu()\fP, \fBUtil\\getWebsiteUrl()\fP, \fBTplAestan\\GLYPH_BROWSER\fP, \fBTplAestan\\GLYPH_CHECK\fP, \fBTplAestan\\GLYPH_CONSOLEZ\fP, \fBLang\\MENU_ENABLE\fP, \fBLang\\MENU_ERROR_LOGS\fP, \fBTplApp\\SECTION_CALL\fP, \fBTplApp\\SECTION_CONTENT\fP, \fBLang\\SERVICE\fP, and \fBLang\\VERSIONS\fP\&.
.SS "getMenuMysqlDebug ()\fR [static]\fP"
Generates the MySQL debug menu\&.

.PP
This method creates menu items and actions for debugging MySQL, including checking version, variables, and syntax\&.

.PP
@global object $bearsamppLang Provides language support for retrieving language-specific values\&.

.PP
\fBReturns\fP
.RS 4
string The generated MySQL debug menu items and actions\&. 
.RE
.PP

.PP
Definition at line \fB267\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
268     {
269         global $bearsamppLang;
270 
271         return TplApp::getActionRun(
272             Action::DEBUG_MYSQL, array(BinMysql::CMD_VERSION),
273             array($bearsamppLang\->getValue(Lang::DEBUG_MYSQL_VERSION), TplAestan::GLYPH_DEBUG)
274         ) \&. PHP_EOL \&.
275         TplApp::getActionRun(
276             Action::DEBUG_MYSQL, array(BinMysql::CMD_VARIABLES),
277             array($bearsamppLang\->getValue(Lang::DEBUG_MYSQL_VARIABLES), TplAestan::GLYPH_DEBUG)
278         ) \&. PHP_EOL \&.
279         TplApp::getActionRun(
280             Action::DEBUG_MYSQL, array(BinMysql::CMD_SYNTAX_CHECK),
281             array($bearsamppLang\->getValue(Lang::DEBUG_MYSQL_SYNTAX_CHECK), TplAestan::GLYPH_DEBUG)
282         ) \&. PHP_EOL;
283     }
.PP
.fi

.PP
References \fB$bearsamppLang\fP, \fBBinMysql\\CMD_SYNTAX_CHECK\fP, \fBBinMysql\\CMD_VARIABLES\fP, \fBBinMysql\\CMD_VERSION\fP, \fBAction\\DEBUG_MYSQL\fP, \fBLang\\DEBUG_MYSQL_SYNTAX_CHECK\fP, \fBLang\\DEBUG_MYSQL_VARIABLES\fP, \fBLang\\DEBUG_MYSQL_VERSION\fP, \fBTplApp\\getActionRun()\fP, and \fBTplAestan\\GLYPH_DEBUG\fP\&.
.SS "getMenuMysqlService ()\fR [static]\fP"
Generates the MySQL service menu\&.

.PP
This method creates menu items and actions for managing MySQL services, including starting, stopping, restarting, changing ports, and managing root passwords\&.

.PP
@global object $bearsamppLang Provides language support for retrieving language-specific values\&. @global object $bearsamppBins Provides access to system binaries and their configurations\&.

.PP
\fBReturns\fP
.RS 4
string The generated MySQL service menu items and actions\&. 
.RE
.PP

.PP
Definition at line \fB198\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
199     {
200         global $bearsamppLang, $bearsamppBins;
201 
202         $tplChangePort = TplApp::getActionMulti(
203             self::ACTION_CHANGE_PORT, null,
204             array($bearsamppLang\->getValue(Lang::MENU_CHANGE_PORT), TplAestan::GLYPH_NETWORK),
205             false, get_called_class()
206         );
207 
208         $isInstalled = $bearsamppBins\->getMysql()\->getService()\->isInstalled();
209 
210         $result = TplAestan::getItemActionServiceStart($bearsamppBins\->getMysql()\->getService()\->getName()) \&. PHP_EOL \&.
211             TplAestan::getItemActionServiceStop($bearsamppBins\->getMysql()\->getService()\->getName()) \&. PHP_EOL \&.
212             TplAestan::getItemActionServiceRestart($bearsamppBins\->getMysql()\->getService()\->getName()) \&. PHP_EOL \&.
213             TplAestan::getItemSeparator() \&. PHP_EOL \&.
214             TplApp::getActionRun(
215                 Action::CHECK_PORT, array($bearsamppBins\->getMysql()\->getName(), $bearsamppBins\->getMysql()\->getPort()),
216                 array(sprintf($bearsamppLang\->getValue(Lang::MENU_CHECK_PORT), $bearsamppBins\->getMysql()\->getPort()), TplAestan::GLYPH_LIGHT)
217             ) \&. PHP_EOL \&.
218             $tplChangePort[TplApp::SECTION_CALL] \&. PHP_EOL;
219 
220         $tplChangeRootPwd = null;
221         if ($isInstalled) {
222             $tplChangeRootPwd = TplApp::getActionMulti(
223                 self::ACTION_CHANGE_ROOT_PWD, null,
224                 array($bearsamppLang\->getValue(Lang::MENU_CHANGE_ROOT_PWD), TplAestan::GLYPH_PASSWORD),
225                 !$isInstalled, get_called_class()
226             );
227 
228             $result \&.= $tplChangeRootPwd[TplApp::SECTION_CALL] \&. PHP_EOL;
229         }
230 
231         if (!$isInstalled) {
232             $tplInstallService = TplApp::getActionMulti(
233                 self::ACTION_INSTALL_SERVICE, null,
234                 array($bearsamppLang\->getValue(Lang::MENU_INSTALL_SERVICE), TplAestan::GLYPH_SERVICE_INSTALL),
235                 $isInstalled, get_called_class()
236             );
237 
238             $result \&.= $tplInstallService[TplApp::SECTION_CALL] \&. PHP_EOL \&. PHP_EOL \&.
239             $tplInstallService[TplApp::SECTION_CONTENT] \&. PHP_EOL;
240         } else {
241             $tplRemoveService = TplApp::getActionMulti(
242                 self::ACTION_REMOVE_SERVICE, null,
243                 array($bearsamppLang\->getValue(Lang::MENU_REMOVE_SERVICE), TplAestan::GLYPH_SERVICE_REMOVE),
244                 !$isInstalled, get_called_class()
245             );
246 
247             $result \&.= $tplRemoveService[TplApp::SECTION_CALL] \&. PHP_EOL \&. PHP_EOL \&.
248             $tplRemoveService[TplApp::SECTION_CONTENT] \&. PHP_EOL;
249         }
250 
251         $result \&.= $tplChangePort[TplApp::SECTION_CONTENT] \&. PHP_EOL \&.
252             ($tplChangeRootPwd != null ? $tplChangeRootPwd[TplApp::SECTION_CONTENT] \&. PHP_EOL : '');
253 
254         return $result;
255     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fB$bearsamppLang\fP, \fB$result\fP, \fBAction\\CHECK_PORT\fP, \fBTplApp\\getActionMulti()\fP, \fBTplApp\\getActionRun()\fP, \fBTplAestan\\getItemActionServiceRestart()\fP, \fBTplAestan\\getItemActionServiceStart()\fP, \fBTplAestan\\getItemActionServiceStop()\fP, \fBTplAestan\\getItemSeparator()\fP, \fBTplAestan\\GLYPH_LIGHT\fP, \fBTplAestan\\GLYPH_NETWORK\fP, \fBTplAestan\\GLYPH_PASSWORD\fP, \fBTplAestan\\GLYPH_SERVICE_INSTALL\fP, \fBTplAestan\\GLYPH_SERVICE_REMOVE\fP, \fBLang\\MENU_CHANGE_PORT\fP, \fBLang\\MENU_CHANGE_ROOT_PWD\fP, \fBLang\\MENU_CHECK_PORT\fP, \fBLang\\MENU_INSTALL_SERVICE\fP, \fBLang\\MENU_REMOVE_SERVICE\fP, \fBTplApp\\SECTION_CALL\fP, and \fBTplApp\\SECTION_CONTENT\fP\&.
.SS "getMenuMysqlVersions ()\fR [static]\fP"
Generates the MySQL versions menu\&.

.PP
This method creates menu items and actions for switching between different MySQL versions\&.

.PP
@global object $bearsamppBins Provides access to system binaries and their configurations\&.

.PP
\fBReturns\fP
.RS 4
string The generated MySQL versions menu items and actions\&. 
.RE
.PP

.PP
Definition at line \fB128\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
129     {
130         global $bearsamppBins;
131         $items = '';
132         $actions = '';
133 
134         foreach ($bearsamppBins\->getMysql()\->getVersionList() as $version) {
135             $tplSwitchMysqlVersion = TplApp::getActionMulti(
136                 self::ACTION_SWITCH_VERSION, array($version),
137                 array($version, $version == $bearsamppBins\->getMysql()\->getVersion() ? TplAestan::GLYPH_CHECK : ''),
138                 false, get_called_class()
139             );
140 
141             // Item
142             $items \&.= $tplSwitchMysqlVersion[TplApp::SECTION_CALL] \&. PHP_EOL;
143 
144             // Action
145             $actions \&.= PHP_EOL \&. $tplSwitchMysqlVersion[TplApp::SECTION_CONTENT];
146         }
147 
148         return $items \&. $actions;
149     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fBTplApp\\getActionMulti()\fP, \fBTplAestan\\GLYPH_CHECK\fP, \fBTplApp\\SECTION_CALL\fP, and \fBTplApp\\SECTION_CONTENT\fP\&.
.SS "process ()\fR [static]\fP"
Processes and generates the MySQL menu\&.

.PP
This method generates the MySQL menu and determines if MySQL is enabled\&.

.PP
@global object $bearsamppLang Provides language support for retrieving language-specific values\&. @global object $bearsamppBins Provides access to system binaries and their configurations\&.

.PP
\fBReturns\fP
.RS 4
array The generated MySQL menu\&. 
.RE
.PP

.PP
Definition at line \fB42\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.nf
43     {
44         global $bearsamppLang, $bearsamppBins;
45 
46         return TplApp::getMenuEnable($bearsamppLang\->getValue(Lang::MYSQL), self::MENU, get_called_class(), $bearsamppBins\->getMysql()\->isEnable());
47     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fB$bearsamppLang\fP, \fBTplApp\\getMenuEnable()\fP, and \fBLang\\MYSQL\fP\&.
.PP
Referenced by \fBTplApp\\getSectionMenuLeft()\fP\&.
.SH "Field Documentation"
.PP 
.SS "const ACTION_CHANGE_PORT = 'changeMysqlPort'"

.PP
Definition at line \fB27\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SS "const ACTION_CHANGE_ROOT_PWD = 'changeMysqlRootPwd'"

.PP
Definition at line \fB28\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SS "const ACTION_ENABLE = 'enableMysql'"

.PP
Definition at line \fB25\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SS "const ACTION_INSTALL_SERVICE = 'installMysqlService'"

.PP
Definition at line \fB29\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SS "const ACTION_REMOVE_SERVICE = 'removeMysqlService'"

.PP
Definition at line \fB30\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SS "const ACTION_SWITCH_VERSION = 'switchMysqlVersion'"

.PP
Definition at line \fB26\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SS "const MENU = 'mysql'"

.PP
Definition at line \fB20\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SS "const MENU_DEBUG = 'mysqlDebug'"

.PP
Definition at line \fB23\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SS "const MENU_SERVICE = 'mysqlService'"

.PP
Definition at line \fB22\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.
.SS "const MENU_VERSIONS = 'mysqlVersions'"

.PP
Definition at line \fB21\fP of file \fBclass\&.tpl\&.app\&.mysql\&.php\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
