.TH "BinPhp" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BinPhp
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBModule\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($id, $type)"
.br
.ti -1c
.RI "\fBgetApacheModule\fP ($apacheVersion, $phpVersion=null)"
.br
.ti -1c
.RI "\fBgetCliExe\fP ()"
.br
.ti -1c
.RI "\fBgetCliSilentExe\fP ()"
.br
.ti -1c
.RI "\fBgetConf\fP ()"
.br
.ti -1c
.RI "\fBgetErrorLog\fP ()"
.br
.ti -1c
.RI "\fBgetExtensions\fP ()"
.br
.ti -1c
.RI "\fBgetExtensionsFromConf\fP ()"
.br
.ti -1c
.RI "\fBgetExtensionsFromFolder\fP ()"
.br
.ti -1c
.RI "\fBgetExtensionsLoaded\fP ()"
.br
.ti -1c
.RI "\fBgetPearExe\fP ()"
.br
.ti -1c
.RI "\fBgetPearVersion\fP ($cache=false)"
.br
.ti -1c
.RI "\fBgetSettings\fP ()"
.br
.ti -1c
.RI "\fBgetSettingsValues\fP ()"
.br
.ti -1c
.RI "\fBgetTsDll\fP ($phpVersion=null)"
.br
.ti -1c
.RI "\fBisSettingActive\fP ($name)"
.br
.ti -1c
.RI "\fBisSettingExists\fP ($name)"
.br
.ti -1c
.RI "\fBreload\fP ($id=null, $type=null)"
.br
.ti -1c
.RI "\fBsetEnable\fP ($enabled, $showWindow=false)"
.br
.ti -1c
.RI "\fBsetVersion\fP ($version)"
.br
.ti -1c
.RI "\fBswitchVersion\fP ($version, $showWindow=false)"
.br
.in -1c

Public Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__toString\fP ()"
.br
.ti -1c
.RI "\fBgetCurrentPath\fP ()"
.br
.ti -1c
.RI "\fBgetId\fP ()"
.br
.ti -1c
.RI "\fBgetName\fP ()"
.br
.ti -1c
.RI "\fBgetRelease\fP ()"
.br
.ti -1c
.RI "\fBgetRootPath\fP ()"
.br
.ti -1c
.RI "\fBgetSymlinkPath\fP ()"
.br
.ti -1c
.RI "\fBgetType\fP ()"
.br
.ti -1c
.RI "\fBgetVersion\fP ()"
.br
.ti -1c
.RI "\fBgetVersionList\fP ()"
.br
.ti -1c
.RI "\fBisEnable\fP ()"
.br
.ti -1c
.RI "\fBupdate\fP ($sub=0, $showWindow=false)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBINI_ALLOW_CALL_TIME_PASS_REFERENCE\fP = 'allow_call_time_pass_reference'"
.br
.ti -1c
.RI "const \fBINI_ALLOW_URL_FOPEN\fP = 'allow_url_fopen'"
.br
.ti -1c
.RI "const \fBINI_ALLOW_URL_INCLUDE\fP = 'allow_url_include'"
.br
.ti -1c
.RI "const \fBINI_ASP_TAGS\fP = 'asp_tags'"
.br
.ti -1c
.RI "const \fBINI_AUTO_GLOBALS_JIT\fP = 'auto_globals_jit'"
.br
.ti -1c
.RI "const \fBINI_CGI_FIX_PATHINFO\fP = 'cgi\&.fix_pathinfo'"
.br
.ti -1c
.RI "const \fBINI_CGI_FORCE_REDIRECT\fP = 'cgi\&.force_redirect'"
.br
.ti -1c
.RI "const \fBINI_DEFINE_SYSLOG_VARIABLES\fP = 'define_syslog_variables'"
.br
.ti -1c
.RI "const \fBINI_DISPLAY_ERRORS\fP = 'display_errors'"
.br
.ti -1c
.RI "const \fBINI_DISPLAY_STARTUP_ERRORS\fP = 'display_startup_errors'"
.br
.ti -1c
.RI "const \fBINI_ENABLE_DL\fP = 'enable_dl'"
.br
.ti -1c
.RI "const \fBINI_EXPOSE_PHP\fP = 'expose_php'"
.br
.ti -1c
.RI "const \fBINI_FILE_UPLOADS\fP = 'file_uploads'"
.br
.ti -1c
.RI "const \fBINI_HTML_ERRORS\fP = 'html_errors'"
.br
.ti -1c
.RI "const \fBINI_IGNORE_REPEATED_ERRORS\fP = 'ignore_repeated_errors'"
.br
.ti -1c
.RI "const \fBINI_IGNORE_REPEATED_SOURCE\fP = 'ignore_repeated_source'"
.br
.ti -1c
.RI "const \fBINI_IMPLICIT_FLUSH\fP = 'implicit_flush'"
.br
.ti -1c
.RI "const \fBINI_LOG_ERRORS\fP = 'log_errors'"
.br
.ti -1c
.RI "const \fBINI_MAGIC_QUOTES_GPC\fP = 'magic_quotes_gpc'"
.br
.ti -1c
.RI "const \fBINI_MAGIC_QUOTES_RUNTIME\fP = 'magic_quotes_runtime'"
.br
.ti -1c
.RI "const \fBINI_MAGIC_QUOTES_SYBASE\fP = 'magic_quotes_sybase'"
.br
.ti -1c
.RI "const \fBINI_MAIL_ADD_X_HEADER\fP = 'mail\&.add_x_header'"
.br
.ti -1c
.RI "const \fBINI_MSSQL_ALLOW_PERSISTENT\fP = 'mssql\&.allow_persistent'"
.br
.ti -1c
.RI "const \fBINI_MSSQL_COMPATIBILITY_MODE\fP = 'mssql\&.compatability_mode'"
.br
.ti -1c
.RI "const \fBINI_MSSQL_SECURE_CONNECTION\fP = 'mssql\&.secure_connection'"
.br
.ti -1c
.RI "const \fBINI_MYSQL_ALLOW_LOCAL_INFILE\fP = 'mysql\&.allow_local_infile'"
.br
.ti -1c
.RI "const \fBINI_MYSQL_ALLOW_PERSISTENT\fP = 'mysql\&.allow_persistent'"
.br
.ti -1c
.RI "const \fBINI_MYSQL_TRACE_MODE\fP = 'mysql\&.trace_mode'"
.br
.ti -1c
.RI "const \fBINI_MYSQLI_ALLOW_PERSISTENT\fP = 'mysqli\&.allow_persistent'"
.br
.ti -1c
.RI "const \fBINI_MYSQLI_RECONNECT\fP = 'mysqli\&.reconnect'"
.br
.ti -1c
.RI "const \fBINI_MYSQLND_COLLECT_MEMORY_STATISTICS\fP = 'mysqlnd\&.collect_memory_statistics'"
.br
.ti -1c
.RI "const \fBINI_MYSQLND_COLLECT_STATISTICS\fP = 'mysqlnd\&.collect_statistics'"
.br
.ti -1c
.RI "const \fBINI_ODBC_ALLOW_PERSISTENT\fP = 'odbc\&.allow_persistent'"
.br
.ti -1c
.RI "const \fBINI_ODBC_CHECK_PERSISTENT\fP = 'odbc\&.check_persistent'"
.br
.ti -1c
.RI "const \fBINI_OUTPUT_BUFFERING\fP = 'output_buffering'"
.br
.ti -1c
.RI "const \fBINI_PGSQL_ALLOW_PERSISTENT\fP = 'pgsql\&.allow_persistent'"
.br
.ti -1c
.RI "const \fBINI_PGSQL_AUTO_RESET_PERSISTENT\fP = 'pgsql\&.auto_reset_persistent'"
.br
.ti -1c
.RI "const \fBINI_PHAR_READONLY\fP = 'phar\&.readonly'"
.br
.ti -1c
.RI "const \fBINI_PHAR_REQUIRE_HASH\fP = 'phar\&.require_hash'"
.br
.ti -1c
.RI "const \fBINI_REGISTER_ARGC_ARGV\fP = 'register_argc_argv'"
.br
.ti -1c
.RI "const \fBINI_REGISTER_GLOBALS\fP = 'register_globals'"
.br
.ti -1c
.RI "const \fBINI_REGISTER_LONG_ARRAYS\fP = 'register_long_arrays'"
.br
.ti -1c
.RI "const \fBINI_REPORT_MEMLEAKS\fP = 'report_memleaks'"
.br
.ti -1c
.RI "const \fBINI_SAFE_MODE\fP = 'safe_mode'"
.br
.ti -1c
.RI "const \fBINI_SAFE_MODE_GID\fP = 'safe_mode_gid'"
.br
.ti -1c
.RI "const \fBINI_SESSION_AUTO_START\fP = 'session\&.auto_start'"
.br
.ti -1c
.RI "const \fBINI_SESSION_BUG_COMPAT_42\fP = 'session\&.bug_compat_42'"
.br
.ti -1c
.RI "const \fBINI_SESSION_BUG_COMPAT_WARN\fP = 'session\&.bug_compat_warn'"
.br
.ti -1c
.RI "const \fBINI_SESSION_COOKIE_HTTPONLY\fP = 'session\&.cookie_httponly'"
.br
.ti -1c
.RI "const \fBINI_SESSION_USE_COOKIES\fP = 'session\&.use_cookies'"
.br
.ti -1c
.RI "const \fBINI_SESSION_USE_ONLY_COOKIES\fP = 'session\&.use_only_cookies'"
.br
.ti -1c
.RI "const \fBINI_SESSION_USE_TRANS_SID\fP = 'session\&.use_trans_sid'"
.br
.ti -1c
.RI "const \fBINI_SHORT_OPEN_TAG\fP = 'short_open_tag'"
.br
.ti -1c
.RI "const \fBINI_SOAP_WSDL_CACHE_ENABLED\fP = 'soap\&.wsdl_cache_enabled'"
.br
.ti -1c
.RI "const \fBINI_SQL_SAFE_MODE\fP = 'sql\&.safe_mode'"
.br
.ti -1c
.RI "const \fBINI_SYBCT_ALLOW_PERSISTENT\fP = 'sybct\&.allow_persistent'"
.br
.ti -1c
.RI "const \fBINI_TIDY_CLEAN_OUTPUT\fP = 'tidy\&.clean_output'"
.br
.ti -1c
.RI "const \fBINI_TRACK_ERRORS\fP = 'track_errors'"
.br
.ti -1c
.RI "const \fBINI_XDEBUG_PROFILER_ENABLE\fP = 'xdebug\&.profiler_enable'"
.br
.ti -1c
.RI "const \fBINI_XDEBUG_PROFILER_ENABLE_TRIGGER\fP = 'xdebug\&.profiler_enable_trigger'"
.br
.ti -1c
.RI "const \fBINI_XDEBUG_REMOTE_ENABLE\fP = 'xdebug\&.remote_enable'"
.br
.ti -1c
.RI "const \fBINI_Y2K_COMPLIANCE\fP = 'y2k_compliance'"
.br
.ti -1c
.RI "const \fBINI_ZLIB_OUTPUT_COMPRESSION\fP = 'zlib\&.output_compression'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_CLI_EXE\fP = 'phpCliExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_CLI_SILENT_EXE\fP = 'phpCliSilentExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_CONF\fP = 'phpConf'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_PEAR_EXE\fP = 'phpPearExe'"
.br
.ti -1c
.RI "const \fBROOT_CFG_ENABLE\fP = 'phpEnable'"
.br
.ti -1c
.RI "const \fBROOT_CFG_VERSION\fP = 'phpVersion'"
.br
.in -1c

Data Fields inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "const \fBBUNDLE_RELEASE\fP = 'bundleRelease'"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBupdateConfig\fP ($version=null, $sub=0, $showWindow=false)"
.br
.in -1c

Protected Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__construct\fP ()"
.br
.ti -1c
.RI "\fBreplace\fP ($key, $value)"
.br
.ti -1c
.RI "\fBreplaceAll\fP ($params)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBisExtensionExcluded\fP ($ext)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$apacheConf\fP"
.br
.ti -1c
.RI "\fB$cliExe\fP"
.br
.ti -1c
.RI "\fB$cliSilentExe\fP"
.br
.ti -1c
.RI "\fB$conf\fP"
.br
.ti -1c
.RI "\fB$errorLog\fP"
.br
.ti -1c
.RI "\fB$pearExe\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Attributes inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB$bearsamppConf\fP"
.br
.ti -1c
.RI "\fB$bearsamppConfRaw\fP"
.br
.ti -1c
.RI "\fB$currentPath\fP"
.br
.ti -1c
.RI "\fB$enable\fP"
.br
.ti -1c
.RI "\fB$name\fP"
.br
.ti -1c
.RI "\fB$release\fP = 'N/A'"
.br
.ti -1c
.RI "\fB$rootPath\fP"
.br
.ti -1c
.RI "\fB$symlinkPath\fP"
.br
.ti -1c
.RI "\fB$version\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBBinPhp\fP

.PP
This class extends the \fBModule\fP class and provides functionalities specific to managing PHP binaries within the \fBBearsampp\fP application\&. It includes methods for reloading configurations, switching versions, updating configurations, and retrieving various PHP settings and extensions\&. 
.PP
Definition at line \fB17\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $id,  $type)"
Constructor for the \fBBinPhp\fP class\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. 
.br
\fI$type\fP The type of the module\&. 
.RE
.PP

.PP
Definition at line \fB105\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
105                                             {
106         Util::logInitClass($this);
107         $this\->reload($id, $type);
108     }
.PP
.fi

.PP
References \fBModule\\$id\fP, \fBModule\\$type\fP, \fBUtil\\logInitClass()\fP, and \fBreload()\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "getApacheModule ( $apacheVersion,  $phpVersion = \fRnull\fP)"
Retrieves the path to the Apache module for the specified Apache and PHP versions\&.

.PP
\fBParameters\fP
.RS 4
\fI$apacheVersion\fP The version of Apache\&. 
.br
\fI$phpVersion\fP The version of PHP\&. If null, the current PHP version is used\&. 
.RE
.PP
\fBReturns\fP
.RS 4
string|false The path to the Apache module, or false if not found\&. 
.RE
.PP

.PP
Definition at line \fB591\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
591                                                                         {
592         $apacheVersion = substr(str_replace('\&.', '', $apacheVersion), 0, 2);
593         $phpVersion = $phpVersion == null ? $this\->getVersion() : $phpVersion;
594 
595         $currentPath = str_replace('php' \&. $this\->getVersion(), 'php' \&. $phpVersion, $this\->getCurrentPath());
596         $bearsamppConf = str_replace('php' \&. $this\->getVersion(), 'php' \&. $phpVersion, $this\->bearsamppConf);
597 
598         if (in_array($phpVersion, $this\->getVersionList()) && file_exists($bearsamppConf)) {
599             $apacheCpt = parse_ini_file($bearsamppConf);
600             if ($apacheCpt !== false) {
601                 foreach ($apacheCpt as $aVersion => $apacheModule) {
602                     $aVersion = str_replace('apache', '', $aVersion);
603                     $aVersion = str_replace('\&.', '', $aVersion);
604                     if ($apacheVersion == $aVersion && file_exists($currentPath \&. '/' \&. $apacheModule)) {
605                         return $currentPath \&. '/' \&. $apacheModule;
606                     }
607                 }
608             }
609         }
610 
611         return false;
612     }
.PP
.fi

.PP
References \fBModule\\$bearsamppConf\fP, \fBModule\\$currentPath\fP, \fBModule\\getCurrentPath()\fP, \fBModule\\getVersion()\fP, and \fBModule\\getVersionList()\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "getCliExe ()"
Retrieves the path to the PHP CLI executable\&.

.PP
\fBReturns\fP
.RS 4
string The path to the PHP CLI executable\&. 
.RE
.PP

.PP
Definition at line \fB694\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
694                                 {
695         return $this\->cliExe;
696     }
.PP
.fi

.PP
References \fB$cliExe\fP\&.
.SS "getCliSilentExe ()"
Retrieves the path to the PHP CLI silent executable\&.

.PP
\fBReturns\fP
.RS 4
string The path to the PHP CLI silent executable\&. 
.RE
.PP

.PP
Definition at line \fB703\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
703                                       {
704         return $this\->cliSilentExe;
705     }
.PP
.fi

.PP
References \fB$cliSilentExe\fP\&.
.SS "getConf ()"
Retrieves the path to the PHP configuration file\&.

.PP
\fBReturns\fP
.RS 4
string The path to the PHP configuration file\&. 
.RE
.PP

.PP
Definition at line \fB712\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
712                               {
713         return $this\->conf;
714     }
.PP
.fi

.PP
References \fB$conf\fP\&.
.PP
Referenced by \fBgetExtensionsFromConf()\fP, \fBisSettingActive()\fP, \fBisSettingExists()\fP, and \fBupdateConfig()\fP\&.
.SS "getErrorLog ()"
Retrieves the path to the PHP error log file\&.

.PP
\fBReturns\fP
.RS 4
string The path to the PHP error log file\&. 
.RE
.PP

.PP
Definition at line \fB685\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
685                                   {
686         return $this\->errorLog;
687     }
.PP
.fi

.PP
References \fB$errorLog\fP\&.
.SS "getExtensions ()"
Retrieves the list of PHP extensions from both the configuration file and the extensions folder\&.

.PP
\fBReturns\fP
.RS 4
array An associative array where the key is the extension name and the value is the status (on/off)\&. 
.RE
.PP

.PP
Definition at line \fB492\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
492                                     {
493         $fromFolder = $this\->getExtensionsFromConf();
494         $fromConf = $this\->getExtensionsFromFolder();
495         $result = array_merge($fromConf, $fromFolder);
496         ksort($result);
497         return $result;
498     }
.PP
.fi

.PP
References \fB$result\fP, \fBgetExtensionsFromConf()\fP, and \fBgetExtensionsFromFolder()\fP\&.
.SS "getExtensionsFromConf ()"
Retrieves the list of PHP extensions from the configuration file\&.

.PP
\fBReturns\fP
.RS 4
array An associative array where the key is the extension name and the value is the status (on/off)\&. 
.RE
.PP

.PP
Definition at line \fB518\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
518                                             {
519         $result = array();
520 
521         $confContent = file($this\->getConf());
522         foreach ($confContent as $row) {
523             $extMatch = array();
524             if (preg_match('/^(;)?extension\\s*=\\s*"?(\&.+)"?/i', $row, $extMatch)) {
525                 $name = preg_replace("/^php_/", "", preg_replace("/\\\&.dll$/", "", trim($extMatch[2])));
526                 if ($this\->isExtensionExcluded($name)) {
527                     continue;
528                 }
529                 if ($extMatch[1] == ';') {
530                     $result[$name] = ActionSwitchPhpExtension::SWITCH_OFF;
531                 } else {
532                     $result[$name] = ActionSwitchPhpExtension::SWITCH_ON;
533                 }
534             }
535         }
536 
537         ksort($result);
538         return $result;
539     }
.PP
.fi

.PP
References \fBModule\\$name\fP, \fB$result\fP, \fBgetConf()\fP, \fBisExtensionExcluded()\fP, \fBActionSwitchPhpExtension\\SWITCH_OFF\fP, and \fBActionSwitchPhpExtension\\SWITCH_ON\fP\&.
.PP
Referenced by \fBgetExtensions()\fP, and \fBgetExtensionsLoaded()\fP\&.
.SS "getExtensionsFromFolder ()"
Retrieves the list of PHP extensions from the extensions folder\&.

.PP
\fBReturns\fP
.RS 4
array An associative array where the key is the extension name and the value is the status (off)\&. 
.RE
.PP

.PP
Definition at line \fB561\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
561                                               {
562         $result = array();
563 
564         $handle = @opendir($this\->getCurrentPath()\&. '/ext');
565         if (!$handle) {
566             return $result;
567         }
568 
569         while (false !== ($file = readdir($handle))) {
570             if ($file != "\&." && $file != "\&.\&." && Util::endWith($file, '\&.dll')) {
571                 $name = preg_replace("/^php_/", "", preg_replace("/\\\&.dll$/", "", trim($file)));
572                 if ($this\->isExtensionExcluded($name)) {
573                     continue;
574                 }
575                 $result[$name] = ActionSwitchPhpExtension::SWITCH_OFF;
576             }
577         }
578 
579         closedir($handle);
580         ksort($result);
581         return $result;
582     }
.PP
.fi

.PP
References \fBModule\\$name\fP, \fB$result\fP, \fBUtil\\endWith()\fP, \fBModule\\getCurrentPath()\fP, \fBisExtensionExcluded()\fP, and \fBActionSwitchPhpExtension\\SWITCH_OFF\fP\&.
.PP
Referenced by \fBgetExtensions()\fP\&.
.SS "getExtensionsLoaded ()"
Retrieves the list of currently loaded PHP extensions\&.

.PP
\fBReturns\fP
.RS 4
array An array of extension names that are currently loaded\&. 
.RE
.PP

.PP
Definition at line \fB546\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
546                                           {
547         $result = array();
548         foreach ($this\->getExtensionsFromConf() as $name => $status) {
549             if ($status == ActionSwitchPhpExtension::SWITCH_ON) {
550                 $result[] = $name;
551             }
552         }
553         return $result;
554     }
.PP
.fi

.PP
References \fBModule\\$name\fP, \fB$result\fP, \fBgetExtensionsFromConf()\fP, and \fBActionSwitchPhpExtension\\SWITCH_ON\fP\&.
.SS "getPearExe ()"
Retrieves the path to the PHP PEAR executable\&.

.PP
\fBReturns\fP
.RS 4
string The path to the PHP PEAR executable\&. 
.RE
.PP

.PP
Definition at line \fB721\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
721                                  {
722         return $this\->pearExe;
723     }
.PP
.fi

.PP
References \fB$pearExe\fP\&.
.SS "getPearVersion ( $cache = \fRfalse\fP)"
Retrieves the version of PEAR\&.

.PP
\fBParameters\fP
.RS 4
\fI$cache\fP Whether to use the cached version\&. 
.RE
.PP
\fBReturns\fP
.RS 4
string|null The PEAR version, or null if not found\&. 
.RE
.PP

.PP
Definition at line \fB731\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
731                                                    {
732         $cacheFile = $this\->getCurrentPath() \&. '/pear/version';
733         if (!$cache) {
734             file_put_contents($cacheFile, Batch::getPearVersion());
735         }
736         return file_exists($cacheFile) ? file_get_contents($cacheFile) : null;
737     }}
.PP
.fi

.PP
References \fBModule\\getCurrentPath()\fP, and \fBBatch\\getPearVersion()\fP\&.
.SS "getSettings ()"
Retrieves the PHP settings\&.

.PP
\fBReturns\fP
.RS 4
array An associative array of PHP settings\&. 
.RE
.PP

.PP
Definition at line \fB266\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
266                                   {
267         return array(
268             'Language options' => array(
269                 'Short open tag' => self::INI_SHORT_OPEN_TAG,
270                 'ASP\-style tags' => self::INI_ASP_TAGS,
271                 'Year 2000 compliance' => self::INI_Y2K_COMPLIANCE,
272                 'Output buffering' => self::INI_OUTPUT_BUFFERING,
273                 'Zlib output compression' => self::INI_ZLIB_OUTPUT_COMPRESSION,
274                 'Implicit flush' => self::INI_IMPLICIT_FLUSH,
275                 'Allow call time pass reference' => self::INI_ALLOW_CALL_TIME_PASS_REFERENCE,
276                 'Safe mode' => self::INI_SAFE_MODE,
277                 'Safe mode GID' => self::INI_SAFE_MODE_GID,
278             ),
279             'Miscellaneous' => array(
280                 'Expose PHP' => self::INI_EXPOSE_PHP,
281             ),
282             'Error handling and logging' => array(
283                 'Display errors' => self::INI_DISPLAY_ERRORS,
284                 'Display startup errors' => self::INI_DISPLAY_STARTUP_ERRORS,
285                 'Log errors' => self::INI_LOG_ERRORS,
286                 'Ignore repeated errors' => self::INI_IGNORE_REPEATED_ERRORS,
287                 'Ignore repeated source' => self::INI_IGNORE_REPEATED_SOURCE,
288                 'Report memory leaks' => self::INI_REPORT_MEMLEAKS,
289                 'Track errors' => self::INI_TRACK_ERRORS,
290                 'HTML errors' => self::INI_HTML_ERRORS,
291             ),
292             'Data Handling' => array(
293                 'Register globals' => self::INI_REGISTER_GLOBALS,
294                 'Register long arrays' => self::INI_REGISTER_LONG_ARRAYS,
295                 'Register argc argv' => self::INI_REGISTER_ARGC_ARGV,
296                 'Auto globals just in time' => self::INI_AUTO_GLOBALS_JIT,
297                 'Magic quotes gpc' => self::INI_MAGIC_QUOTES_GPC,
298                 'Magic quotes runtime' => self::INI_MAGIC_QUOTES_RUNTIME,
299                 'Magic quotes Sybase' => self::INI_MAGIC_QUOTES_SYBASE,
300             ),
301             'Paths and Directories' => array(
302                 'Enable dynamic loading' => self::INI_ENABLE_DL,
303                 'CGI force redirect' => self::INI_CGI_FORCE_REDIRECT,
304                 'CGI fix path info' => self::INI_CGI_FIX_PATHINFO,
305             ),
306             'File uploads' => array(
307                 'File uploads' => self::INI_FILE_UPLOADS,
308             ),
309             'Fopen wrappers' => array(
310                 'Allow url fopen' => self::INI_ALLOW_URL_FOPEN,
311                 'Allow url include' => self::INI_ALLOW_URL_INCLUDE,
312             ),
313             'Module settings' => array(
314                 'Phar' => array(
315                     'Read only' => self::INI_PHAR_READONLY,
316                     'Require hash' => self::INI_PHAR_REQUIRE_HASH,
317                 ),
318                 'Syslog' => array(
319                     'Define syslog variables' => self::INI_DEFINE_SYSLOG_VARIABLES,
320                 ),
321                 'Mail' => array(
322                     'Add X\-PHP\-Originating\-Script' => self::INI_MAIL_ADD_X_HEADER,
323                 ),
324                 'SQL' => array(
325                     'Safe mode' => self::INI_SQL_SAFE_MODE,
326                 ),
327                 'ODBC' => array(
328                     'Allow persistent' => self::INI_ODBC_ALLOW_PERSISTENT,
329                     'Check persistent' => self::INI_ODBC_CHECK_PERSISTENT,
330                 ),
331                 'MySQL' => array(
332                     'Allow local infile' => self::INI_MYSQL_ALLOW_LOCAL_INFILE,
333                     'Allow persistent' => self::INI_MYSQL_ALLOW_PERSISTENT,
334                     'Trace mode' => self::INI_MYSQL_TRACE_MODE,
335                 ),
336                 'MySQLi' => array(
337                     'Allow persistent' => self::INI_MYSQLI_ALLOW_PERSISTENT,
338                     'Reconnect' => self::INI_MYSQLI_RECONNECT,
339                 ),
340                 'MySQL Native Driver' => array(
341                     'Collect statistics' => self::INI_MYSQLND_COLLECT_STATISTICS,
342                     'Collect memory statistics' => self::INI_MYSQLND_COLLECT_MEMORY_STATISTICS,
343                 ),
344                 'PostgresSQL' => array(
345                     'Allow persistent' => self::INI_PGSQL_ALLOW_PERSISTENT,
346                     'Auto reset persistent' => self::INI_PGSQL_AUTO_RESET_PERSISTENT,
347                 ),
348                 'Sybase\-CT' => array(
349                     'Allow persistent' => self::INI_SYBCT_ALLOW_PERSISTENT,
350                 ),
351                 'Session' => array(
352                     'Use cookies' => self::INI_SESSION_USE_COOKIES,
353                     'Use only cookies' => self::INI_SESSION_USE_ONLY_COOKIES,
354                     'Auto start' => self::INI_SESSION_AUTO_START,
355                     'Cookie HTTP only' => self::INI_SESSION_COOKIE_HTTPONLY,
356                     'Bug compat 42' => self::INI_SESSION_BUG_COMPAT_42,
357                     'Bug compat warning' => self::INI_SESSION_BUG_COMPAT_WARN,
358                     'Use trans sid' => self::INI_SESSION_USE_TRANS_SID,
359                 ),
360                 'MSSQL' => array(
361                     'Allow persistent' => self::INI_MSSQL_ALLOW_PERSISTENT,
362                     'Compatibility mode' => self::INI_MSSQL_COMPATIBILITY_MODE,
363                     'Secure connection' => self::INI_MSSQL_SECURE_CONNECTION,
364                 ),
365                 'Tidy' => array(
366                     'Clean output' => self::INI_TIDY_CLEAN_OUTPUT,
367                 ),
368                 'SOAP' => array(
369                     'WSDL cache enabled' => self::INI_SOAP_WSDL_CACHE_ENABLED,
370                 ),
371                 'XDebug' => array(
372                     'Remote enable' => self::INI_XDEBUG_REMOTE_ENABLE,
373                     'Profiler enable' => self::INI_XDEBUG_PROFILER_ENABLE,
374                     'Profiler enable trigger' => self::INI_XDEBUG_PROFILER_ENABLE_TRIGGER,
375                 ),
376             ),
377         );
378     }
.PP
.fi

.SS "getSettingsValues ()"
Retrieves the default, off, and current values for various PHP settings\&.

.PP
\fBReturns\fP
.RS 4
array An associative array where the key is the setting name and the value is an array containing the default, off, and current values\&. 
.RE
.PP

.PP
Definition at line \fB385\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
385                                         {
386         return array(
387             self::INI_SHORT_OPEN_TAG => array('On', 'Off', 'On'),
388             self::INI_ASP_TAGS => array('On', 'Off', 'Off'),
389             self::INI_Y2K_COMPLIANCE => array('1', '0', '1'),
390             self::INI_OUTPUT_BUFFERING => array('4096', 'Off', '4096'),
391             self::INI_ZLIB_OUTPUT_COMPRESSION => array('On', 'Off', 'Off'),
392             self::INI_IMPLICIT_FLUSH => array('On', 'Off', 'Off'),
393             self::INI_ALLOW_CALL_TIME_PASS_REFERENCE => array('On', 'Off', 'On'),
394             self::INI_SAFE_MODE => array('On', 'Off', 'Off'),
395             self::INI_SAFE_MODE_GID => array('On', 'Off', 'Off'),
396             self::INI_EXPOSE_PHP => array('On', 'Off', 'On'),
397             self::INI_DISPLAY_ERRORS => array('On', 'Off', 'On'),
398             self::INI_DISPLAY_STARTUP_ERRORS => array('On', 'Off', 'On'),
399             self::INI_LOG_ERRORS => array('On', 'Off', 'On'),
400             self::INI_IGNORE_REPEATED_ERRORS => array('On', 'Off', 'Off'),
401             self::INI_IGNORE_REPEATED_SOURCE => array('On', 'Off', 'Off'),
402             self::INI_REPORT_MEMLEAKS => array('On', 'Off', 'On'),
403             self::INI_TRACK_ERRORS => array('On', 'Off', 'On'),
404             self::INI_HTML_ERRORS => array('On', 'Off', 'On'),
405             self::INI_REGISTER_GLOBALS => array('On', 'Off', 'Off'),
406             self::INI_REGISTER_LONG_ARRAYS => array('On', 'Off', 'Off'),
407             self::INI_REGISTER_ARGC_ARGV => array('On', 'Off', 'Off'),
408             self::INI_AUTO_GLOBALS_JIT => array('On', 'Off', 'On'),
409             self::INI_MAGIC_QUOTES_GPC => array('On', 'Off', 'Off'),
410             self::INI_MAGIC_QUOTES_RUNTIME => array('On', 'Off', 'Off'),
411             self::INI_MAGIC_QUOTES_SYBASE => array('On', 'Off', 'Off'),
412             self::INI_ENABLE_DL => array('On', 'Off', 'Off'),
413             self::INI_CGI_FORCE_REDIRECT => array('1', '0', '1'),
414             self::INI_FILE_UPLOADS => array('On', 'Off', 'On'),
415             self::INI_ALLOW_URL_FOPEN => array('On', 'Off', 'On'),
416             self::INI_ALLOW_URL_INCLUDE => array('On', 'Off', 'Off'),
417             self::INI_DEFINE_SYSLOG_VARIABLES => array('On', 'Off', 'Off'),
418             self::INI_MAIL_ADD_X_HEADER => array('On', 'Off', 'On'),
419             self::INI_SQL_SAFE_MODE => array('On', 'Off', 'Off'),
420             self::INI_ODBC_ALLOW_PERSISTENT => array('On', 'Off', 'On'),
421             self::INI_ODBC_CHECK_PERSISTENT => array('On', 'Off', 'On'),
422             self::INI_MYSQL_ALLOW_LOCAL_INFILE => array('On', 'Off', 'Off'),
423             self::INI_MYSQL_ALLOW_PERSISTENT => array('On', 'Off', 'On'),
424             self::INI_MYSQL_TRACE_MODE => array('On', 'Off', 'Off'),
425             self::INI_MYSQLI_ALLOW_PERSISTENT => array('On', 'Off', 'On'),
426             self::INI_MYSQLI_RECONNECT => array('On', 'Off', 'Off'),
427             self::INI_MYSQLND_COLLECT_STATISTICS => array('On', 'Off', 'On'),
428             self::INI_MYSQLND_COLLECT_MEMORY_STATISTICS => array('On', 'Off', 'On'),
429             self::INI_PGSQL_ALLOW_PERSISTENT => array('On', 'Off', 'On'),
430             self::INI_PGSQL_AUTO_RESET_PERSISTENT => array('On', 'Off', 'Off'),
431             self::INI_SYBCT_ALLOW_PERSISTENT => array('On', 'Off', 'On'),
432             self::INI_SESSION_USE_COOKIES => array('1', '0', '1'),
433             self::INI_SESSION_USE_ONLY_COOKIES => array('1', '0', '1'),
434             self::INI_SESSION_AUTO_START => array('1', '0', '0'),
435             self::INI_SESSION_COOKIE_HTTPONLY => array('1', '', ''),
436             self::INI_SESSION_BUG_COMPAT_42 => array('On', 'Off', 'On'),
437             self::INI_SESSION_BUG_COMPAT_WARN => array('On', 'Off', 'On'),
438             self::INI_SESSION_USE_TRANS_SID => array('1', '0', '0'),
439             self::INI_MSSQL_ALLOW_PERSISTENT => array('On', 'Off', 'On'),
440             self::INI_MSSQL_COMPATIBILITY_MODE => array('On', 'Off', 'Off'),
441             self::INI_MSSQL_SECURE_CONNECTION => array('On', 'Off', 'Off'),
442             self::INI_TIDY_CLEAN_OUTPUT => array('On', 'Off', 'Off'),
443             self::INI_SOAP_WSDL_CACHE_ENABLED => array('1', '0', '1'),
444             self::INI_XDEBUG_REMOTE_ENABLE => array('On', 'Off', 'On'),
445             self::INI_XDEBUG_PROFILER_ENABLE => array('On', 'Off', 'Off'),
446             self::INI_XDEBUG_PROFILER_ENABLE_TRIGGER => array('On', 'Off', 'Off'),
447         );
448     }
.PP
.fi

.PP
Referenced by \fBisSettingActive()\fP\&.
.SS "getTsDll ( $phpVersion = \fRnull\fP)"
Retrieves the name of the PHP Thread Safe (TS) DLL for the specified PHP version\&.

.PP
\fBParameters\fP
.RS 4
\fI$phpVersion\fP The version of PHP\&. If null, the current PHP version is used\&. 
.RE
.PP
\fBReturns\fP
.RS 4
string|false The name of the PHP TS DLL, or false if not found\&. 
.RE
.PP

.PP
Definition at line \fB620\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
620                                                  {
621         $phpVersion = $phpVersion == null ? $this\->getVersion() : $phpVersion;
622         $currentPath = str_replace('php' \&. $this\->getVersion(), 'php' \&. $phpVersion, $this\->getCurrentPath());
623 
624         if (file_exists($currentPath \&. '/php7ts\&.dll')) {
625             return 'php7ts\&.dll';
626         } elseif (file_exists($currentPath \&. '/php8ts\&.dll')) {
627             return 'php8ts\&.dll';
628         }
629 
630         return false;
631     }
.PP
.fi

.PP
References \fBModule\\$currentPath\fP, \fBModule\\getCurrentPath()\fP, and \fBModule\\getVersion()\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "isExtensionExcluded ( $ext)\fR [private]\fP"
Checks if a specific PHP extension is excluded from the list\&.

.PP
\fBParameters\fP
.RS 4
\fI$ext\fP The name of the extension to check\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the extension is excluded, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB506\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
506                                                {
507         return in_array($ext, array(
508             'opcache',
509             'xdebug'
510         ));
511     }
.PP
.fi

.PP
Referenced by \fBgetExtensionsFromConf()\fP, and \fBgetExtensionsFromFolder()\fP\&.
.SS "isSettingActive ( $name)"
Checks if a specific PHP setting is active\&.

.PP
\fBParameters\fP
.RS 4
\fI$name\fP The name of the setting to check\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the setting is active, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB456\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
456                                            {
457         $settingsValues = $this\->getSettingsValues();
458 
459         $confContent = file($this\->getConf());
460         foreach ($confContent as $row) {
461             $settingMatch = array();
462             if (preg_match('/^' \&. $name \&. '\\s*=\\s*(\&.+)/i', $row, $settingMatch)) {
463                 return isset($settingMatch[1]) && isset($settingsValues[$name]) && $settingsValues[$name][0] == trim($settingMatch[1]);
464             }
465         }
466 
467         return false;
468     }
.PP
.fi

.PP
References \fBModule\\$name\fP, \fBgetConf()\fP, and \fBgetSettingsValues()\fP\&.
.SS "isSettingExists ( $name)"
Checks if a specific PHP setting exists in the configuration file\&.

.PP
\fBParameters\fP
.RS 4
\fI$name\fP The name of the setting to check\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the setting exists, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB476\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
476                                            {
477         $confContent = file($this\->getConf());
478         foreach ($confContent as $row) {
479             if (preg_match('/^\\s*?;?\\s*?' \&. $name \&. '\\s*=\\s*\&.*/i', $row)) {
480                 return true;
481             }
482         }
483 
484         return false;
485     }
.PP
.fi

.PP
References \fBModule\\$name\fP, and \fBgetConf()\fP\&.
.SS "reload ( $id = \fRnull\fP,  $type = \fRnull\fP)"
Reloads the module configuration based on the provided ID and type\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. If null, the current ID is used\&. 
.br
\fI$type\fP The type of the module\&. If null, the current type is used\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB116\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
116                                                      {
117         global $bearsamppRoot, $bearsamppConfig, $bearsamppBins, $bearsamppLang;
118         Util::logReloadClass($this);
119 
120         $this\->name = $bearsamppLang\->getValue(Lang::PHP);
121         $this\->version = $bearsamppConfig\->getRaw(self::ROOT_CFG_VERSION);
122         parent::reload($id, $type);
123 
124         $this\->enable = $this\->enable && $bearsamppConfig\->getRaw(self::ROOT_CFG_ENABLE);
125         $this\->apacheConf = $bearsamppBins\->getApache()\->getCurrentPath() \&. '/' \&. $this\->apacheConf; //FIXME: Useful ?
126         $this\->errorLog = $bearsamppRoot\->getLogsPath() \&. '/php_error\&.log';
127 
128         if ($this\->bearsamppConfRaw !== false) {
129             $this\->cliExe = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CLI_EXE];
130             $this\->cliSilentExe = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CLI_SILENT_EXE];
131             $this\->conf = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CONF];
132             $this\->pearExe = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_PEAR_EXE];
133         }
134 
135         if (!$this\->enable) {
136             Util::logInfo($this\->name \&. ' is not enabled!');
137             return;
138         }
139         if (!is_dir($this\->currentPath)) {
140             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_FILE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->currentPath));
141             return;
142         }
143         if (!is_dir($this\->symlinkPath)) {
144             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_FILE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->symlinkPath));
145             return;
146         }
147         if (!is_file($this\->bearsamppConf)) {
148             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_CONF_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->bearsamppConf));
149             return;
150         }
151         if (!is_file($this\->cliExe)) {
152             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->cliExe));
153         }
154         if (!is_file($this\->cliSilentExe)) {
155             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->cliSilentExe));
156         }
157         if (!is_file($this\->conf)) {
158             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_CONF_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->conf));
159         }
160         if (!is_file($this\->pearExe)) {
161             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->pearExe));
162         }
163     }
.PP
.fi

.PP
References \fB$apacheConf\fP, \fB$bearsamppBins\fP, \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fB$bearsamppRoot\fP, \fBModule\\$id\fP, \fBModule\\$type\fP, \fBLang\\ERROR_CONF_NOT_FOUND\fP, \fBLang\\ERROR_EXE_NOT_FOUND\fP, \fBLang\\ERROR_FILE_NOT_FOUND\fP, \fBUtil\\logError()\fP, \fBUtil\\logInfo()\fP, \fBUtil\\logReloadClass()\fP, and \fBLang\\PHP\fP\&.
.PP
Referenced by \fB__construct()\fP, \fBsetEnable()\fP, and \fBsetVersion()\fP\&.
.SS "setEnable ( $enabled,  $showWindow = \fRfalse\fP)"
Enables or disables the module and updates the configuration\&.

.PP
\fBParameters\fP
.RS 4
\fI$enabled\fP The enable status (\fBConfig\\ENABLED\fP or \fBConfig\\DISABLED\fP)\&. 
.br
\fI$showWindow\fP Whether to show a window during the process\&. 
.RE
.PP

.PP
Definition at line \fB654\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
654                                                              {
655         global $bearsamppConfig, $bearsamppBins, $bearsamppLang, $bearsamppWinbinder;
656 
657         if ($enabled == Config::ENABLED && !is_dir($this\->currentPath)) {
658             Util::logDebug($this\->getName() \&. ' cannot be enabled because bundle ' \&. $this\->getVersion() \&. ' does not exist in ' \&. $this\->currentPath);
659             if ($showWindow) {
660                 $bearsamppWinbinder\->messageBoxError(
661                     sprintf($bearsamppLang\->getValue(Lang::ENABLE_BUNDLE_NOT_EXIST), $this\->getName(), $this\->getVersion(), $this\->currentPath),
662                     sprintf($bearsamppLang\->getValue(Lang::ENABLE_TITLE), $this\->getName())
663                 );
664             }
665             $enabled = Config::DISABLED;
666         }
667 
668         Util::logInfo($this\->getName() \&. ' switched to ' \&. ($enabled == Config::ENABLED ? 'enabled' : 'disabled'));
669         $this\->enable = $enabled == Config::ENABLED;
670         $bearsamppConfig\->replace(self::ROOT_CFG_ENABLE, $enabled);
671 
672         $this\->reload();
673         $bearsamppBins\->getApache()\->update();
674         if ($bearsamppBins\->getApache()\->isEnable() && $bearsamppBins\->getApache()\->getService()\->isRunning()) {
675             $bearsamppBins\->getApache()\->getService()\->stop();
676             Util::startService($bearsamppBins\->getApache(), BinApache::CMD_SYNTAX_CHECK, $showWindow);
677         }
678     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fBBinApache\\CMD_SYNTAX_CHECK\fP, \fBConfig\\DISABLED\fP, \fBLang\\ENABLE_BUNDLE_NOT_EXIST\fP, \fBLang\\ENABLE_TITLE\fP, \fBConfig\\ENABLED\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logInfo()\fP, \fBreload()\fP, and \fBUtil\\startService()\fP\&.
.SS "setVersion ( $version)"
Sets the PHP version and updates the configuration\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to set\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB638\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
638                                          {
639         global $bearsamppConfig;
640         $this\->version = $version;
641         Util::logTrace('Setting php version in \&.conf to: ' \&. $this\->version);
642         $bearsamppConfig\->replace(self::ROOT_CFG_VERSION, $version);
643         Util::logTrace('Reloading php version\&.\&.\&.');
644         $this\->reload();
645         Util::logTrace('Reloading of php version complete');
646     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fBModule\\$version\fP, \fBUtil\\logTrace()\fP, and \fBreload()\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "switchVersion ( $version,  $showWindow = \fRfalse\fP)"
Switches the PHP version to the specified version\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to switch to\&. 
.br
\fI$showWindow\fP Whether to show a window during the switch process\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the switch was successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB172\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
172                                                                  {
173         Util::logDebug('Switch ' \&. $this\->name \&. ' version to ' \&. $version);
174         return $this\->updateConfig($version, 0, $showWindow);
175     }
.PP
.fi

.PP
References \fBModule\\$version\fP, \fBUtil\\logDebug()\fP, and \fBupdateConfig()\fP\&.
.SS "updateConfig ( $version = \fRnull\fP,  $sub = \fR0\fP,  $showWindow = \fRfalse\fP)\fR [protected]\fP"
Updates the PHP configuration to the specified version\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to update to\&. If null, the current version is used\&. 
.br
\fI$sub\fP The sub-level for logging indentation\&. 
.br
\fI$showWindow\fP Whether to show a window during the update process\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the update was successful, false otherwise\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB185\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.nf
185                                                                                     {
186         global $bearsamppLang, $bearsamppBins, $bearsamppApps, $bearsamppWinbinder;
187 
188         if (!$this\->enable) {
189             return true;
190         }
191 
192         $version = $version == null ? $this\->version : $version;
193         Util::logDebug(($sub > 0 ? str_repeat(' ', 2 * $sub) : '') \&. 'Update ' \&. $this\->name \&. ' ' \&. $version \&. ' config');
194 
195         $boxTitle = sprintf($bearsamppLang\->getValue(Lang::SWITCH_VERSION_TITLE), $this\->getName(), $version);
196 
197         $conf = str_replace('php' \&. $this\->getVersion(), 'php' \&. $version, $this\->getConf());
198         Util::logTrace('Current php version found: ' \&. $conf);
199         $bearsamppConf = str_replace('php' \&. $this\->getVersion(), 'php' \&. $version, $this\->bearsamppConf);
200         Util::logTrace('Current bearsampp\&.conf php version found: ' \&. $bearsamppConf);
201 
202         $tsDll = $this\->getTsDll($version);
203         $apachePhpModulePath = $this\->getApacheModule($bearsamppBins\->getApache()\->getVersion(), $version);
204 
205         Util::logDebug(($sub > 0 ? str_repeat(' ', 2 * $sub) : '') \&. 'PHP TsDll found: ' \&. $tsDll);
206         Util::logDebug(($sub > 0 ? str_repeat(' ', 2 * $sub) : '') \&. 'PHP Apache module found: ' \&. $apachePhpModulePath);
207 
208         if (!file_exists($conf) || !file_exists($bearsamppConf)) {
209             Util::logError('bearsampp config files not found for ' \&. $this\->getName() \&. ' ' \&. $version);
210             if ($showWindow) {
211                 $bearsamppWinbinder\->messageBoxError(
212                     sprintf($bearsamppLang\->getValue(Lang::BEARSAMPP_CONF_NOT_FOUND_ERROR), $this\->getName() \&. ' ' \&. $version),
213                     $boxTitle
214                 );
215             }
216             return false;
217         }
218 
219         $bearsamppConfRaw = parse_ini_file($bearsamppConf);
220         if ($bearsamppConfRaw === false || !isset($bearsamppConfRaw[self::ROOT_CFG_VERSION]) || $bearsamppConfRaw[self::ROOT_CFG_VERSION] != $version) {
221             Util::logError('bearsampp config file malformed for ' \&. $this\->getName() \&. ' ' \&. $version);
222             if ($showWindow) {
223                 $bearsamppWinbinder\->messageBoxError(
224                     sprintf($bearsamppLang\->getValue(Lang::BEARSAMPP_CONF_MALFORMED_ERROR), $this\->getName() \&. ' ' \&. $version),
225                     $boxTitle
226                 );
227             }
228             return false;
229         }
230 
231         if ($tsDll === false || $apachePhpModulePath === false) {
232             Util::logDebug($this\->getName() \&. ' ' \&. $version \&. ' does not seem to be compatible with Apache ' \&. $bearsamppBins\->getApache()\->getVersion());
233             if ($showWindow) {
234                 $bearsamppWinbinder\->messageBoxError(
235                     sprintf($bearsamppLang\->getValue(Lang::PHP_INCPT), $version, $bearsamppBins\->getApache()\->getVersion()),
236                     $boxTitle
237                 );
238             }
239             return false;
240         }
241 
242         // bearsampp\&.conf
243         Util::logTrace('Calling Set Version for php\&.\&.\&.');
244         $this\->setVersion($version);
245 
246         // conf
247         Util::replaceInFile($this\->getConf(), array(
248             '/^mysql\&.default_port\\s=\\s(\\d+)/' => 'mysql\&.default_port = ' \&. $bearsamppBins\->getMysql()\->getPort(),
249             '/^mysqli\&.default_port\\s=\\s(\\d+)/' => 'mysqli\&.default_port = ' \&. $bearsamppBins\->getMysql()\->getPort()
250         ));
251 
252         // apache
253         $bearsamppBins\->getApache()\->update($sub + 1);
254 
255         // phpmyadmin
256         $bearsamppApps\->getPhpmyadmin()\->update($sub + 1);
257 
258         return true;
259     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fBModule\\$bearsamppConf\fP, \fBModule\\$bearsamppConfRaw\fP, \fB$bearsamppLang\fP, \fB$conf\fP, \fBModule\\$version\fP, \fBLang\\BEARSAMPP_CONF_MALFORMED_ERROR\fP, \fBLang\\BEARSAMPP_CONF_NOT_FOUND_ERROR\fP, \fBgetApacheModule()\fP, \fBgetConf()\fP, \fBModule\\getName()\fP, \fBgetTsDll()\fP, \fBModule\\getVersion()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBUtil\\logTrace()\fP, \fBLang\\PHP_INCPT\fP, \fBUtil\\replaceInFile()\fP, \fBsetVersion()\fP, and \fBLang\\SWITCH_VERSION_TITLE\fP\&.
.PP
Referenced by \fBswitchVersion()\fP\&.
.SH "Field Documentation"
.PP 
.SS "$apacheConf\fR [private]\fP"

.PP
Definition at line \fB91\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.PP
Referenced by \fBreload()\fP\&.
.SS "$cliExe\fR [private]\fP"

.PP
Definition at line \fB94\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.PP
Referenced by \fBgetCliExe()\fP\&.
.SS "$cliSilentExe\fR [private]\fP"

.PP
Definition at line \fB95\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.PP
Referenced by \fBgetCliSilentExe()\fP\&.
.SS "$conf\fR [private]\fP"

.PP
Definition at line \fB96\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.PP
Referenced by \fBgetConf()\fP, and \fBupdateConfig()\fP\&.
.SS "$errorLog\fR [private]\fP"

.PP
Definition at line \fB92\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.PP
Referenced by \fBgetErrorLog()\fP\&.
.SS "$pearExe\fR [private]\fP"

.PP
Definition at line \fB97\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.PP
Referenced by \fBgetPearExe()\fP\&.
.SS "const INI_ALLOW_CALL_TIME_PASS_REFERENCE = 'allow_call_time_pass_reference'"

.PP
Definition at line \fB33\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_ALLOW_URL_FOPEN = 'allow_url_fopen'"

.PP
Definition at line \fB56\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_ALLOW_URL_INCLUDE = 'allow_url_include'"

.PP
Definition at line \fB57\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_ASP_TAGS = 'asp_tags'"

.PP
Definition at line \fB28\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_AUTO_GLOBALS_JIT = 'auto_globals_jit'"

.PP
Definition at line \fB48\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_CGI_FIX_PATHINFO = 'cgi\&.fix_pathinfo'"

.PP
Definition at line \fB54\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_CGI_FORCE_REDIRECT = 'cgi\&.force_redirect'"

.PP
Definition at line \fB53\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_DEFINE_SYSLOG_VARIABLES = 'define_syslog_variables'"

.PP
Definition at line \fB60\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_DISPLAY_ERRORS = 'display_errors'"

.PP
Definition at line \fB37\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_DISPLAY_STARTUP_ERRORS = 'display_startup_errors'"

.PP
Definition at line \fB38\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_ENABLE_DL = 'enable_dl'"

.PP
Definition at line \fB52\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_EXPOSE_PHP = 'expose_php'"

.PP
Definition at line \fB36\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_FILE_UPLOADS = 'file_uploads'"

.PP
Definition at line \fB55\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_HTML_ERRORS = 'html_errors'"

.PP
Definition at line \fB44\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_IGNORE_REPEATED_ERRORS = 'ignore_repeated_errors'"

.PP
Definition at line \fB40\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_IGNORE_REPEATED_SOURCE = 'ignore_repeated_source'"

.PP
Definition at line \fB41\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_IMPLICIT_FLUSH = 'implicit_flush'"

.PP
Definition at line \fB32\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_LOG_ERRORS = 'log_errors'"

.PP
Definition at line \fB39\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MAGIC_QUOTES_GPC = 'magic_quotes_gpc'"

.PP
Definition at line \fB49\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MAGIC_QUOTES_RUNTIME = 'magic_quotes_runtime'"

.PP
Definition at line \fB50\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MAGIC_QUOTES_SYBASE = 'magic_quotes_sybase'"

.PP
Definition at line \fB51\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MAIL_ADD_X_HEADER = 'mail\&.add_x_header'"

.PP
Definition at line \fB61\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MSSQL_ALLOW_PERSISTENT = 'mssql\&.allow_persistent'"

.PP
Definition at line \fB82\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MSSQL_COMPATIBILITY_MODE = 'mssql\&.compatability_mode'"

.PP
Definition at line \fB83\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MSSQL_SECURE_CONNECTION = 'mssql\&.secure_connection'"

.PP
Definition at line \fB84\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MYSQL_ALLOW_LOCAL_INFILE = 'mysql\&.allow_local_infile'"

.PP
Definition at line \fB65\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MYSQL_ALLOW_PERSISTENT = 'mysql\&.allow_persistent'"

.PP
Definition at line \fB66\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MYSQL_TRACE_MODE = 'mysql\&.trace_mode'"

.PP
Definition at line \fB67\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MYSQLI_ALLOW_PERSISTENT = 'mysqli\&.allow_persistent'"

.PP
Definition at line \fB68\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MYSQLI_RECONNECT = 'mysqli\&.reconnect'"

.PP
Definition at line \fB69\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MYSQLND_COLLECT_MEMORY_STATISTICS = 'mysqlnd\&.collect_memory_statistics'"

.PP
Definition at line \fB71\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_MYSQLND_COLLECT_STATISTICS = 'mysqlnd\&.collect_statistics'"

.PP
Definition at line \fB70\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_ODBC_ALLOW_PERSISTENT = 'odbc\&.allow_persistent'"

.PP
Definition at line \fB63\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_ODBC_CHECK_PERSISTENT = 'odbc\&.check_persistent'"

.PP
Definition at line \fB64\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_OUTPUT_BUFFERING = 'output_buffering'"

.PP
Definition at line \fB30\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_PGSQL_ALLOW_PERSISTENT = 'pgsql\&.allow_persistent'"

.PP
Definition at line \fB72\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_PGSQL_AUTO_RESET_PERSISTENT = 'pgsql\&.auto_reset_persistent'"

.PP
Definition at line \fB73\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_PHAR_READONLY = 'phar\&.readonly'"

.PP
Definition at line \fB58\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_PHAR_REQUIRE_HASH = 'phar\&.require_hash'"

.PP
Definition at line \fB59\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_REGISTER_ARGC_ARGV = 'register_argc_argv'"

.PP
Definition at line \fB47\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_REGISTER_GLOBALS = 'register_globals'"

.PP
Definition at line \fB45\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_REGISTER_LONG_ARRAYS = 'register_long_arrays'"

.PP
Definition at line \fB46\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_REPORT_MEMLEAKS = 'report_memleaks'"

.PP
Definition at line \fB42\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SAFE_MODE = 'safe_mode'"

.PP
Definition at line \fB34\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SAFE_MODE_GID = 'safe_mode_gid'"

.PP
Definition at line \fB35\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SESSION_AUTO_START = 'session\&.auto_start'"

.PP
Definition at line \fB77\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SESSION_BUG_COMPAT_42 = 'session\&.bug_compat_42'"

.PP
Definition at line \fB79\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SESSION_BUG_COMPAT_WARN = 'session\&.bug_compat_warn'"

.PP
Definition at line \fB80\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SESSION_COOKIE_HTTPONLY = 'session\&.cookie_httponly'"

.PP
Definition at line \fB78\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SESSION_USE_COOKIES = 'session\&.use_cookies'"

.PP
Definition at line \fB75\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SESSION_USE_ONLY_COOKIES = 'session\&.use_only_cookies'"

.PP
Definition at line \fB76\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SESSION_USE_TRANS_SID = 'session\&.use_trans_sid'"

.PP
Definition at line \fB81\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SHORT_OPEN_TAG = 'short_open_tag'"

.PP
Definition at line \fB27\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SOAP_WSDL_CACHE_ENABLED = 'soap\&.wsdl_cache_enabled'"

.PP
Definition at line \fB86\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SQL_SAFE_MODE = 'sql\&.safe_mode'"

.PP
Definition at line \fB62\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_SYBCT_ALLOW_PERSISTENT = 'sybct\&.allow_persistent'"

.PP
Definition at line \fB74\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_TIDY_CLEAN_OUTPUT = 'tidy\&.clean_output'"

.PP
Definition at line \fB85\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_TRACK_ERRORS = 'track_errors'"

.PP
Definition at line \fB43\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_XDEBUG_PROFILER_ENABLE = 'xdebug\&.profiler_enable'"

.PP
Definition at line \fB88\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_XDEBUG_PROFILER_ENABLE_TRIGGER = 'xdebug\&.profiler_enable_trigger'"

.PP
Definition at line \fB89\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_XDEBUG_REMOTE_ENABLE = 'xdebug\&.remote_enable'"

.PP
Definition at line \fB87\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_Y2K_COMPLIANCE = 'y2k_compliance'"

.PP
Definition at line \fB29\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const INI_ZLIB_OUTPUT_COMPRESSION = 'zlib\&.output_compression'"

.PP
Definition at line \fB31\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const LOCAL_CFG_CLI_EXE = 'phpCliExe'"

.PP
Definition at line \fB22\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const LOCAL_CFG_CLI_SILENT_EXE = 'phpCliSilentExe'"

.PP
Definition at line \fB23\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const LOCAL_CFG_CONF = 'phpConf'"

.PP
Definition at line \fB24\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const LOCAL_CFG_PEAR_EXE = 'phpPearExe'"

.PP
Definition at line \fB25\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const ROOT_CFG_ENABLE = 'phpEnable'"

.PP
Definition at line \fB19\fP of file \fBclass\&.bin\&.php\&.php\fP\&.
.SS "const ROOT_CFG_VERSION = 'phpVersion'"

.PP
Definition at line \fB20\fP of file \fBclass\&.bin\&.php\&.php\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
