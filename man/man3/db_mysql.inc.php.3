.TH "E:/Bearsampp-development/sandbox/core/libs/winbinder/db/db_mysql.inc.php" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
E:/Bearsampp-development/sandbox/core/libs/winbinder/db/db_mysql.inc.php
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBraw_db_close_database\fP ()"
.br
.ti -1c
.RI "\fBraw_db_create_database\fP ($database, $server='', $username='', $password='')"
.br
.ti -1c
.RI "\fBraw_db_create_field\fP ($tablename, $field, $type)"
.br
.ti -1c
.RI "\fBraw_db_delete_field\fP ($tablename, $field)"
.br
.ti -1c
.RI "\fBraw_db_edit_field\fP ($tablename, $field, $type)"
.br
.ti -1c
.RI "\fBraw_db_escape_string\fP ($str)"
.br
.ti -1c
.RI "\fBraw_db_fetch_array\fP ($result, $type=\fBFETCH_BOTH\fP)"
.br
.ti -1c
.RI "\fBraw_db_free_result\fP ($result)"
.br
.ti -1c
.RI "\fBraw_db_list_database_tables\fP ()"
.br
.ti -1c
.RI "\fBraw_db_list_table_fields_def\fP ($tablename, $type=false)"
.br
.ti -1c
.RI "\fBif\fP(\fBDB_WRAPVERSION\fP !=\fBDB_MYSQL_WRAP\fP) \fBraw_db_open_database\fP ($database, $server='', $username='', $password='')"
.br
.ti -1c
.RI "\fBraw_db_query\fP ($query)"
.br
.ti -1c
.RI "\fBraw_db_rename_field\fP ($tablename, $field, $newname, $type)"
.br
.ti -1c
.RI "\fBraw_db_rename_table\fP ($tablename, $newname)"
.br
.ti -1c
.RI "\fBraw_db_table_exists\fP ($tablename)"
.br
.ti -1c
.RI "\fBraw_get_db_version\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBDB_MYSQL_WRAP\fP (PHP_VERSION >='5') \fBif\fP(!extension_loaded('mysql')) \fBif\fP(! @dl('php_mysql\&.dll')) 'db_v2b'"
.br
.ti -1c
.RI "const \fBFETCH_ASSOC\fP MYSQL_ASSOC"
.br
.ti -1c
.RI "const \fBFETCH_BOTH\fP MYSQL_BOTH"
.br
.ti -1c
.RI "const \fBFETCH_NUM\fP MYSQL_NUM"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "raw_db_close_database ()"
\fBraw_db_close_database()\fP

.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB127\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
128 {
129   return mysql_close();
130 }
.PP
.fi

.PP
Referenced by \fBdb_close_database()\fP\&.
.SS "raw_db_create_database ( $database,  $server = \fR''\fP,  $username = \fR''\fP,  $password = \fR''\fP)"
\fBraw_db_create_database()\fP Creates a database if it does not exist\&.

.PP
\fBParameters\fP
.RS 4
\fI$database\fP 
.br
\fI$server\fP 
.br
\fI$username\fP 
.br
\fI$password\fP 
.RE
.PP
\fBReturns\fP
.RS 4
resource or FALSE 
.RE
.PP

.PP
Definition at line \fB80\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
81 {
82   global $curr_db;
83 
84   $conn = mysql_connect($server, $username, $password);
85   if (!$conn) {
86     trigger_error(__FUNCTION__ \&. ": " \&. mysql_error());
87     return false;
88   } else {
89     if (!mysql_query("CREATE DATABASE IF NOT EXISTS " \&. $database))
90       die(mysql_error());
91     $curr_db = $database;
92     if (!mysql_select_db($database)) {
93       trigger_error(__FUNCTION__ \&. ": " \&. mysql_error());
94       return false;
95     }
96   }
97   return $conn;
98 }
.PP
.fi

.PP
Referenced by \fBdb_create_database()\fP\&.
.SS "raw_db_create_field ( $tablename,  $field,  $type)"
\fBraw_db_create_field()\fP

.PP
\fBParameters\fP
.RS 4
\fI$tablename\fP 
.br
\fI$field\fP 
.br
\fI$type\fP 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB201\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
202 {
203   global $g_lasttable;
204 
205   if (!$tablename)
206     $tablename = $g_lasttable;
207   $g_lasttable = $tablename;
208 
209   $res = mysql_query("ALTER TABLE $tablename ADD $field $type");
210   return $res;
211 }
.PP
.fi

.PP
Referenced by \fBdb_create_field()\fP\&.
.SS "raw_db_delete_field ( $tablename,  $field)"
\fBraw_db_delete_field()\fP

.PP
\fBParameters\fP
.RS 4
\fI$tablename\fP 
.br
\fI$field\fP 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB220\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
221 {
222   global $g_lasttable;
223 
224   if (!$tablename)
225     $tablename = $g_lasttable;
226   $g_lasttable = $tablename;
227 
228   $res = mysql_query("ALTER TABLE $tablename DROP $field");
229   return $res;
230 }
.PP
.fi

.PP
Referenced by \fBdb_delete_field()\fP\&.
.SS "raw_db_edit_field ( $tablename,  $field,  $type)"
\fBraw_db_edit_field()\fP

.PP
\fBParameters\fP
.RS 4
\fI$tablename\fP 
.br
\fI$field\fP 
.br
\fI$type\fP 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB261\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
262 {
263   global $g_lasttable;
264 
265   if (!$tablename)
266     $tablename = $g_lasttable;
267   $g_lasttable = $tablename;
268 
269   $res = mysql_query("ALTER TABLE $tablename MODIFY $field $type");
270   return $res;
271 }
.PP
.fi

.PP
Referenced by \fBdb_edit_field()\fP\&.
.SS "raw_db_escape_string ( $str)"
\fBraw_db_escape_string()\fP

.PP
\fBParameters\fP
.RS 4
\fI$str\fP 
.RE
.PP
\fBReturns\fP
.RS 4
escaped string 
.RE
.PP

.PP
Definition at line \fB318\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
319 {
320   return mysql_real_escape_string($str);
321 }
.PP
.fi

.PP
Referenced by \fBdb_escape_string()\fP\&.
.SS "raw_db_fetch_array ( $result,  $type = \fR\fBFETCH_BOTH\fP\fP)"
\fBraw_db_fetch_array()\fP get the value of SQL-query, row by row

.PP
\fBParameters\fP
.RS 4
\fI$result\fP 
.br
\fI$type\fP 
.RE
.PP
\fBReturns\fP
.RS 4
array of row, FALSE if no more rows 
.RE
.PP

.PP
Definition at line \fB296\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
297 {
298   return mysql_fetch_array($result, $type);
299 }
.PP
.fi

.PP
References \fB$result\fP, and \fBFETCH_BOTH\fP\&.
.PP
Referenced by \fBdb_fetch_array()\fP\&.
.SS "raw_db_free_result ( $result)"
\fBraw_db_free_result()\fP

.PP
\fBParameters\fP
.RS 4
\fI$result\fP 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB307\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
308 {
309   mysql_free_result($result);
310 }
.PP
.fi

.PP
References \fB$result\fP\&.
.PP
Referenced by \fBdb_free_result()\fP\&.
.SS "raw_db_list_database_tables ()"
\fBraw_db_list_database_tables()\fP Returns an array with the list of tables of the current database\&.

.PP
\fBReturns\fP
.RS 4
array or FALSE 
.RE
.PP

.PP
Definition at line \fB106\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
107 {
108   global $curr_db;
109 
110   $hresult = mysql_query("SHOW TABLES FROM $curr_db");
111   if (!$hresult) {
112     // no Tables in $database
113     return false;
114   } else {
115     while ($row = mysql_fetch_array($hresult, MYSQL_NUM)) {
116       $tables[] = $row[0];
117     } // while
118     return $tables;
119   }
120 }
.PP
.fi

.PP
Referenced by \fBdb_list_database_tables()\fP\&.
.SS "raw_db_list_table_fields_def ( $tablename,  $type = \fRfalse\fP)"
\fBraw_db_list_table_fields_def()\fP lists fieldnames or fieldattributes according type

.PP
\fBParameters\fP
.RS 4
\fI$tablename\fP 
.br
\fI$type\fP 
.RE
.PP
\fBReturns\fP
.RS 4
array or FALSE 
.RE
.PP

.PP
Definition at line \fB177\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
178 {
179   $result = mysql_query("SHOW COLUMNS FROM $tablename");
180   if ($result === false) return false;
181   $coltype = array();
182   $colnames = array();
183   if (mysql_num_rows($result) > 0) {
184     while ($row = mysql_fetch_assoc($result)) {
185       $colnames[] = $row['Field'];
186       $coltype[] = $row['Type'];
187     } // while
188   }
189   if (mysql_free_result($result) == false) return false;
190   return ($type ? $coltype : $colnames);
191 }
.PP
.fi

.PP
References \fB$result\fP\&.
.PP
Referenced by \fBdb_list_table_fields()\fP\&.
.SS "\fBif\fP(\fBDB_WRAPVERSION\fP !=\fBDB_MYSQL_WRAP\fP) raw_db_open_database ( $database,  $server = \fR''\fP,  $username = \fR''\fP,  $password = \fR''\fP)"
\fBraw_db_open_database()\fP Opens and connects an existing database\&.

.PP
\fBParameters\fP
.RS 4
\fI$database\fP 
.br
\fI$server\fP 
.br
\fI$username\fP 
.br
\fI$password\fP 
.RE
.PP
\fBReturns\fP
.RS 4
resource or FALSE 
.RE
.PP

.PP
Definition at line \fB52\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
53 {
54   global $curr_db;
55 
56   $conn = mysql_connect($server, $username, $password);
57   if (!$conn) {
58     trigger_error(__FUNCTION__ \&. ": " \&. mysql_error());
59     return false;
60   } else {
61     $curr_db = $database;
62     if (!mysql_select_db($database)) {
63       trigger_error(__FUNCTION__ \&. ": " \&. mysql_error());
64       return false;
65     }
66   }
67   return $conn;
68 }
.PP
.fi

.PP
Referenced by \fBdb_open_database()\fP\&.
.SS "raw_db_query ( $query)"
\fBraw_db_query()\fP queries the database with SQL

.PP
\fBParameters\fP
.RS 4
\fI$query\fP 
.RE
.PP
\fBReturns\fP
.RS 4
resource on success for SELECT,SHOW,DESCRIBE ans EXPLAIN TRUE on success for UPDATE, DELETE, DROP etc FALSE on errors 
.RE
.PP

.PP
Definition at line \fB282\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
283 {
284   $res = mysql_query($query);
285   return $res;
286 }
.PP
.fi

.PP
Referenced by \fBdb_create_record()\fP, \fBdb_create_table()\fP, \fBdb_delete_records()\fP, \fBdb_delete_table()\fP, \fBdb_edit_record()\fP, \fBdb_get_data()\fP, \fBdb_get_id()\fP, \fBdb_get_next_free_id()\fP, \fBdb_query()\fP, and \fBdb_swap_records()\fP\&.
.SS "raw_db_rename_field ( $tablename,  $field,  $newname,  $type)"
\fBraw_db_rename_field()\fP

.PP
\fBParameters\fP
.RS 4
\fI$tablename\fP 
.br
\fI$field\fP 
.br
\fI$newname\fP 
.br
\fI$type\fP 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB241\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
242 {
243   global $g_lasttable;
244 
245   if (!$tablename)
246     $tablename = $g_lasttable;
247   $g_lasttable = $tablename;
248 
249   $res = mysql_query("ALTER TABLE $tablename CHANGE $field $newname $type");
250   return $res;
251 }
.PP
.fi

.PP
Referenced by \fBdb_rename_field()\fP\&.
.SS "raw_db_rename_table ( $tablename,  $newname)"
\fBraw_db_rename_table()\fP

.PP
\fBParameters\fP
.RS 4
\fI$tablename\fP 
.br
\fI$newname\fP 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB157\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
158 {
159   global $g_lasttable;
160 
161   if (!$tablename)
162     $tablename = $g_lasttable;
163 
164   $g_lasttable = $newname;
165   $res = mysql_query("RENAME TABLE $tablename TO $newname");
166   return $res;
167 }
.PP
.fi

.PP
Referenced by \fBdb_rename_table()\fP\&.
.SS "raw_db_table_exists ( $tablename)"
\fBraw_db_table_exists()\fP

.PP
\fBParameters\fP
.RS 4
\fI$tablename\fP 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB138\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
139 {
140   global $g_current_db;
141 
142   $sql = "SELECT 1 FROM $tablename LIMIT 0";
143   $res = mysql_query($sql);
144   if ($res) {
145     return true;
146   } ;
147   return false;
148 }
.PP
.fi

.PP
Referenced by \fBdb_table_exists()\fP\&.
.SS "raw_get_db_version ()"
\fBraw_get_db_version()\fP Returns the version of the database library\&.

.PP
\fBReturns\fP
.RS 4
string 
.RE
.PP

.PP
Definition at line \fB33\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.nf
34 {
35     return mysql_get_server_info();
36 }
37 
38 if (DB_WRAPVERSION != DB_MYSQL_WRAP) {
39   die(" db_common\&.inc\&.php has different version number than db_mysql\&.inc\&.php ");
40 }
.PP
.fi

.PP
Referenced by \fBdb_get_info()\fP\&.
.SH "Variable Documentation"
.PP 
.SS "const DB_MYSQL_WRAP(PHP_VERSION >='5') \fBif\fP(!extension_loaded( 'mysql')) \fBif\fP(! @dl( 'php_mysql\&.dll')) (PHP_VERSION >='5' ) 'db_v2b'"
WINBINDER - The native Windows binding for PHP for PHP

.PP
Copyright Hypervisual - see LICENSE\&.TXT for details Authors: Rubem Pechansky and Hans Rebel

.PP
Database wrapper functions for \fBWinBinder\fP (MySQL-specific) version 2b 
.PP
Definition at line \fB21\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.SS "const FETCH_ASSOC MYSQL_ASSOC"

.PP
Definition at line \fB24\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.PP
Referenced by \fBdb_swap_records()\fP\&.
.SS "const FETCH_BOTH MYSQL_BOTH"

.PP
Definition at line \fB22\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.PP
Referenced by \fBraw_db_fetch_array()\fP\&.
.SS "const FETCH_NUM MYSQL_NUM"

.PP
Definition at line \fB23\fP of file \fBdb_mysql\&.inc\&.php\fP\&.
.PP
Referenced by \fBdb_create_record()\fP, \fBdb_fetch_array()\fP, \fBdb_get_data()\fP, \fBdb_get_id()\fP, and \fBdb_get_next_free_id()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
