.TH "BinMailpit" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BinMailpit
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBModule\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($id, $type)"
.br
.ti -1c
.RI "\fBchangePort\fP ($port, $checkUsed=false, $wbProgressBar=null)"
.br
.ti -1c
.RI "\fBcheckPort\fP ($port, $showWindow=false)"
.br
.ti -1c
.RI "\fBgetExe\fP ()"
.br
.ti -1c
.RI "\fBgetListen\fP ()"
.br
.ti -1c
.RI "\fBgetLog\fP ()"
.br
.ti -1c
.RI "\fBgetService\fP ()"
.br
.ti -1c
.RI "\fBgetSmtpPort\fP ()"
.br
.ti -1c
.RI "\fBgetUiPort\fP ()"
.br
.ti -1c
.RI "\fBgetWebRoot\fP ()"
.br
.ti -1c
.RI "\fBrebuildConf\fP ()"
.br
.ti -1c
.RI "\fBreload\fP ($id=null, $type=null)"
.br
.ti -1c
.RI "\fBsetEnable\fP ($enabled, $showWindow=false)"
.br
.ti -1c
.RI "\fBsetListen\fP ()"
.br
.ti -1c
.RI "\fBsetSmtpPort\fP ($smtpPort)"
.br
.ti -1c
.RI "\fBsetUiPort\fP ($uiPort)"
.br
.ti -1c
.RI "\fBsetVersion\fP ($version)"
.br
.ti -1c
.RI "\fBsetWebRoot\fP ($webRoot)"
.br
.ti -1c
.RI "\fBswitchVersion\fP ($version, $showWindow=false)"
.br
.in -1c

Public Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__toString\fP ()"
.br
.ti -1c
.RI "\fBgetCurrentPath\fP ()"
.br
.ti -1c
.RI "\fBgetId\fP ()"
.br
.ti -1c
.RI "\fBgetName\fP ()"
.br
.ti -1c
.RI "\fBgetRelease\fP ()"
.br
.ti -1c
.RI "\fBgetRootPath\fP ()"
.br
.ti -1c
.RI "\fBgetSymlinkPath\fP ()"
.br
.ti -1c
.RI "\fBgetType\fP ()"
.br
.ti -1c
.RI "\fBgetVersion\fP ()"
.br
.ti -1c
.RI "\fBgetVersionList\fP ()"
.br
.ti -1c
.RI "\fBisEnable\fP ()"
.br
.ti -1c
.RI "\fBupdate\fP ($sub=0, $showWindow=false)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBLOCAL_CFG_EXE\fP = 'mailpitExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_LISTEN\fP = 'mailpitListen'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_SMTP_PORT\fP = 'mailpitSmtpPort'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_UI_PORT\fP = 'mailpitUiPort'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_WEB_ROOT\fP = 'mailpitWebRoot'"
.br
.ti -1c
.RI "const \fBROOT_CFG_ENABLE\fP = 'mailpitEnable'"
.br
.ti -1c
.RI "const \fBROOT_CFG_VERSION\fP = 'mailpitVersion'"
.br
.ti -1c
.RI "const \fBSERVICE_NAME\fP = 'bearsamppmailpit'"
.br
.ti -1c
.RI "const \fBSERVICE_PARAMS\fP = ' \-\-listen '%s:%d' \-\-smtp '%s:%d' \-\-webroot '%s''"
.br
.in -1c

Data Fields inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "const \fBBUNDLE_RELEASE\fP = 'bundleRelease'"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBreplaceAll\fP ($params)"
.br
.ti -1c
.RI "\fBupdateConfig\fP ($version=null, $sub=0, $showWindow=false)"
.br
.in -1c

Protected Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__construct\fP ()"
.br
.ti -1c
.RI "\fBreplace\fP ($key, $value)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$exe\fP"
.br
.ti -1c
.RI "\fB$listen\fP"
.br
.ti -1c
.RI "\fB$log\fP"
.br
.ti -1c
.RI "\fB$service\fP"
.br
.ti -1c
.RI "\fB$smtpPort\fP"
.br
.ti -1c
.RI "\fB$uiPort\fP"
.br
.ti -1c
.RI "\fB$webRoot\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Attributes inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB$bearsamppConf\fP"
.br
.ti -1c
.RI "\fB$bearsamppConfRaw\fP"
.br
.ti -1c
.RI "\fB$currentPath\fP"
.br
.ti -1c
.RI "\fB$enable\fP"
.br
.ti -1c
.RI "\fB$name\fP"
.br
.ti -1c
.RI "\fB$release\fP = 'N/A'"
.br
.ti -1c
.RI "\fB$rootPath\fP"
.br
.ti -1c
.RI "\fB$symlinkPath\fP"
.br
.ti -1c
.RI "\fB$version\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBBinMailpit\fP

.PP
This class represents the Mailpit module in the \fBBearsampp\fP application\&. It handles the configuration, initialization, and management of the Mailpit service\&. 
.PP
Definition at line \fB17\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $id,  $type)"
Constructs a \fBBinMailpit\fP object and initializes the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. 
.br
\fI$type\fP The type of the module\&. 
.RE
.PP

.PP
Definition at line \fB46\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
47     {
48         Util::logInitClass( $this );
49         $this\->reload( $id, $type );
50     }
.PP
.fi

.PP
References \fBModule\\$id\fP, \fBModule\\$type\fP, \fBUtil\\logInitClass()\fP, and \fBreload()\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "changePort ( $port,  $checkUsed = \fRfalse\fP,  $wbProgressBar = \fRnull\fP)"
Changes the SMTP port for the Mailpit service\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The new port number\&. 
.br
\fI$checkUsed\fP Whether to check if the port is already in use\&. 
.br
\fI$wbProgressBar\fP The progress bar object for UI updates\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool|int True if the port was successfully changed, or the process using the port if it is in use\&. 
.RE
.PP

.PP
Definition at line \fB212\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
213     {
214         global $bearsamppWinbinder;
215 
216         if ( !Util::isValidPort( $port ) ) {
217             Util::logError( $this\->getName() \&. ' port not valid: ' \&. $port );
218 
219             return false;
220         }
221 
222         $port = intval( $port );
223         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
224 
225         $isPortInUse = Util::isPortInUse( $port );
226         if ( !$checkUsed || $isPortInUse === false ) {
227             // bearsampp\&.conf
228             $this\->setSmtpPort( $port );
229             $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
230 
231             // conf
232             $this\->update();
233             $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
234 
235             return true;
236         }
237 
238         Util::logDebug( $this\->getName() \&. ' port in used: ' \&. $port \&. ' \- ' \&. $isPortInUse );
239 
240         return $isPortInUse;
241     }
.PP
.fi

.PP
References \fB$port\fP, \fBModule\\getName()\fP, \fBUtil\\isPortInUse()\fP, \fBUtil\\isValidPort()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBsetSmtpPort()\fP, and \fBModule\\update()\fP\&.
.SS "checkPort ( $port,  $showWindow = \fRfalse\fP)"
Checks if the specified port is used by the Mailpit service\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The port number to check\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the port is used by the Mailpit service, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB251\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
252     {
253         global $bearsamppLang, $bearsamppWinbinder;
254         $boxTitle = sprintf( $bearsamppLang\->getValue( Lang::CHECK_PORT_TITLE ), $this\->getName(), $port );
255 
256         if ( !Util::isValidPort( $port ) ) {
257             Util::logError( $this\->getName() \&. ' port not valid: ' \&. $port );
258 
259             return false;
260         }
261 
262         $headers = Util::getHeaders( $this\->listen, $port );
263         if ( !empty( $headers ) ) {
264             if ( Util::contains( $headers[0], 'Mailpit' ) ) {
265                 Util::logDebug( $this\->getName() \&. ' port ' \&. $port \&. ' is used by: ' \&. str_replace( '220 ', '', $headers[0] ) );
266                 if ( $showWindow ) {
267                     $bearsamppWinbinder\->messageBoxInfo(
268                         sprintf( $bearsamppLang\->getValue( Lang::PORT_USED_BY ), $port, str_replace( '220 ', '', $headers[0] ) ),
269                         $boxTitle
270                     );
271                 }
272 
273                 return true;
274             }
275             Util::logDebug( $this\->getName() \&. ' port ' \&. $port \&. ' is used by another application' );
276             if ( $showWindow ) {
277                 $bearsamppWinbinder\->messageBoxWarning(
278                     sprintf( $bearsamppLang\->getValue( Lang::PORT_NOT_USED_BY ), $port ),
279                     $boxTitle
280                 );
281             }
282         }
283         else {
284             Util::logDebug( $this\->getName() \&. ' port ' \&. $port \&. ' is not used' );
285             if ( $showWindow ) {
286                 $bearsamppWinbinder\->messageBoxError(
287                     sprintf( $bearsamppLang\->getValue( Lang::PORT_NOT_USED ), $port ),
288                     $boxTitle
289                 );
290             }
291         }
292 
293         return false;
294     }
.PP
.fi

.PP
References \fB$bearsamppLang\fP, \fB$port\fP, \fBLang\\CHECK_PORT_TITLE\fP, \fBUtil\\contains()\fP, \fBUtil\\getHeaders()\fP, \fBModule\\getName()\fP, \fBUtil\\isValidPort()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBLang\\PORT_NOT_USED\fP, \fBLang\\PORT_NOT_USED_BY\fP, and \fBLang\\PORT_USED_BY\fP\&.
.SS "getExe ()"
Retrieves the executable file path for the Mailpit service\&.

.PP
\fBReturns\fP
.RS 4
string The executable file path\&. 
.RE
.PP

.PP
Definition at line \fB437\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
438     {
439         return $this\->exe;
440     }
.PP
.fi

.PP
References \fB$exe\fP\&.
.SS "getListen ()"
Retrieves the listen address for the Mailpit service\&.

.PP
\fBReturns\fP
.RS 4
string The listen address\&. 
.RE
.PP

.PP
Definition at line \fB507\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
508     {
509         return $this\->listen;
510     }
.PP
.fi

.PP
References \fB$listen\fP\&.
.SS "getLog ()"
Retrieves the log file path for the Mailpit service\&.

.PP
\fBReturns\fP
.RS 4
string The log file path\&. 
.RE
.PP

.PP
Definition at line \fB427\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
428     {
429         return $this\->log;
430     }
.PP
.fi

.PP
References \fB$log\fP\&.
.SS "getService ()"
Retrieves the service object for the Mailpit service\&.

.PP
\fBReturns\fP
.RS 4
\fBWin32Service\fP The service object\&. 
.RE
.PP

.PP
Definition at line \fB383\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
384     {
385         return $this\->service;
386     }
.PP
.fi

.PP
References \fB$service\fP\&.
.SS "getSmtpPort ()"
Retrieves the SMTP port for the Mailpit service\&.

.PP
\fBReturns\fP
.RS 4
int The SMTP port\&. 
.RE
.PP

.PP
Definition at line \fB487\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
488     {
489         return $this\->smtpPort;
490     }
.PP
.fi

.PP
References \fB$smtpPort\fP\&.
.SS "getUiPort ()"
Retrieves the UI port for the Mailpit service\&.

.PP
\fBReturns\fP
.RS 4
int The UI port\&. 
.RE
.PP

.PP
Definition at line \fB467\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
468     {
469         return $this\->uiPort;
470     }
.PP
.fi

.PP
References \fB$uiPort\fP\&.
.SS "getWebRoot ()"
Retrieves the web root directory for the Mailpit service\&.

.PP
\fBReturns\fP
.RS 4
string The web root directory\&. 
.RE
.PP

.PP
Definition at line \fB447\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
448     {
449         return $this\->webRoot;
450     }
.PP
.fi

.PP
References \fB$webRoot\fP\&.
.SS "rebuildConf ()"
Rebuilds the configuration for the Mailpit service in the Windows \fBRegistry\fP\&.

.PP
\fBReturns\fP
.RS 4
bool True if the configuration was successfully rebuilt, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB166\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
167     {
168         global $bearsamppRegistry;
169 
170         Util::logTrace("Starting rebuildConf for Mailpit service");
171         Util::logTrace("Checking if registry key exists for Mailpit service parameters");
172 
173         $registryPath = 'SYSTEM\\CurrentControlSet\\Services\\\\' \&. self::SERVICE_NAME \&. '\\Parameters';
174         Util::logTrace("Registry path: " \&. $registryPath);
175 
176         $exists = $bearsamppRegistry\->exists(
177             Registry::HKEY_LOCAL_MACHINE,
178             $registryPath,
179             Nssm::INFO_APP_PARAMETERS
180         );
181 
182         if ( $exists ) {
183             Util::logTrace("Registry key exists, updating service parameters");
184 
185             $serviceParams = sprintf(self::SERVICE_PARAMS, $this\->listen, $this\->uiPort, $this\->listen, $this\->smtpPort, $this\->webRoot);
186             Util::logTrace("Service parameters: " \&. $serviceParams);
187 
188             $result = $bearsamppRegistry\->setExpandStringValue(
189                 Registry::HKEY_LOCAL_MACHINE,
190                 $registryPath,
191                 Nssm::INFO_APP_PARAMETERS,
192                 $serviceParams
193             );
194 
195             Util::logTrace("Registry update " \&. ($result ? "succeeded" : "failed"));
196             return $result;
197         }
198 
199         Util::logTrace("Registry key does not exist for Mailpit service parameters");
200         return false;
201     }
.PP
.fi

.PP
References \fB$result\fP, \fBRegistry\\HKEY_LOCAL_MACHINE\fP, \fBNssm\\INFO_APP_PARAMETERS\fP, and \fBUtil\\logTrace()\fP\&.
.SS "reload ( $id = \fRnull\fP,  $type = \fRnull\fP)"
Reloads the module configuration based on the provided ID and type\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. If null, the current ID is used\&. 
.br
\fI$type\fP The type of the module\&. If null, the current type is used\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB58\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
59     {
60         global $bearsamppRoot, $bearsamppConfig, $bearsamppLang;
61         Util::logReloadClass( $this );
62 
63         $this\->name    = $bearsamppLang\->getValue( Lang::MAILPIT );
64         $this\->version = $bearsamppConfig\->getRaw( self::ROOT_CFG_VERSION );
65         parent::reload( $id, $type );
66 
67         $this\->enable  = $this\->enable && $bearsamppConfig\->getRaw( self::ROOT_CFG_ENABLE );
68         $this\->service = new Win32Service( self::SERVICE_NAME );
69         $this\->log     = $bearsamppRoot\->getLogsPath() \&. '/mailpit\&.log';
70 
71         if ( $this\->bearsamppConfRaw !== false ) {
72             $this\->exe      = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_EXE];
73             $this\->webRoot  = $this\->bearsamppConfRaw[self::LOCAL_CFG_WEB_ROOT];
74             $this\->uiPort   = intval( $this\->bearsamppConfRaw[self::LOCAL_CFG_UI_PORT] );
75             $this\->smtpPort = intval( $this\->bearsamppConfRaw[self::LOCAL_CFG_SMTP_PORT] );
76             $this\->listen   = $this\->bearsamppConfRaw[self::LOCAL_CFG_LISTEN];
77         }
78 
79         if ( !$this\->enable ) {
80             Util::logInfo( $this\->name \&. ' is not enabled!' );
81 
82             return;
83         }
84         if ( !is_dir( $this\->currentPath ) ) {
85             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_FILE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->currentPath ) );
86 
87             return;
88         }
89         if ( !is_dir( $this\->symlinkPath ) ) {
90             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_FILE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->symlinkPath ) );
91 
92             return;
93         }
94         if ( !is_file( $this\->bearsamppConf ) ) {
95             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_CONF_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->bearsamppConf ) );
96 
97             return;
98         }
99         if ( !is_file( $this\->exe ) ) {
100             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_EXE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->exe ) );
101 
102             return;
103         }
104         if ( (empty( $this\->webRoot ) && $this\->webRoot !== '' || is_numeric( $this\->webRoot )) ) {
105             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_INVALID_PARAMETER ), self::LOCAL_CFG_WEB_ROOT, $this\->webRoot ) );
106 
107             return;
108         }
109         if ( empty( $this\->uiPort ) ) {
110             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_INVALID_PARAMETER ), self::LOCAL_CFG_UI_PORT, $this\->uiPort ) );
111 
112             return;
113         }
114         if ( empty( $this\->smtpPort ) ) {
115             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_INVALID_PARAMETER ), self::LOCAL_CFG_SMTP_PORT, $this\->smtpPort ) );
116 
117             return;
118         }
119         if ( empty( $this\->listen ) ) {
120             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_INVALID_PARAMETER ), self::LOCAL_CFG_LISTEN, $this\->listen ) );
121 
122             return;
123         }
124 
125         $nssm = new Nssm( self::SERVICE_NAME );
126         $nssm\->setDisplayName( APP_TITLE \&. ' ' \&. $this\->getName() );
127         $nssm\->setBinPath( $this\->exe );
128         $nssm\->setParams( sprintf( self::SERVICE_PARAMS, $this\->listen, $this\->uiPort, $this\->listen, $this\->smtpPort, $this\->webRoot ) );
129         $nssm\->setStart( Nssm::SERVICE_DEMAND_START );
130         $nssm\->setStdout( $bearsamppRoot\->getLogsPath() \&. '/mailpit\&.out\&.log' );
131         $nssm\->setStderr( $bearsamppRoot\->getLogsPath() \&. '/mailpit\&.err\&.log' );
132 
133         $this\->service\->setNssm( $nssm );
134     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fB$bearsamppRoot\fP, \fBModule\\$id\fP, \fBModule\\$type\fP, \fBAPP_TITLE\fP, \fBLang\\ERROR_CONF_NOT_FOUND\fP, \fBLang\\ERROR_EXE_NOT_FOUND\fP, \fBLang\\ERROR_FILE_NOT_FOUND\fP, \fBLang\\ERROR_INVALID_PARAMETER\fP, \fBModule\\getName()\fP, \fBUtil\\logError()\fP, \fBUtil\\logInfo()\fP, \fBUtil\\logReloadClass()\fP, \fBLang\\MAILPIT\fP, and \fBNssm\\SERVICE_DEMAND_START\fP\&.
.PP
Referenced by \fB__construct()\fP, \fBsetEnable()\fP, and \fBsetVersion()\fP\&.
.SS "replaceAll ( $params)\fR [protected]\fP"
Replaces multiple key-value pairs in the configuration file\&.

.PP
\fBParameters\fP
.RS 4
\fI$params\fP An associative array of key-value pairs to replace\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB141\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
142     {
143         $content = file_get_contents( $this\->bearsamppConf );
144 
145         foreach ( $params as $key => $value ) {
146             $content                      = preg_replace( '|' \&. $key \&. ' = \&.*|', $key \&. ' = ' \&. '"' \&. $value \&. '"', $content );
147             $this\->bearsamppConfRaw[$key] = $value;
148             switch ( $key ) {
149                 case self::LOCAL_CFG_UI_PORT:
150                     $this\->uiPort = intval( $value );
151                     break;
152                 case self::LOCAL_CFG_SMTP_PORT:
153                     $this\->smtpPort = intval( $value );
154                     break;
155             }
156         }
157 
158         file_put_contents( $this\->bearsamppConf, $content );
159     }
.PP
.fi

.SS "setEnable ( $enabled,  $showWindow = \fRfalse\fP)"
Enables or disables the Mailpit service\&.

.PP
\fBParameters\fP
.RS 4
\fI$enabled\fP Whether to enable or disable the service\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&. 
.RE
.PP

.PP
Definition at line \fB394\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
395     {
396         global $bearsamppConfig, $bearsamppLang, $bearsamppWinbinder;
397 
398         if ( $enabled == Config::ENABLED && !is_dir( $this\->currentPath ) ) {
399             Util::logDebug( $this\->getName() \&. ' cannot be enabled because bundle ' \&. $this\->getVersion() \&. ' does not exist in ' \&. $this\->currentPath );
400             if ( $showWindow ) {
401                 $bearsamppWinbinder\->messageBoxError(
402                     sprintf( $bearsamppLang\->getValue( Lang::ENABLE_BUNDLE_NOT_EXIST ), $this\->getName(), $this\->getVersion(), $this\->currentPath ),
403                     sprintf( $bearsamppLang\->getValue( Lang::ENABLE_TITLE ), $this\->getName() )
404                 );
405             }
406             $enabled = Config::DISABLED;
407         }
408 
409         Util::logInfo( $this\->getName() \&. ' switched to ' \&. ($enabled == Config::ENABLED ? 'enabled' : 'disabled') );
410         $this\->enable = $enabled == Config::ENABLED;
411         $bearsamppConfig\->replace( self::ROOT_CFG_ENABLE, $enabled );
412 
413         $this\->reload();
414         if ( $this\->enable ) {
415             Util::installService( $this, $this\->smtpPort, null, $showWindow );
416         }
417         else {
418             Util::removeService( $this\->service, $this\->name );
419         }
420     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fBConfig\\DISABLED\fP, \fBLang\\ENABLE_BUNDLE_NOT_EXIST\fP, \fBLang\\ENABLE_TITLE\fP, \fBConfig\\ENABLED\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\installService()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logInfo()\fP, \fBreload()\fP, and \fBUtil\\removeService()\fP\&.
.SS "setListen ()"
Sets the listen address for the Mailpit service\&.

.PP
\fBReturns\fP
.RS 4
bool True if the listen address was successfully set, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB517\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
518     {
519         return $this\->replace( self::LOCAL_CFG_LISTEN, $this\->listen );
520     }
.PP
.fi

.PP
References \fBModule\\replace()\fP\&.
.SS "setSmtpPort ( $smtpPort)"
Sets the SMTP port for the Mailpit service\&.

.PP
\fBParameters\fP
.RS 4
\fI$smtpPort\fP The SMTP port to set\&. 
.RE
.PP

.PP
Definition at line \fB497\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
498     {
499         $this\->replace( self::LOCAL_CFG_SMTP_PORT, $smtpPort );
500     }
.PP
.fi

.PP
References \fB$smtpPort\fP, and \fBModule\\replace()\fP\&.
.PP
Referenced by \fBchangePort()\fP\&.
.SS "setUiPort ( $uiPort)"
Sets the UI port for the Mailpit service\&.

.PP
\fBParameters\fP
.RS 4
\fI$uiPort\fP The UI port to set\&. 
.RE
.PP

.PP
Definition at line \fB477\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
478     {
479         $this\->replace( self::LOCAL_CFG_UI_PORT, $uiPort );
480     }
.PP
.fi

.PP
References \fB$uiPort\fP, and \fBModule\\replace()\fP\&.
.SS "setVersion ( $version)"
Sets the version of the Mailpit service\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to set\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB370\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
371     {
372         global $bearsamppConfig;
373         $this\->version = $version;
374         $bearsamppConfig\->replace( self::ROOT_CFG_VERSION, $version );
375         $this\->reload();
376     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fBModule\\$version\fP, and \fBreload()\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "setWebRoot ( $webRoot)"
Sets the web root directory for the Mailpit service\&.

.PP
\fBParameters\fP
.RS 4
\fI$webRoot\fP The web root directory to set\&. 
.RE
.PP

.PP
Definition at line \fB457\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
458     {
459         $this\->replace( self::LOCAL_CFG_WEB_ROOT, $webRoot );
460     }
.PP
.fi

.PP
References \fB$webRoot\fP, and \fBModule\\replace()\fP\&.
.SS "switchVersion ( $version,  $showWindow = \fRfalse\fP)"
Switches the version of the Mailpit service\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to switch to\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the version was successfully switched, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB304\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
305     {
306         Util::logDebug( 'Switch ' \&. $this\->name \&. ' version to ' \&. $version );
307 
308         return $this\->updateConfig( $version, 0, $showWindow );
309     }
.PP
.fi

.PP
References \fBModule\\$version\fP, \fBUtil\\logDebug()\fP, and \fBupdateConfig()\fP\&.
.SS "updateConfig ( $version = \fRnull\fP,  $sub = \fR0\fP,  $showWindow = \fRfalse\fP)\fR [protected]\fP"
Updates the configuration for the Mailpit service\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to update to\&. If null, the current version is used\&. 
.br
\fI$sub\fP The sub-level for logging indentation\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the configuration was successfully updated, false otherwise\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB320\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.nf
321     {
322         global $bearsamppLang, $bearsamppWinbinder;
323 
324         if ( !$this\->enable ) {
325             return true;
326         }
327 
328         $version = $version == null ? $this\->version : $version;
329         Util::logDebug( ($sub > 0 ? str_repeat( ' ', 2 * $sub ) : '') \&. 'Update ' \&. $this\->name \&. ' ' \&. $version \&. ' config' );
330 
331         $boxTitle = sprintf( $bearsamppLang\->getValue( Lang::SWITCH_VERSION_TITLE ), $this\->getName(), $version );
332 
333         $bearsamppConf = str_replace( 'mailpit' \&. $this\->getVersion(), 'mailpit' \&. $version, $this\->bearsamppConf );
334         if ( !file_exists( $bearsamppConf ) ) {
335             Util::logError( 'bearsampp config files not found for ' \&. $this\->getName() \&. ' ' \&. $version );
336             if ( $showWindow ) {
337                 $bearsamppWinbinder\->messageBoxError(
338                     sprintf( $bearsamppLang\->getValue( Lang::BEARSAMPP_CONF_NOT_FOUND_ERROR ), $this\->getName() \&. ' ' \&. $version ),
339                     $boxTitle
340                 );
341             }
342 
343             return false;
344         }
345 
346         $bearsamppConfRaw = parse_ini_file( $bearsamppConf );
347         if ( $bearsamppConfRaw === false || !isset( $bearsamppConfRaw[self::ROOT_CFG_VERSION] ) || $bearsamppConfRaw[self::ROOT_CFG_VERSION] != $version ) {
348             Util::logError( 'bearsampp config file malformed for ' \&. $this\->getName() \&. ' ' \&. $version );
349             if ( $showWindow ) {
350                 $bearsamppWinbinder\->messageBoxError(
351                     sprintf( $bearsamppLang\->getValue( Lang::BEARSAMPP_CONF_MALFORMED_ERROR ), $this\->getName() \&. ' ' \&. $version ),
352                     $boxTitle
353                 );
354             }
355 
356             return false;
357         }
358 
359         // bearsampp\&.conf
360         $this\->setVersion( $version );
361 
362         return true;
363     }
.PP
.fi

.PP
References \fBModule\\$bearsamppConf\fP, \fBModule\\$bearsamppConfRaw\fP, \fB$bearsamppLang\fP, \fBModule\\$version\fP, \fBLang\\BEARSAMPP_CONF_MALFORMED_ERROR\fP, \fBLang\\BEARSAMPP_CONF_NOT_FOUND_ERROR\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBsetVersion()\fP, and \fBLang\\SWITCH_VERSION_TITLE\fP\&.
.PP
Referenced by \fBswitchVersion()\fP\&.
.SH "Field Documentation"
.PP 
.SS "$exe\fR [private]\fP"

.PP
Definition at line \fB34\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.PP
Referenced by \fBgetExe()\fP\&.
.SS "$listen\fR [private]\fP"

.PP
Definition at line \fB38\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.PP
Referenced by \fBgetListen()\fP\&.
.SS "$log\fR [private]\fP"

.PP
Definition at line \fB32\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.PP
Referenced by \fBgetLog()\fP\&.
.SS "$service\fR [private]\fP"

.PP
Definition at line \fB31\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.PP
Referenced by \fBgetService()\fP\&.
.SS "$smtpPort\fR [private]\fP"

.PP
Definition at line \fB37\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.PP
Referenced by \fBgetSmtpPort()\fP, and \fBsetSmtpPort()\fP\&.
.SS "$uiPort\fR [private]\fP"

.PP
Definition at line \fB36\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.PP
Referenced by \fBgetUiPort()\fP, and \fBsetUiPort()\fP\&.
.SS "$webRoot\fR [private]\fP"

.PP
Definition at line \fB35\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.PP
Referenced by \fBgetWebRoot()\fP, and \fBsetWebRoot()\fP\&.
.SS "const LOCAL_CFG_EXE = 'mailpitExe'"

.PP
Definition at line \fB25\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.SS "const LOCAL_CFG_LISTEN = 'mailpitListen'"

.PP
Definition at line \fB29\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.SS "const LOCAL_CFG_SMTP_PORT = 'mailpitSmtpPort'"

.PP
Definition at line \fB28\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.SS "const LOCAL_CFG_UI_PORT = 'mailpitUiPort'"

.PP
Definition at line \fB27\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.SS "const LOCAL_CFG_WEB_ROOT = 'mailpitWebRoot'"

.PP
Definition at line \fB26\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.SS "const ROOT_CFG_ENABLE = 'mailpitEnable'"

.PP
Definition at line \fB22\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.SS "const ROOT_CFG_VERSION = 'mailpitVersion'"

.PP
Definition at line \fB23\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.SS "const SERVICE_NAME = 'bearsamppmailpit'"

.PP
Definition at line \fB19\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.
.PP
Referenced by \fBActionService\\__construct()\fP, \fBTplAppMailpit\\getActionInstallMailpitService()\fP, \fBTplAppMailpit\\getActionRemoveMailpitService()\fP, \fBBins\\getServices()\fP, \fBActionStartup\\installServices()\fP, \fBActionQuit\\processWindow()\fP, and \fBWin32Service\\start()\fP\&.
.SS "const SERVICE_PARAMS = ' \-\-listen '%s:%d' \-\-smtp '%s:%d' \-\-webroot '%s''"

.PP
Definition at line \fB20\fP of file \fBclass\&.bin\&.mailpit\&.php\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
