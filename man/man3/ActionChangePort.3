.TH "ActionChangePort" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ActionChangePort
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($args)"
.br
.ti -1c
.RI "\fBprocessWindow\fP ($window, $id, $ctrl, $param1, $param2)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$bin\fP"
.br
.ti -1c
.RI "\fB$cntProcessActions\fP"
.br
.ti -1c
.RI "\fB$currentPort\fP"
.br
.ti -1c
.RI "\fB$wbBtnCancel\fP"
.br
.ti -1c
.RI "\fB$wbBtnFinish\fP"
.br
.ti -1c
.RI "\fB$wbInputPort\fP"
.br
.ti -1c
.RI "\fB$wbLabelCurrent\fP"
.br
.ti -1c
.RI "\fB$wbLabelPort\fP"
.br
.ti -1c
.RI "\fB$wbProgressBar\fP"
.br
.ti -1c
.RI "\fB$wbWindow\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBActionChangePort\fP Handles the process of changing the port for various services in the \fBBearsampp\fP application\&. 
.PP
Definition at line \fB14\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $args)"
\fBActionChangePort\fP constructor\&. Initializes the port change process for the specified service\&.

.PP
\fBParameters\fP
.RS 4
\fI$args\fP The arguments passed to the constructor, where the first element specifies the service name\&. 
.RE
.PP

.PP
Definition at line \fB37\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.nf
38     {
39         global $bearsamppLang, $bearsamppBins, $bearsamppWinbinder;
40 
41         if ( isset( $args[0] ) && !empty( $args[0] ) ) {
42             $this\->bin               = $bearsamppBins\->getApache();
43             $this\->currentPort       = $bearsamppBins\->getApache()\->getPort();
44             $this\->cntProcessActions = 3;
45             if ( $args[0] == $bearsamppBins\->getMysql()\->getName() ) {
46                 $this\->bin               = $bearsamppBins\->getMysql();
47                 $this\->currentPort       = $bearsamppBins\->getMysql()\->getPort();
48                 $this\->cntProcessActions = 3;
49             }
50             elseif ( $args[0] == $bearsamppBins\->getMariadb()\->getName() ) {
51                 $this\->bin               = $bearsamppBins\->getMariadb();
52                 $this\->currentPort       = $bearsamppBins\->getMariadb()\->getPort();
53                 $this\->cntProcessActions = 3;
54             }
55             elseif ( $args[0] == $bearsamppBins\->getPostgresql()\->getName() ) {
56                 $this\->bin               = $bearsamppBins\->getPostgresql();
57                 $this\->currentPort       = $bearsamppBins\->getPostgresql()\->getPort();
58                 $this\->cntProcessActions = 3;
59             }
60             elseif ( $args[0] == $bearsamppBins\->getMailpit()\->getName() ) {
61                 $this\->bin               = $bearsamppBins\->getMailpit();
62                 $this\->currentPort       = $bearsamppBins\->getMailpit()\->getSmtpPort();
63                 $this\->cntProcessActions = 3;
64             }
65             elseif ( $args[0] == $bearsamppBins\->getMemcached()\->getName() ) {
66                 $this\->bin               = $bearsamppBins\->getMemcached();
67                 $this\->currentPort       = $bearsamppBins\->getMemcached()\->getPort();
68                 $this\->cntProcessActions = 3;
69             } elseif ($args[0] == $bearsamppBins\->getXlight()\->getName()) {
70                 $this\->bin               = $bearsamppBins\->getXlight();
71                 $this\->currentPort       = $bearsamppBins\->getXlight()\->getPort();
72                 $this\->cntProcessActions = 3;
73             }
74             elseif ( $args[0] == $bearsamppBins\->getXlight()\->getName() ) {
75                 $this\->bin               = $bearsamppBins\->getXlight();
76                 $this\->currentPort       = $bearsamppBins\->getXlight()\->getPort();
77                 $this\->cntProcessActions = 3;
78             }
79 
80             $bearsamppWinbinder\->reset();
81             $this\->wbWindow = $bearsamppWinbinder\->createAppWindow( sprintf( $bearsamppLang\->getValue( Lang::CHANGE_PORT_TITLE ), $args[0] ), 380, 170, WBC_NOTIFY, WBC_KEYDOWN | WBC_KEYUP );
82 
83             $this\->wbLabelCurrent = $bearsamppWinbinder\->createLabel(
84                 $this\->wbWindow,
85                 sprintf( $bearsamppLang\->getValue( Lang::CHANGE_PORT_CURRENT_LABEL ), $args[0], $this\->currentPort ), 15, 15, 350
86             );
87 
88             $this\->wbLabelPort = $bearsamppWinbinder\->createLabel( $this\->wbWindow, $bearsamppLang\->getValue( Lang::CHANGE_PORT_NEW_LABEL ) \&. ' :', 15, 45, 85, null, WBC_RIGHT );
89             $this\->wbInputPort = $bearsamppWinbinder\->createInputText( $this\->wbWindow, $this\->currentPort, 105, 43, 50, null, 5, WBC_NUMBER );
90 
91             $this\->wbProgressBar = $bearsamppWinbinder\->createProgressBar( $this\->wbWindow, $this\->cntProcessActions + 1, 15, 107, 170 );
92             $this\->wbBtnFinish   = $bearsamppWinbinder\->createButton( $this\->wbWindow, $bearsamppLang\->getValue( Lang::BUTTON_FINISH ), 190, 102 );
93             $this\->wbBtnCancel   = $bearsamppWinbinder\->createButton( $this\->wbWindow, $bearsamppLang\->getValue( Lang::BUTTON_CANCEL ), 277, 102 );
94 
95             $bearsamppWinbinder\->setHandler( $this\->wbWindow, $this, 'processWindow' );
96             $bearsamppWinbinder\->setFocus( $this\->wbInputPort[WinBinder::CTRL_OBJ] );
97             $bearsamppWinbinder\->mainLoop();
98             $bearsamppWinbinder\->reset();
99         }
100     }
.PP
.fi

.PP
References \fB$bearsamppBins\fP, \fB$bearsamppLang\fP, \fBLang\\BUTTON_CANCEL\fP, \fBLang\\BUTTON_FINISH\fP, \fBLang\\CHANGE_PORT_CURRENT_LABEL\fP, \fBLang\\CHANGE_PORT_NEW_LABEL\fP, \fBLang\\CHANGE_PORT_TITLE\fP, and \fBWinBinder\\CTRL_OBJ\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "processWindow ( $window,  $id,  $ctrl,  $param1,  $param2)"
Processes window events and handles user interactions\&.

.PP
\fBParameters\fP
.RS 4
\fI$window\fP The window object\&. 
.br
\fI$id\fP The control ID\&. 
.br
\fI$ctrl\fP The control object\&. 
.br
\fI$param1\fP Additional parameter 1\&. 
.br
\fI$param2\fP Additional parameter 2\&. 
.RE
.PP

.PP
Definition at line \fB111\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.nf
112     {
113         global $bearsamppLang, $bearsamppWinbinder;
114         $boxTitle = sprintf( $bearsamppLang\->getValue( Lang::CHANGE_PORT_TITLE ), $this\->bin );
115         $port     = $bearsamppWinbinder\->getText( $this\->wbInputPort[WinBinder::CTRL_OBJ] );
116 
117         switch ( $id ) {
118             case $this\->wbInputPort[WinBinder::CTRL_ID]:
119                 $bearsamppWinbinder\->setEnabled( $this\->wbBtnFinish[WinBinder::CTRL_OBJ], empty( $port ) ? false : true );
120                 break;
121             case $this\->wbBtnFinish[WinBinder::CTRL_ID]:
122                 $bearsamppWinbinder\->incrProgressBar( $this\->wbProgressBar );
123                 if ( $port == $this\->currentPort ) {
124                     $bearsamppWinbinder\->messageBoxWarning( $bearsamppLang\->getValue( Lang::CHANGE_PORT_SAME_ERROR ), $boxTitle );
125                     $bearsamppWinbinder\->resetProgressBar( $this\->wbProgressBar );
126                     break;
127                 }
128                 $changePort = $this\->bin\->changePort( $port, true, $this\->wbProgressBar );
129                 if ( $changePort === true ) {
130                     $this\->bin\->getService()\->restart();
131 
132                     $bearsamppWinbinder\->messageBoxInfo(
133                         sprintf( $bearsamppLang\->getValue( Lang::PORT_CHANGED ), $this\->bin, $port ),
134                         $boxTitle
135                     );
136                     $bearsamppWinbinder\->destroyWindow( $window );
137                 }
138                 else {
139                     $bearsamppWinbinder\->messageBoxError(
140                         sprintf( $bearsamppLang\->getValue( Lang::PORT_NOT_USED_BY ), $port, $changePort ),
141                         $boxTitle
142                     );
143                     $bearsamppWinbinder\->resetProgressBar( $this\->wbProgressBar );
144                 }
145                 break;
146             case IDCLOSE:
147             case $this\->wbBtnCancel[WinBinder::CTRL_ID]:
148                 $bearsamppWinbinder\->destroyWindow( $window );
149                 break;
150         }
151     }
.PP
.fi

.PP
References \fB$bearsamppLang\fP, \fB$port\fP, \fBLang\\CHANGE_PORT_SAME_ERROR\fP, \fBLang\\CHANGE_PORT_TITLE\fP, \fBWinBinder\\CTRL_ID\fP, \fBWinBinder\\CTRL_OBJ\fP, \fBLang\\PORT_CHANGED\fP, and \fBLang\\PORT_NOT_USED_BY\fP\&.
.SH "Field Documentation"
.PP 
.SS "$bin\fR [private]\fP"

.PP
Definition at line \fB16\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SS "$cntProcessActions\fR [private]\fP"

.PP
Definition at line \fB18\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SS "$currentPort\fR [private]\fP"

.PP
Definition at line \fB17\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SS "$wbBtnCancel\fR [private]\fP"

.PP
Definition at line \fB29\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SS "$wbBtnFinish\fR [private]\fP"

.PP
Definition at line \fB28\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SS "$wbInputPort\fR [private]\fP"

.PP
Definition at line \fB25\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SS "$wbLabelCurrent\fR [private]\fP"

.PP
Definition at line \fB22\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SS "$wbLabelPort\fR [private]\fP"

.PP
Definition at line \fB24\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SS "$wbProgressBar\fR [private]\fP"

.PP
Definition at line \fB27\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.
.SS "$wbWindow\fR [private]\fP"

.PP
Definition at line \fB20\fP of file \fBclass\&.action\&.changePort\&.php\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
