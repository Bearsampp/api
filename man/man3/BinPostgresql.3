.TH "BinPostgresql" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BinPostgresql
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBModule\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($id, $type)"
.br
.ti -1c
.RI "\fBchangePort\fP ($port, $checkUsed=false, $wbProgressBar=null)"
.br
.ti -1c
.RI "\fBchangeRootPassword\fP ($currentPwd, $newPwd, $wbProgressBar=null)"
.br
.ti -1c
.RI "\fBcheckPort\fP ($port, $showWindow=false)"
.br
.ti -1c
.RI "\fBcheckRootPassword\fP ($currentPwd=null, $wbProgressBar=null)"
.br
.ti -1c
.RI "\fBgetCliExe\fP ()"
.br
.ti -1c
.RI "\fBgetCmdLineOutput\fP ($cmd)"
.br
.ti -1c
.RI "\fBgetConf\fP ()"
.br
.ti -1c
.RI "\fBgetCtlExe\fP ()"
.br
.ti -1c
.RI "\fBgetDumpAllExe\fP ()"
.br
.ti -1c
.RI "\fBgetDumpExe\fP ()"
.br
.ti -1c
.RI "\fBgetErrorLog\fP ()"
.br
.ti -1c
.RI "\fBgetHbaConf\fP ()"
.br
.ti -1c
.RI "\fBgetPort\fP ()"
.br
.ti -1c
.RI "\fBgetRootPwd\fP ()"
.br
.ti -1c
.RI "\fBgetRootUser\fP ()"
.br
.ti -1c
.RI "\fBgetService\fP ()"
.br
.ti -1c
.RI "\fBinitData\fP ($path=null)"
.br
.ti -1c
.RI "\fBrebuildConf\fP ()"
.br
.ti -1c
.RI "\fBreload\fP ($id=null, $type=null)"
.br
.ti -1c
.RI "\fBsetEnable\fP ($enabled, $showWindow=false)"
.br
.ti -1c
.RI "\fBsetPort\fP ($port)"
.br
.ti -1c
.RI "\fBsetRootPwd\fP ($rootPwd)"
.br
.ti -1c
.RI "\fBsetRootUser\fP ($rootUser)"
.br
.ti -1c
.RI "\fBsetVersion\fP ($version)"
.br
.ti -1c
.RI "\fBswitchVersion\fP ($version, $showWindow=false)"
.br
.in -1c

Public Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__toString\fP ()"
.br
.ti -1c
.RI "\fBgetCurrentPath\fP ()"
.br
.ti -1c
.RI "\fBgetId\fP ()"
.br
.ti -1c
.RI "\fBgetName\fP ()"
.br
.ti -1c
.RI "\fBgetRelease\fP ()"
.br
.ti -1c
.RI "\fBgetRootPath\fP ()"
.br
.ti -1c
.RI "\fBgetSymlinkPath\fP ()"
.br
.ti -1c
.RI "\fBgetType\fP ()"
.br
.ti -1c
.RI "\fBgetVersion\fP ()"
.br
.ti -1c
.RI "\fBgetVersionList\fP ()"
.br
.ti -1c
.RI "\fBisEnable\fP ()"
.br
.ti -1c
.RI "\fBupdate\fP ($sub=0, $showWindow=false)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBCMD_VERSION\fP = '\-\-version'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_ALT_CONF\fP = 'postgresqlAltConf'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_ALT_HBA_CONF\fP = 'postgresqlAltUserConf'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_CLI_EXE\fP = 'postgresqlCliExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_CONF\fP = 'postgresqlConf'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_CTL_EXE\fP = 'postgresqlCtlExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_DUMP_ALL_EXE\fP = 'postgresqlDumpAllExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_DUMP_EXE\fP = 'postgresqlDumpExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_HBA_CONF\fP = 'postgresqlUserConf'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_PORT\fP = 'postgresqlPort'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_ROOT_PWD\fP = 'postgresqlRootPwd'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_ROOT_USER\fP = 'postgresqlRootUser'"
.br
.ti -1c
.RI "const \fBROOT_CFG_ENABLE\fP = 'postgresqlEnable'"
.br
.ti -1c
.RI "const \fBROOT_CFG_VERSION\fP = 'postgresqlVersion'"
.br
.ti -1c
.RI "const \fBSERVICE_NAME\fP = 'bearsampppostgresql'"
.br
.in -1c

Data Fields inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "const \fBBUNDLE_RELEASE\fP = 'bundleRelease'"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBreplaceAll\fP ($params)"
.br
.ti -1c
.RI "\fBupdateConfig\fP ($version=null, $sub=0, $showWindow=false)"
.br
.in -1c

Protected Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__construct\fP ()"
.br
.ti -1c
.RI "\fBreplace\fP ($key, $value)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBhandleNonPostgresUsage\fP ($port, $showWindow, $boxTitle)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$altConf\fP"
.br
.ti -1c
.RI "\fB$altHbaConf\fP"
.br
.ti -1c
.RI "\fB$cliExe\fP"
.br
.ti -1c
.RI "\fB$conf\fP"
.br
.ti -1c
.RI "\fB$ctlExe\fP"
.br
.ti -1c
.RI "\fB$dumpAllExe\fP"
.br
.ti -1c
.RI "\fB$dumpExe\fP"
.br
.ti -1c
.RI "\fB$errorLog\fP"
.br
.ti -1c
.RI "\fB$hbaConf\fP"
.br
.ti -1c
.RI "\fB$port\fP"
.br
.ti -1c
.RI "\fB$rootPwd\fP"
.br
.ti -1c
.RI "\fB$rootUser\fP"
.br
.ti -1c
.RI "\fB$service\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Attributes inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB$bearsamppConf\fP"
.br
.ti -1c
.RI "\fB$bearsamppConfRaw\fP"
.br
.ti -1c
.RI "\fB$currentPath\fP"
.br
.ti -1c
.RI "\fB$enable\fP"
.br
.ti -1c
.RI "\fB$name\fP"
.br
.ti -1c
.RI "\fB$release\fP = 'N/A'"
.br
.ti -1c
.RI "\fB$rootPath\fP"
.br
.ti -1c
.RI "\fB$symlinkPath\fP"
.br
.ti -1c
.RI "\fB$version\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBBinPostgresql\fP

.PP
This class represents the PostgreSQL module in the \fBBearsampp\fP application\&. It handles the configuration, management, and operations related to PostgreSQL\&. 
.PP
Definition at line \fB16\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $id,  $type)"
Constructor for the \fBBinPostgresql\fP class\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. 
.br
\fI$type\fP The type of the module\&. 
.RE
.PP

.PP
Definition at line \fB57\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
58     {
59         Util::logInitClass( $this );
60         $this\->reload( $id, $type );
61     }
.PP
.fi

.PP
References \fBModule\\$id\fP, \fBModule\\$type\fP, \fBUtil\\logInitClass()\fP, and \fBreload()\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "changePort ( $port,  $checkUsed = \fRfalse\fP,  $wbProgressBar = \fRnull\fP)"
Changes the port used by PostgreSQL\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The new port number\&. 
.br
\fI$checkUsed\fP Whether to check if the port is already in use\&. 
.br
\fI$wbProgressBar\fP The progress bar object for UI updates\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool|string True if the port was changed successfully, or the process using the port if it is in use\&. 
.RE
.PP

.PP
Definition at line \fB207\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
208     {
209         global $bearsamppWinbinder;
210 
211         if ( !Util::isValidPort( $port ) ) {
212             Util::logError( $this\->getName() \&. ' port not valid: ' \&. $port );
213 
214             return false;
215         }
216 
217         $port = intval( $port );
218         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
219 
220         $isPortInUse = Util::isPortInUse( $port );
221         if ( !$checkUsed || $isPortInUse === false ) {
222             // bearsampp\&.conf
223             $this\->setPort( $port );
224             $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
225 
226             // conf
227             $this\->update();
228             $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
229 
230             return true;
231         }
232 
233         Util::logDebug( $this\->getName() \&. ' port in used: ' \&. $port \&. ' \- ' \&. $isPortInUse );
234 
235         return $isPortInUse;
236     }
.PP
.fi

.PP
References \fB$port\fP, \fBModule\\getName()\fP, \fBUtil\\isPortInUse()\fP, \fBUtil\\isValidPort()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBsetPort()\fP, and \fBModule\\update()\fP\&.
.SS "changeRootPassword ( $currentPwd,  $newPwd,  $wbProgressBar = \fRnull\fP)"
Changes the root password for PostgreSQL\&.

.PP
\fBParameters\fP
.RS 4
\fI$currentPwd\fP The current root password\&. 
.br
\fI$newPwd\fP The new root password\&. 
.br
\fI$wbProgressBar\fP The progress bar object for UI updates\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool|string True if the password was changed successfully, or an error message if it failed\&. 
.RE
.PP

.PP
Definition at line \fB315\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
316     {
317         global $bearsamppWinbinder;
318         $error = null;
319 
320         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
321         $dbLink = pg_connect( 'host=127\&.0\&.0\&.1 port=' \&. $this\->port \&. ' user=' \&. $this\->rootUser \&. ' password=' \&. $currentPwd );
322 
323         if ( !$dbLink ) {
324             $error = pg_last_error( $dbLink );
325         }
326 
327         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
328         $pgr = pg_query_params( $dbLink, 'SELECT quote_ident($1)', array(pg_escape_string( $this\->rootUser )) );
329         list( $quoted_user ) = pg_fetch_array( $pgr );
330         $password = pg_escape_string( $newPwd );
331         $result   = pg_query( $dbLink, "ALTER USER $quoted_user WITH PASSWORD '$password'" );
332         if ( empty( $error ) && !$result ) {
333             $error = pg_last_error( $dbLink );
334         }
335 
336         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
337         if ( $dbLink ) {
338             pg_close( $dbLink );
339         }
340 
341         if ( !empty( $error ) ) {
342             return $error;
343         }
344 
345         // bearsampp\&.conf
346         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
347         $this\->setRootPwd( $newPwd );
348 
349         // conf
350         $this\->update();
351         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
352 
353         return true;
354     }
.PP
.fi

.PP
References \fB$result\fP, \fBsetRootPwd()\fP, and \fBModule\\update()\fP\&.
.SS "checkPort ( $port,  $showWindow = \fRfalse\fP)"
Checks if the specified port is being used by PostgreSQL 
.PP
\fBParameters\fP
.RS 4
\fI$port\fP The port number to check 
.br
\fI$showWindow\fP Whether to show a message box with the result 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if port is used by PostgreSQL, false otherwise 
.RE
.PP

.PP
Definition at line \fB244\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
245     {
246         global $bearsamppLang, $bearsamppWinbinder;
247         $boxTitle = sprintf($bearsamppLang\->getValue(Lang::CHECK_PORT_TITLE), $this\->getName(), $port);
248 
249         if (!Util::isValidPort($port)) {
250             Util::logError($this\->getName() \&. ' port not valid: ' \&. $port);
251             return false;
252         }
253 
254         $dbLink = @pg_connect("host=127\&.0\&.0\&.1 port=$port user={$this\->rootUser} password={$this\->rootPwd}");
255         if (!$dbLink) {
256             Util::logDebug($this\->getName() \&. ' connection failed: ' \&. pg_last_error());
257             return $this\->handleNonPostgresUsage($port, $showWindow, $boxTitle);
258         }
259 
260         // Verify active PostgreSQL connection
261         $connectionStatus = pg_connection_status($dbLink);
262         $isPostgres = $connectionStatus === PGSQL_CONNECTION_OK;
263         pg_close($dbLink);
264 
265         if ($isPostgres) {
266             Util::logDebug($this\->getName() \&. " port $port is used by PostgreSQL");
267             if ($showWindow) {
268                 $bearsamppWinbinder\->messageBoxInfo(
269                     sprintf($bearsamppLang\->getValue(Lang::PORT_USED_BY), $port, 'PostgreSQL'),
270                     $boxTitle
271                 );
272             }
273             return true;
274         }
275 
276         return $this\->handleNonPostgresUsage($port, $showWindow, $boxTitle);
277     }
.PP
.fi

.PP
References \fB$bearsamppLang\fP, \fB$port\fP, \fBLang\\CHECK_PORT_TITLE\fP, \fBModule\\getName()\fP, \fBhandleNonPostgresUsage()\fP, \fBUtil\\isValidPort()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, and \fBLang\\PORT_USED_BY\fP\&.
.SS "checkRootPassword ( $currentPwd = \fRnull\fP,  $wbProgressBar = \fRnull\fP)"
Checks if the provided root password is correct\&.

.PP
\fBParameters\fP
.RS 4
\fI$currentPwd\fP The current root password\&. If null, the stored root password is used\&. 
.br
\fI$wbProgressBar\fP The progress bar object for UI updates\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool|string True if the password is correct, or an error message if it is incorrect\&. 
.RE
.PP

.PP
Definition at line \fB364\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
365     {
366         global $bearsamppWinbinder;
367         $currentPwd = $currentPwd == null ? $this\->rootPwd : $currentPwd;
368         $error      = null;
369 
370         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
371         $dbLink = pg_connect( 'host=127\&.0\&.0\&.1 port=' \&. $this\->port \&. ' user=' \&. $this\->rootUser \&. ' password=' \&. $currentPwd );
372         if ( !$dbLink ) {
373             $error = pg_last_error( $dbLink );
374         }
375 
376         $bearsamppWinbinder\->incrProgressBar( $wbProgressBar );
377         if ( $dbLink ) {
378             pg_close( $dbLink );
379         }
380 
381         if ( !empty( $error ) ) {
382             return $error;
383         }
384 
385         return true;
386     }
.PP
.fi

.SS "getCliExe ()"
Gets the path to the PostgreSQL command line interface executable\&.

.PP
\fBReturns\fP
.RS 4
string The path to the CLI executable\&. 
.RE
.PP

.PP
Definition at line \fB605\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
606     {
607         return $this\->cliExe;
608     }
.PP
.fi

.PP
References \fB$cliExe\fP\&.
.PP
Referenced by \fBgetCmdLineOutput()\fP\&.
.SS "getCmdLineOutput ( $cmd)"
Executes a PostgreSQL command line instruction and returns the output\&.

.PP
\fBParameters\fP
.RS 4
\fI$cmd\fP The command to execute\&.
.RE
.PP
\fBReturns\fP
.RS 4
string|null The output of the command, or null if the command failed\&. 
.RE
.PP

.PP
Definition at line \fB508\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
509     {
510         $result = null;
511 
512         $bin = $this\->getCliExe();
513         if ( file_exists( $bin ) ) {
514             $tmpResult = Batch::exec( 'postgresqlGetCmdLineOutput', '"' \&. $bin \&. '" ' \&. $cmd );
515             if ( $tmpResult !== false && is_array( $tmpResult ) ) {
516                 $result = trim( str_replace( $bin, '', implode( PHP_EOL, $tmpResult ) ) );
517             }
518         }
519 
520         return $result;
521     }
.PP
.fi

.PP
References \fB$result\fP, \fBBatch\\exec()\fP, and \fBgetCliExe()\fP\&.
.SS "getConf ()"
Gets the path to the PostgreSQL configuration file\&.

.PP
\fBReturns\fP
.RS 4
string The path to the configuration file\&. 
.RE
.PP

.PP
Definition at line \fB635\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
636     {
637         return $this\->conf;
638     }
.PP
.fi

.PP
References \fB$conf\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "getCtlExe ()"
Gets the path to the PostgreSQL control executable\&.

.PP
\fBReturns\fP
.RS 4
string The path to the control executable\&. 
.RE
.PP

.PP
Definition at line \fB595\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
596     {
597         return $this\->ctlExe;
598     }
.PP
.fi

.PP
References \fB$ctlExe\fP\&.
.SS "getDumpAllExe ()"
Gets the path to the PostgreSQL dump all executable\&.

.PP
\fBReturns\fP
.RS 4
string The path to the dump all executable\&. 
.RE
.PP

.PP
Definition at line \fB625\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
626     {
627         return $this\->dumpAllExe;
628     }
.PP
.fi

.PP
References \fB$dumpAllExe\fP\&.
.SS "getDumpExe ()"
Gets the path to the PostgreSQL dump executable\&.

.PP
\fBReturns\fP
.RS 4
string The path to the dump executable\&. 
.RE
.PP

.PP
Definition at line \fB615\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
616     {
617         return $this\->dumpExe;
618     }
.PP
.fi

.PP
References \fB$dumpExe\fP\&.
.SS "getErrorLog ()"
Gets the path to the PostgreSQL error log file\&.

.PP
\fBReturns\fP
.RS 4
string The path to the error log file\&. 
.RE
.PP

.PP
Definition at line \fB585\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
586     {
587         return $this\->errorLog;
588     }
.PP
.fi

.PP
References \fB$errorLog\fP\&.
.SS "getHbaConf ()"
Gets the path to the PostgreSQL host-based authentication configuration file\&.

.PP
\fBReturns\fP
.RS 4
string The path to the HBA configuration file\&. 
.RE
.PP

.PP
Definition at line \fB645\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
646     {
647         return $this\->hbaConf;
648     }
.PP
.fi

.PP
References \fB$hbaConf\fP\&.
.SS "getPort ()"
Gets the port number used by PostgreSQL\&.

.PP
\fBReturns\fP
.RS 4
int The port number\&. 
.RE
.PP

.PP
Definition at line \fB655\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
656     {
657         return $this\->port;
658     }
.PP
.fi

.PP
References \fB$port\fP\&.
.SS "getRootPwd ()"
Gets the root password for PostgreSQL\&.

.PP
\fBReturns\fP
.RS 4
string The root password\&. 
.RE
.PP

.PP
Definition at line \fB695\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
696     {
697         return $this\->rootPwd;
698     }
.PP
.fi

.PP
References \fB$rootPwd\fP\&.
.SS "getRootUser ()"
Gets the root user for PostgreSQL\&.

.PP
\fBReturns\fP
.RS 4
string The root user\&. 
.RE
.PP

.PP
Definition at line \fB675\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
676     {
677         return $this\->rootUser;
678     }
.PP
.fi

.PP
References \fB$rootUser\fP\&.
.SS "getService ()"
Gets the service object for PostgreSQL\&.

.PP
\fBReturns\fP
.RS 4
\fBWin32Service\fP The service object\&. 
.RE
.PP

.PP
Definition at line \fB541\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
542     {
543         return $this\->service;
544     }
.PP
.fi

.PP
References \fB$service\fP\&.
.SS "handleNonPostgresUsage ( $port,  $showWindow,  $boxTitle)\fR [private]\fP"
Handles non-PostgreSQL port usage scenarios 
.PP
Definition at line \fB282\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
283     {
284         global $bearsamppLang, $bearsamppWinbinder;
285 
286         if (Util::isPortInUse($port)) {
287             Util::logDebug($this\->getName() \&. " port $port used by non\-PostgreSQL service");
288             if ($showWindow) {
289                 $bearsamppWinbinder\->messageBoxWarning(
290                     sprintf($bearsamppLang\->getValue(Lang::PORT_USED_BY_ANOTHER_DBMS), $port),
291                     $boxTitle
292                 );
293             }
294             return false;
295         }
296 
297         Util::logDebug($this\->getName() \&. " port $port not in use");
298         if ($showWindow) {
299             $bearsamppWinbinder\->messageBoxError(
300                 sprintf($bearsamppLang\->getValue(Lang::PORT_NOT_USED), $port),
301                 $boxTitle
302             );
303         }
304         return false;
305     }
.PP
.fi

.PP
References \fB$bearsamppLang\fP, \fB$port\fP, \fBModule\\getName()\fP, \fBUtil\\isPortInUse()\fP, \fBUtil\\logDebug()\fP, \fBLang\\PORT_NOT_USED\fP, and \fBLang\\PORT_USED_BY_ANOTHER_DBMS\fP\&.
.PP
Referenced by \fBcheckPort()\fP\&.
.SS "initData ( $path = \fRnull\fP)"
Initializes the data directory for PostgreSQL if it does not already exist\&.

.PP
\fBParameters\fP
.RS 4
\fI$path\fP The path to the PostgreSQL data directory\&. If null, the current path is used\&. 
.RE
.PP

.PP
Definition at line \fB477\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
478     {
479         $path = $path != null ? $path : $this\->getCurrentPath();
480 
481         if ( file_exists( $path \&. '/data' ) ) {
482             return;
483         }
484 
485         Batch::initializePostgresql( $path );
486     }
.PP
.fi

.PP
References \fBModule\\getCurrentPath()\fP, and \fBBatch\\initializePostgresql()\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "rebuildConf ()"
Rebuilds the PostgreSQL configuration files by updating the port number\&. 
.PP
Definition at line \fB491\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
492     {
493         Util::replaceInFile( $this\->conf, array(
494             '/^port(\&.*?)=(\&.*?)(\\d+)/' => 'port = ' \&. $this\->port
495         ) );
496         Util::replaceInFile( $this\->altConf, array(
497             '/^port(\&.*?)=(\&.*?)(\\d+)/' => 'port = ' \&. $this\->port
498         ) );
499     }
.PP
.fi

.PP
References \fBUtil\\replaceInFile()\fP\&.
.SS "reload ( $id = \fRnull\fP,  $type = \fRnull\fP)"
Reloads the module configuration based on the provided ID and type\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. If null, the current ID is used\&. 
.br
\fI$type\fP The type of the module\&. If null, the current type is used\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB69\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
70     {
71         global $bearsamppRoot, $bearsamppConfig, $bearsamppLang;
72         Util::logReloadClass( $this );
73 
74         $this\->name    = $bearsamppLang\->getValue( Lang::POSTGRESQL );
75         $this\->version = $bearsamppConfig\->getRaw( self::ROOT_CFG_VERSION );
76         parent::reload( $id, $type );
77 
78         $this\->enable   = $this\->enable && $bearsamppConfig\->getRaw( self::ROOT_CFG_ENABLE );
79         $this\->service  = new Win32Service( self::SERVICE_NAME );
80         $this\->errorLog = $bearsamppRoot\->getLogsPath() \&. '/postgresql\&.log';
81 
82         if ( $this\->bearsamppConfRaw !== false ) {
83             $this\->ctlExe     = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CTL_EXE];
84             $this\->cliExe     = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CLI_EXE];
85             $this\->dumpExe    = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_DUMP_EXE];
86             $this\->dumpAllExe = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_DUMP_ALL_EXE];
87             $this\->conf       = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_CONF];
88             $this\->hbaConf    = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_HBA_CONF];
89             $this\->altConf    = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_ALT_CONF];
90             $this\->altHbaConf = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_ALT_HBA_CONF];
91             $this\->port       = $this\->bearsamppConfRaw[self::LOCAL_CFG_PORT];
92             $this\->rootUser   = isset( $this\->bearsamppConfRaw[self::LOCAL_CFG_ROOT_USER] ) ? $this\->bearsamppConfRaw[self::LOCAL_CFG_ROOT_USER] : 'postgres';
93             $this\->rootPwd    = isset( $this\->bearsamppConfRaw[self::LOCAL_CFG_ROOT_PWD] ) ? $this\->bearsamppConfRaw[self::LOCAL_CFG_ROOT_PWD] : '';
94         }
95 
96         if ( !$this\->enable ) {
97             Util::logInfo( $this\->name \&. ' is not enabled!' );
98 
99             return;
100         }
101         if ( !is_dir( $this\->currentPath ) ) {
102             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_FILE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->currentPath ) );
103 
104             return;
105         }
106         if ( !is_dir( $this\->symlinkPath ) ) {
107             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_FILE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->symlinkPath ) );
108 
109             return;
110         }
111         if ( !is_file( $this\->bearsamppConf ) ) {
112             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_CONF_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->bearsamppConf ) );
113 
114             return;
115         }
116         if ( !file_exists( $this\->conf ) ) {
117             $this\->conf = $this\->altConf;
118         }
119         if ( !file_exists( $this\->hbaConf ) ) {
120             $this\->hbaConf = $this\->altHbaConf;
121         }
122 
123         if ( !is_file( $this\->ctlExe ) ) {
124             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_EXE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->ctlExe ) );
125 
126             return;
127         }
128         if ( !is_file( $this\->cliExe ) ) {
129             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_EXE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->cliExe ) );
130 
131             return;
132         }
133         if ( !is_file( $this\->dumpExe ) ) {
134             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_EXE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->dumpExe ) );
135 
136             return;
137         }
138         if ( !is_file( $this\->dumpAllExe ) ) {
139             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_EXE_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->dumpAllExe ) );
140 
141             return;
142         }
143         if ( !is_file( $this\->conf ) ) {
144             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_CONF_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->conf ) );
145 
146             return;
147         }
148         if ( !is_file( $this\->hbaConf ) ) {
149             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_CONF_NOT_FOUND ), $this\->name \&. ' ' \&. $this\->version, $this\->hbaConf ) );
150 
151             return;
152         }
153         if ( !is_numeric( $this\->port ) || $this\->port <= 0 ) {
154             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_INVALID_PARAMETER ), self::LOCAL_CFG_PORT, $this\->port ) );
155 
156             return;
157         }
158         if ( empty( $this\->rootUser ) ) {
159             Util::logError( sprintf( $bearsamppLang\->getValue( Lang::ERROR_INVALID_PARAMETER ), self::LOCAL_CFG_ROOT_USER, $this\->rootUser ) );
160 
161             return;
162         }
163 
164         $this\->service\->setDisplayName( APP_TITLE \&. ' ' \&. $this\->getName() );
165         $this\->service\->setBinPath( $this\->ctlExe );
166         $this\->service\->setStartType( Win32Service::SERVICE_DEMAND_START );
167         $this\->service\->setErrorControl( Win32Service::SERVER_ERROR_NORMAL );
168     }
.PP
.fi

.PP
References \fB$altConf\fP, \fB$altHbaConf\fP, \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fB$bearsamppRoot\fP, \fBModule\\$id\fP, \fBModule\\$type\fP, \fBAPP_TITLE\fP, \fBLang\\ERROR_CONF_NOT_FOUND\fP, \fBLang\\ERROR_EXE_NOT_FOUND\fP, \fBLang\\ERROR_FILE_NOT_FOUND\fP, \fBLang\\ERROR_INVALID_PARAMETER\fP, \fBModule\\getName()\fP, \fBUtil\\logError()\fP, \fBUtil\\logInfo()\fP, \fBUtil\\logReloadClass()\fP, \fBLang\\POSTGRESQL\fP, \fBWin32Service\\SERVER_ERROR_NORMAL\fP, and \fBWin32Service\\SERVICE_DEMAND_START\fP\&.
.PP
Referenced by \fB__construct()\fP, \fBsetEnable()\fP, and \fBsetVersion()\fP\&.
.SS "replaceAll ( $params)\fR [protected]\fP"
Replaces multiple key-value pairs in the configuration file\&.

.PP
\fBParameters\fP
.RS 4
\fI$params\fP An associative array of key-value pairs to replace\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB175\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
176     {
177         $content = file_get_contents( $this\->bearsamppConf );
178 
179         foreach ( $params as $key => $value ) {
180             $content                      = preg_replace( '|' \&. $key \&. ' = \&.*|', $key \&. ' = ' \&. '"' \&. $value \&. '"', $content );
181             $this\->bearsamppConfRaw[$key] = $value;
182             switch ( $key ) {
183                 case self::LOCAL_CFG_PORT:
184                     $this\->port = $value;
185                     break;
186                 case self::LOCAL_CFG_ROOT_USER:
187                     $this\->rootUser = $value;
188                     break;
189                 case self::LOCAL_CFG_ROOT_PWD:
190                     $this\->rootPwd = $value;
191                     break;
192             }
193         }
194 
195         file_put_contents( $this\->bearsamppConf, $content );
196     }
.PP
.fi

.SS "setEnable ( $enabled,  $showWindow = \fRfalse\fP)"
Enables or disables the PostgreSQL module\&.

.PP
\fBParameters\fP
.RS 4
\fI$enabled\fP Whether to enable or disable the module\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&. 
.RE
.PP

.PP
Definition at line \fB552\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
553     {
554         global $bearsamppConfig, $bearsamppLang, $bearsamppWinbinder;
555 
556         if ( $enabled == Config::ENABLED && !is_dir( $this\->currentPath ) ) {
557             Util::logDebug( $this\->getName() \&. ' cannot be enabled because bundle ' \&. $this\->getVersion() \&. ' does not exist in ' \&. $this\->currentPath );
558             if ( $showWindow ) {
559                 $bearsamppWinbinder\->messageBoxError(
560                     sprintf( $bearsamppLang\->getValue( Lang::ENABLE_BUNDLE_NOT_EXIST ), $this\->getName(), $this\->getVersion(), $this\->currentPath ),
561                     sprintf( $bearsamppLang\->getValue( Lang::ENABLE_TITLE ), $this\->getName() )
562                 );
563             }
564             $enabled = Config::DISABLED;
565         }
566 
567         Util::logInfo( $this\->getName() \&. ' switched to ' \&. ($enabled == Config::ENABLED ? 'enabled' : 'disabled') );
568         $this\->enable = $enabled == Config::ENABLED;
569         $bearsamppConfig\->replace( self::ROOT_CFG_ENABLE, $enabled );
570 
571         $this\->reload();
572         if ( $this\->enable ) {
573             Util::installService( $this, $this\->port, null, $showWindow );
574         }
575         else {
576             Util::removeService( $this\->service, $this\->name );
577         }
578     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fBConfig\\DISABLED\fP, \fBLang\\ENABLE_BUNDLE_NOT_EXIST\fP, \fBLang\\ENABLE_TITLE\fP, \fBConfig\\ENABLED\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\installService()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logInfo()\fP, \fBreload()\fP, and \fBUtil\\removeService()\fP\&.
.SS "setPort ( $port)"
Sets the port number used by PostgreSQL\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The port number to set\&. 
.RE
.PP

.PP
Definition at line \fB665\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
666     {
667         $this\->replace( self::LOCAL_CFG_PORT, $port );
668     }
.PP
.fi

.PP
References \fB$port\fP, and \fBModule\\replace()\fP\&.
.PP
Referenced by \fBchangePort()\fP\&.
.SS "setRootPwd ( $rootPwd)"
Sets the root password for PostgreSQL\&.

.PP
\fBParameters\fP
.RS 4
\fI$rootPwd\fP The root password to set\&. 
.RE
.PP

.PP
Definition at line \fB705\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
706     {
707         $this\->replace( self::LOCAL_CFG_ROOT_PWD, $rootPwd );
708     }
.PP
.fi

.PP
References \fB$rootPwd\fP, and \fBModule\\replace()\fP\&.
.PP
Referenced by \fBchangeRootPassword()\fP\&.
.SS "setRootUser ( $rootUser)"
Sets the root user for PostgreSQL\&.

.PP
\fBParameters\fP
.RS 4
\fI$rootUser\fP The root user to set\&. 
.RE
.PP

.PP
Definition at line \fB685\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
686     {
687         $this\->replace( self::LOCAL_CFG_ROOT_USER, $rootUser );
688     }
.PP
.fi

.PP
References \fB$rootUser\fP, and \fBModule\\replace()\fP\&.
.SS "setVersion ( $version)"
Sets the version of PostgreSQL and reloads the configuration\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to set\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB528\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
529     {
530         global $bearsamppConfig;
531         $this\->version = $version;
532         $bearsamppConfig\->replace( self::ROOT_CFG_VERSION, $version );
533         $this\->reload();
534     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fBModule\\$version\fP, and \fBreload()\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "switchVersion ( $version,  $showWindow = \fRfalse\fP)"
Switches the PostgreSQL version\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to switch to\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the version was switched successfully, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB396\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
397     {
398         Util::logDebug( 'Switch ' \&. $this\->name \&. ' version to ' \&. $version );
399 
400         return $this\->updateConfig( $version, 0, $showWindow );
401     }
.PP
.fi

.PP
References \fBModule\\$version\fP, \fBUtil\\logDebug()\fP, and \fBupdateConfig()\fP\&.
.SS "updateConfig ( $version = \fRnull\fP,  $sub = \fR0\fP,  $showWindow = \fRfalse\fP)\fR [protected]\fP"
Updates the PostgreSQL configuration\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to update to\&. If null, the current version is used\&. 
.br
\fI$sub\fP The sub-level for logging indentation\&. 
.br
\fI$showWindow\fP Whether to show a window during the update process\&.
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the configuration was updated successfully, false otherwise\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB412\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.nf
413     {
414         global $bearsamppLang, $bearsamppApps, $bearsamppWinbinder;
415 
416         if ( !$this\->enable ) {
417             return true;
418         }
419 
420         $version = $version == null ? $this\->version : $version;
421         Util::logDebug( ($sub > 0 ? str_repeat( ' ', 2 * $sub ) : '') \&. 'Update ' \&. $this\->name \&. ' ' \&. $version \&. ' config' );
422 
423         $boxTitle = sprintf( $bearsamppLang\->getValue( Lang::SWITCH_VERSION_TITLE ), $this\->getName(), $version );
424 
425         $currentPath   = str_replace( 'postgresql' \&. $this\->getVersion(), 'postgresql' \&. $version, $this\->getCurrentPath() );
426         $conf          = str_replace( 'postgresql' \&. $this\->getVersion(), 'postgresql' \&. $version, $this\->getConf() );
427         $bearsamppConf = str_replace( 'postgresql' \&. $this\->getVersion(), 'postgresql' \&. $version, $this\->bearsamppConf );
428 
429         if ( $this\->version != $version ) {
430             $this\->initData( $currentPath );
431         }
432 
433         if ( !file_exists( $conf ) || !file_exists( $bearsamppConf ) ) {
434             Util::logError( 'bearsampp config files not found for ' \&. $this\->getName() \&. ' ' \&. $version );
435             if ( $showWindow ) {
436                 $bearsamppWinbinder\->messageBoxError(
437                     sprintf( $bearsamppLang\->getValue( Lang::BEARSAMPP_CONF_NOT_FOUND_ERROR ), $this\->getName() \&. ' ' \&. $version ),
438                     $boxTitle
439                 );
440             }
441 
442             return false;
443         }
444 
445         $bearsamppConfRaw = parse_ini_file( $bearsamppConf );
446         if ( $bearsamppConfRaw === false || !isset( $bearsamppConfRaw[self::ROOT_CFG_VERSION] ) || $bearsamppConfRaw[self::ROOT_CFG_VERSION] != $version ) {
447             Util::logError( 'bearsampp config file malformed for ' \&. $this\->getName() \&. ' ' \&. $version );
448             if ( $showWindow ) {
449                 $bearsamppWinbinder\->messageBoxError(
450                     sprintf( $bearsamppLang\->getValue( Lang::BEARSAMPP_CONF_MALFORMED_ERROR ), $this\->getName() \&. ' ' \&. $version ),
451                     $boxTitle
452                 );
453             }
454 
455             return false;
456         }
457 
458         // bearsampp\&.conf
459         $this\->setVersion( $version );
460 
461         // conf
462         Util::replaceInFile( $this\->getConf(), array(
463             '/^port(\&.*?)=(\&.*?)(\\d+)/' => 'port = ' \&. $this\->port
464         ) );
465 
466         // phppgadmin
467         $bearsamppApps\->getPhppgadmin()\->update( $sub + 1 );
468 
469         return true;
470     }
.PP
.fi

.PP
References \fBModule\\$bearsamppConf\fP, \fBModule\\$bearsamppConfRaw\fP, \fB$bearsamppLang\fP, \fB$conf\fP, \fBModule\\$currentPath\fP, \fBModule\\$version\fP, \fBLang\\BEARSAMPP_CONF_MALFORMED_ERROR\fP, \fBLang\\BEARSAMPP_CONF_NOT_FOUND_ERROR\fP, \fBgetConf()\fP, \fBModule\\getCurrentPath()\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBinitData()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBUtil\\replaceInFile()\fP, \fBsetVersion()\fP, and \fBLang\\SWITCH_VERSION_TITLE\fP\&.
.PP
Referenced by \fBswitchVersion()\fP\&.
.SH "Field Documentation"
.PP 
.SS "$altConf\fR [private]\fP"

.PP
Definition at line \fB45\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBreload()\fP\&.
.SS "$altHbaConf\fR [private]\fP"

.PP
Definition at line \fB46\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBreload()\fP\&.
.SS "$cliExe\fR [private]\fP"

.PP
Definition at line \fB40\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetCliExe()\fP\&.
.SS "$conf\fR [private]\fP"

.PP
Definition at line \fB43\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetConf()\fP, and \fBupdateConfig()\fP\&.
.SS "$ctlExe\fR [private]\fP"

.PP
Definition at line \fB39\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetCtlExe()\fP\&.
.SS "$dumpAllExe\fR [private]\fP"

.PP
Definition at line \fB42\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetDumpAllExe()\fP\&.
.SS "$dumpExe\fR [private]\fP"

.PP
Definition at line \fB41\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetDumpExe()\fP\&.
.SS "$errorLog\fR [private]\fP"

.PP
Definition at line \fB38\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetErrorLog()\fP\&.
.SS "$hbaConf\fR [private]\fP"

.PP
Definition at line \fB44\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetHbaConf()\fP\&.
.SS "$port\fR [private]\fP"

.PP
Definition at line \fB47\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBchangePort()\fP, \fBcheckPort()\fP, \fBgetPort()\fP, \fBhandleNonPostgresUsage()\fP, and \fBsetPort()\fP\&.
.SS "$rootPwd\fR [private]\fP"

.PP
Definition at line \fB49\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetRootPwd()\fP, and \fBsetRootPwd()\fP\&.
.SS "$rootUser\fR [private]\fP"

.PP
Definition at line \fB48\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetRootUser()\fP, and \fBsetRootUser()\fP\&.
.SS "$service\fR [private]\fP"

.PP
Definition at line \fB37\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBgetService()\fP\&.
.SS "const CMD_VERSION = '\-\-version'"

.PP
Definition at line \fB35\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBActionDebugPostgresql\\__construct()\fP, and \fBTplAppPostgresql\\getMenuPostgresqlDebug()\fP\&.
.SS "const LOCAL_CFG_ALT_CONF = 'postgresqlAltConf'"

.PP
Definition at line \fB29\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_ALT_HBA_CONF = 'postgresqlAltUserConf'"

.PP
Definition at line \fB30\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_CLI_EXE = 'postgresqlCliExe'"

.PP
Definition at line \fB24\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_CONF = 'postgresqlConf'"

.PP
Definition at line \fB27\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_CTL_EXE = 'postgresqlCtlExe'"

.PP
Definition at line \fB23\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_DUMP_ALL_EXE = 'postgresqlDumpAllExe'"

.PP
Definition at line \fB26\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_DUMP_EXE = 'postgresqlDumpExe'"

.PP
Definition at line \fB25\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_HBA_CONF = 'postgresqlUserConf'"

.PP
Definition at line \fB28\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_PORT = 'postgresqlPort'"

.PP
Definition at line \fB31\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_ROOT_PWD = 'postgresqlRootPwd'"

.PP
Definition at line \fB33\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const LOCAL_CFG_ROOT_USER = 'postgresqlRootUser'"

.PP
Definition at line \fB32\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const ROOT_CFG_ENABLE = 'postgresqlEnable'"

.PP
Definition at line \fB20\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const ROOT_CFG_VERSION = 'postgresqlVersion'"

.PP
Definition at line \fB21\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.SS "const SERVICE_NAME = 'bearsampppostgresql'"

.PP
Definition at line \fB18\fP of file \fBclass\&.bin\&.postgresql\&.php\fP\&.
.PP
Referenced by \fBActionService\\__construct()\fP, \fBWin32Service\\create()\fP, \fBWin32Service\\delete()\fP, \fBTplAppPostgresql\\getActionInstallPostgresqlService()\fP, \fBTplAppPostgresql\\getActionRemovePostgresqlService()\fP, \fBBins\\getServices()\fP, \fBBatch\\installPostgresqlService()\fP, \fBActionStartup\\installServices()\fP, \fBActionQuit\\processWindow()\fP, \fBWin32Service\\start()\fP, and \fBBatch\\uninstallPostgresqlService()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
