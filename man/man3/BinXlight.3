.TH "BinXlight" 3 "Version 2025.8.29" "Bearsampp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BinXlight
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBModule\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__construct\fP ($id, $type)"
.br
.ti -1c
.RI "\fBchangePort\fP ($port, $checkUsed=false, $wbProgressBar=null)"
.br
.ti -1c
.RI "\fBcheckPort\fP ($port, $showWindow=false)"
.br
.ti -1c
.RI "\fBgetExe\fP ()"
.br
.ti -1c
.RI "\fBgetLog\fP ()"
.br
.ti -1c
.RI "\fBgetPort\fP ()"
.br
.ti -1c
.RI "\fBgetService\fP ()"
.br
.ti -1c
.RI "\fBgetUiPort\fP ()"
.br
.ti -1c
.RI "\fBrebuildConf\fP ()"
.br
.ti -1c
.RI "\fBreload\fP ($id=null, $type=null)"
.br
.ti -1c
.RI "\fBsetEnable\fP ($enabled, $showWindow=false)"
.br
.ti -1c
.RI "\fBsetPort\fP ($port)"
.br
.ti -1c
.RI "\fBsetSslPort\fP ($SslPort)"
.br
.ti -1c
.RI "\fBsetVersion\fP ($version)"
.br
.ti -1c
.RI "\fBswitchVersion\fP ($version, $showWindow=false)"
.br
.in -1c

Public Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__toString\fP ()"
.br
.ti -1c
.RI "\fBgetCurrentPath\fP ()"
.br
.ti -1c
.RI "\fBgetId\fP ()"
.br
.ti -1c
.RI "\fBgetName\fP ()"
.br
.ti -1c
.RI "\fBgetRelease\fP ()"
.br
.ti -1c
.RI "\fBgetRootPath\fP ()"
.br
.ti -1c
.RI "\fBgetSymlinkPath\fP ()"
.br
.ti -1c
.RI "\fBgetType\fP ()"
.br
.ti -1c
.RI "\fBgetVersion\fP ()"
.br
.ti -1c
.RI "\fBgetVersionList\fP ()"
.br
.ti -1c
.RI "\fBisEnable\fP ()"
.br
.ti -1c
.RI "\fBupdate\fP ($sub=0, $showWindow=false)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const \fBLOCAL_CFG_EXE\fP = 'xlightExe'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_PORT\fP = 'xlightPort'"
.br
.ti -1c
.RI "const \fBLOCAL_CFG_SSL_PORT\fP = 'xlightSslPort'"
.br
.ti -1c
.RI "const \fBROOT_CFG_ENABLE\fP = 'xlightEnable'"
.br
.ti -1c
.RI "const \fBROOT_CFG_VERSION\fP = 'xlightVersion'"
.br
.ti -1c
.RI "const \fBSERVICE_NAME\fP = 'bearsamppxlight'"
.br
.ti -1c
.RI "const \fBSERVICE_PARAMS\fP = ' \-startall'"
.br
.in -1c

Data Fields inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "const \fBBUNDLE_RELEASE\fP = 'bundleRelease'"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBreplaceAll\fP ($params)"
.br
.ti -1c
.RI "\fBupdateConfig\fP ($version=null, $sub=0, $showWindow=false)"
.br
.in -1c

Protected Member Functions inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB__construct\fP ()"
.br
.ti -1c
.RI "\fBreplace\fP ($key, $value)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB$exe\fP"
.br
.ti -1c
.RI "\fB$log\fP"
.br
.ti -1c
.RI "\fB$port\fP"
.br
.ti -1c
.RI "\fB$service\fP"
.br
.ti -1c
.RI "\fB$SslPort\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Attributes inherited from \fBModule\fP
.in +1c
.ti -1c
.RI "\fB$bearsamppConf\fP"
.br
.ti -1c
.RI "\fB$bearsamppConfRaw\fP"
.br
.ti -1c
.RI "\fB$currentPath\fP"
.br
.ti -1c
.RI "\fB$enable\fP"
.br
.ti -1c
.RI "\fB$name\fP"
.br
.ti -1c
.RI "\fB$release\fP = 'N/A'"
.br
.ti -1c
.RI "\fB$rootPath\fP"
.br
.ti -1c
.RI "\fB$symlinkPath\fP"
.br
.ti -1c
.RI "\fB$version\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBBinXlight\fP

.PP
This class represents the Xlight FTP server module in the \fBBearsampp\fP application\&. It handles the configuration, initialization, and management of the Xlight FTP server\&. 
.PP
Definition at line \fB17\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct ( $id,  $type)"
Constructs a \fBBinXlight\fP object and initializes the module\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. 
.br
\fI$type\fP The type of the module\&. 
.RE
.PP

.PP
Definition at line \fB42\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
42                                             {
43         Util::logInitClass($this);
44         $this\->reload($id, $type);
45     }
.PP
.fi

.PP
References \fBModule\\$id\fP, \fBModule\\$type\fP, \fBUtil\\logInitClass()\fP, and \fBreload()\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "changePort ( $port,  $checkUsed = \fRfalse\fP,  $wbProgressBar = \fRnull\fP)"
Changes the port used by the Xlight FTP server\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The new port number\&. 
.br
\fI$checkUsed\fP Whether to check if the port is already in use\&. 
.br
\fI$wbProgressBar\fP The progress bar object for UI updates (optional)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool|int True if the port was successfully changed, false if invalid, or the process using the port\&. 
.RE
.PP

.PP
Definition at line \fB168\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
168                                                                                  {
169         global $bearsamppWinbinder;
170 
171         if (!Util::isValidPort($port)) {
172             Util::logError($this\->getName() \&. ' port not valid: ' \&. $port);
173             return false;
174         }
175 
176         $port = intval($port);
177         $bearsamppWinbinder\->incrProgressBar($wbProgressBar);
178 
179         $isPortInUse = Util::isPortInUse($port);
180         if (!$checkUsed || $isPortInUse === false) {
181             // bearsampp\&.conf
182             $this\->setPort($port);
183             $bearsamppWinbinder\->incrProgressBar($wbProgressBar);
184 
185             // conf
186             $this\->update();
187             $bearsamppWinbinder\->incrProgressBar($wbProgressBar);
188 
189             return true;
190         }
191 
192         Util::logDebug($this\->getName() \&. ' port in used: ' \&. $port \&. ' \- ' \&. $isPortInUse);
193         return $isPortInUse;
194     }
.PP
.fi

.PP
References \fB$port\fP, \fBModule\\getName()\fP, \fBUtil\\isPortInUse()\fP, \fBUtil\\isValidPort()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBsetPort()\fP, and \fBModule\\update()\fP\&.
.SS "checkPort ( $port,  $showWindow = \fRfalse\fP)"
Checks if a port is used by the Xlight FTP server\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The port number to check\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the port is used by Xlight, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB203\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
203                                                           {
204         global $bearsamppLang, $bearsamppWinbinder;
205         $boxTitle = sprintf($bearsamppLang\->getValue(Lang::CHECK_PORT_TITLE), $this\->getName(), $port);
206 
207         if (!Util::isValidPort($port)) {
208             Util::logError($this\->getName() \&. ' port not valid: ' \&. $port);
209             return false;
210         }
211 
212         $headers = Util::getHeaders('127\&.0\&.0\&.1', $port);
213         if (!empty($headers)) {
214             if (Util::contains($headers[0], 'Xlight')) {
215                 Util::logDebug($this\->getName() \&. ' port ' \&. $port \&. ' is used by: ' \&. str_replace('220 ', '', $headers[0]));
216                 if ($showWindow) {
217                     $bearsamppWinbinder\->messageBoxInfo(
218                         sprintf($bearsamppLang\->getValue(Lang::PORT_USED_BY), $port, str_replace('220 ', '', $headers[0])),
219                         $boxTitle
220                     );
221                 }
222                 return true;
223             }
224             Util::logDebug($this\->getName() \&. ' port ' \&. $port \&. ' is used by another application');
225             if ($showWindow) {
226                 $bearsamppWinbinder\->messageBoxWarning(
227                     sprintf($bearsamppLang\->getValue(Lang::PORT_NOT_USED_BY), $port),
228                     $boxTitle
229                 );
230             }
231         } else {
232             Util::logDebug($this\->getName() \&. ' port ' \&. $port \&. ' is not used');
233             if ($showWindow) {
234                 $bearsamppWinbinder\->messageBoxError(
235                     sprintf($bearsamppLang\->getValue(Lang::PORT_NOT_USED), $port),
236                     $boxTitle
237                 );
238             }
239         }
240 
241         return false;
242     }
.PP
.fi

.PP
References \fB$bearsamppLang\fP, \fB$port\fP, \fBLang\\CHECK_PORT_TITLE\fP, \fBUtil\\contains()\fP, \fBUtil\\getHeaders()\fP, \fBModule\\getName()\fP, \fBUtil\\isValidPort()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBLang\\PORT_NOT_USED\fP, \fBLang\\PORT_NOT_USED_BY\fP, and \fBLang\\PORT_USED_BY\fP\&.
.SS "getExe ()"
Gets the executable file path for the Xlight FTP server\&.

.PP
\fBReturns\fP
.RS 4
string The executable file path\&. 
.RE
.PP

.PP
Definition at line \fB373\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
373                              {
374         return $this\->exe;
375     }
.PP
.fi

.PP
References \fB$exe\fP\&.
.SS "getLog ()"
Gets the log file path for the Xlight FTP server\&.

.PP
\fBReturns\fP
.RS 4
string The log file path\&. 
.RE
.PP

.PP
Definition at line \fB364\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
364                              {
365         return $this\->log;
366     }
.PP
.fi

.PP
References \fB$log\fP\&.
.SS "getPort ()"
Gets the port used by the Xlight FTP server\&.

.PP
\fBReturns\fP
.RS 4
int The port number\&. 
.RE
.PP

.PP
Definition at line \fB400\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
400                               {
401         return $this\->port;
402     }
.PP
.fi

.PP
References \fB$port\fP\&.
.SS "getService ()"
Gets the service object for the Xlight FTP server\&.

.PP
\fBReturns\fP
.RS 4
\fBWin32Service\fP The service object\&. 
.RE
.PP

.PP
Definition at line \fB323\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
323                                  {
324         return $this\->service;
325     }
.PP
.fi

.PP
References \fB$service\fP\&.
.SS "getUiPort ()"
Gets the SSL port used by the Xlight FTP server\&.

.PP
\fBReturns\fP
.RS 4
int The SSL port number\&. 
.RE
.PP

.PP
Definition at line \fB382\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
382                                 {
383         return $this\->SslPort;
384     }
.PP
.fi

.PP
References \fB$SslPort\fP\&.
.SS "rebuildConf ()"
Rebuilds the configuration in the Windows \fBRegistry\fP\&.

.PP
\fBReturns\fP
.RS 4
bool True if the configuration was successfully rebuilt, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB140\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
140                                   {
141         global $bearsamppRegistry;
142 
143         $exists = $bearsamppRegistry\->exists(
144             Registry::HKEY_LOCAL_MACHINE,
145             'SYSTEM\\CurrentControlSet\\Services\\\\' \&. self::SERVICE_NAME \&. '\\Parameters',
146             Nssm::INFO_APP_PARAMETERS
147         );
148         if ($exists) {
149             return $bearsamppRegistry\->setExpandStringValue(
150                 Registry::HKEY_LOCAL_MACHINE,
151                 'SYSTEM\\CurrentControlSet\\Services\\\\' \&. self::SERVICE_NAME \&. '\\Parameters',
152                 Nssm::INFO_APP_PARAMETERS,
153                 sprintf(self::SERVICE_PARAMS, $this\->SslPort, $this\->port)
154             );
155         }
156 
157         return false;
158     }
.PP
.fi

.PP
References \fBRegistry\\HKEY_LOCAL_MACHINE\fP, and \fBNssm\\INFO_APP_PARAMETERS\fP\&.
.SS "reload ( $id = \fRnull\fP,  $type = \fRnull\fP)"
Reloads the module configuration based on the provided ID and type\&.

.PP
\fBParameters\fP
.RS 4
\fI$id\fP The ID of the module\&. If null, the current ID is used\&. 
.br
\fI$type\fP The type of the module\&. If null, the current type is used\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB53\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
53                                                      {
54         global $bearsamppRoot, $bearsamppConfig, $bearsamppLang;
55         Util::logReloadClass($this);
56 
57         $this\->name = $bearsamppLang\->getValue(Lang::XLIGHT);
58         $this\->version = $bearsamppConfig\->getRaw(self::ROOT_CFG_VERSION);
59         parent::reload($id, $type);
60 
61         $this\->enable = $this\->enable && $bearsamppConfig\->getRaw(self::ROOT_CFG_ENABLE);
62         $this\->service = new Win32Service(self::SERVICE_NAME);
63         $this\->log = $bearsamppRoot\->getLogsPath() \&. '/xlight\&.log';
64 
65         if ($this\->bearsamppConfRaw !== false) {
66             $this\->exe = $this\->symlinkPath \&. '/' \&. $this\->bearsamppConfRaw[self::LOCAL_CFG_EXE];
67             $this\->SslPort = intval($this\->bearsamppConfRaw[self::LOCAL_CFG_SSL_PORT]);
68             $this\->port = intval($this\->bearsamppConfRaw[self::LOCAL_CFG_PORT]);
69         }
70 
71         if (!$this\->enable) {
72             Util::logInfo($this\->name \&. ' is not enabled!');
73             return;
74         }
75         if (!is_dir($this\->currentPath)) {
76             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_FILE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->currentPath));
77             return;
78         }
79         if (!is_dir($this\->symlinkPath)) {
80             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_FILE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->symlinkPath));
81             return;
82         }
83         if (!is_file($this\->bearsamppConf)) {
84             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_CONF_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->bearsamppConf));
85             return;
86         }
87         if (!is_file($this\->exe)) {
88             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_EXE_NOT_FOUND), $this\->name \&. ' ' \&. $this\->version, $this\->exe));
89             return;
90         }
91         if (empty($this\->SslPort)) {
92             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_INVALID_PARAMETER), self::LOCAL_CFG_SSL_PORT, $this\->SslPort));
93             return;
94         }
95         if (empty($this\->port)) {
96             Util::logError(sprintf($bearsamppLang\->getValue(Lang::ERROR_INVALID_PARAMETER), self::LOCAL_CFG_PORT, $this\->port));
97             return;
98         }
99 
100         $nssm = new Nssm(self::SERVICE_NAME);
101         $nssm\->setDisplayName(APP_TITLE \&. ' ' \&. $this\->getName());
102         $nssm\->setBinPath($this\->exe);
103         $nssm\->setParams(sprintf(self::SERVICE_PARAMS, $this\->SslPort, $this\->port));
104         $nssm\->setStart(Nssm::SERVICE_DEMAND_START);
105         $nssm\->setStdout($bearsamppRoot\->getLogsPath() \&. '/xlight\&.log');
106         $nssm\->setStderr($bearsamppRoot\->getLogsPath() \&. '/xlight\&.error\&.log');
107 
108         $this\->service\->setNssm($nssm);
109     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fB$bearsamppRoot\fP, \fBModule\\$id\fP, \fBModule\\$type\fP, \fBAPP_TITLE\fP, \fBLang\\ERROR_CONF_NOT_FOUND\fP, \fBLang\\ERROR_EXE_NOT_FOUND\fP, \fBLang\\ERROR_FILE_NOT_FOUND\fP, \fBLang\\ERROR_INVALID_PARAMETER\fP, \fBModule\\getName()\fP, \fBUtil\\logError()\fP, \fBUtil\\logInfo()\fP, \fBUtil\\logReloadClass()\fP, \fBNssm\\SERVICE_DEMAND_START\fP, and \fBLang\\XLIGHT\fP\&.
.PP
Referenced by \fB__construct()\fP, \fBsetEnable()\fP, and \fBsetVersion()\fP\&.
.SS "replaceAll ( $params)\fR [protected]\fP"
Replaces multiple key-value pairs in the configuration file\&.

.PP
\fBParameters\fP
.RS 4
\fI$params\fP An associative array of key-value pairs to replace\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB116\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
116                                            {
117         $content = file_get_contents($this\->bearsamppConf);
118 
119         foreach ($params as $key => $value) {
120             $content = preg_replace('|' \&. $key \&. ' = \&.*|', $key \&. ' = ' \&. '"' \&. $value\&.'"', $content);
121             $this\->bearsamppConfRaw[$key] = $value;
122             switch ($key) {
123                 case self::LOCAL_CFG_SSL_PORT:
124                     $this\->SslPort = intval($value);
125                     break;
126                 case self::LOCAL_CFG_PORT:
127                     $this\->port = intval($value);
128                     break;
129             }
130         }
131 
132         file_put_contents($this\->bearsamppConf, $content);
133     }
.PP
.fi

.SS "setEnable ( $enabled,  $showWindow = \fRfalse\fP)"
Enables or disables the Xlight FTP server\&.

.PP
\fBParameters\fP
.RS 4
\fI$enabled\fP Whether to enable or disable the server\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&. 
.RE
.PP

.PP
Definition at line \fB333\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
333                                                              {
334         global $bearsamppConfig, $bearsamppLang, $bearsamppWinbinder;
335 
336         if ($enabled == Config::ENABLED && !is_dir($this\->currentPath)) {
337             Util::logDebug($this\->getName() \&. ' cannot be enabled because bundle ' \&. $this\->getVersion() \&. ' does not exist in ' \&. $this\->currentPath);
338             if ($showWindow) {
339                 $bearsamppWinbinder\->messageBoxError(
340                     sprintf($bearsamppLang\->getValue(Lang::ENABLE_BUNDLE_NOT_EXIST), $this\->getName(), $this\->getVersion(), $this\->currentPath),
341                     sprintf($bearsamppLang\->getValue(Lang::ENABLE_TITLE), $this\->getName())
342                 );
343             }
344             $enabled = Config::DISABLED;
345         }
346 
347         Util::logInfo($this\->getName() \&. ' switched to ' \&. ($enabled == Config::ENABLED ? 'enabled' : 'disabled'));
348         $this\->enable = $enabled == Config::ENABLED;
349         $bearsamppConfig\->replace(self::ROOT_CFG_ENABLE, $enabled);
350 
351         $this\->reload();
352         if ($this\->enable) {
353             Util::installService($this, $this\->port, null, $showWindow);
354         } else {
355             Util::removeService($this\->service, $this\->name);
356         }
357     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fB$bearsamppLang\fP, \fBConfig\\DISABLED\fP, \fBLang\\ENABLE_BUNDLE_NOT_EXIST\fP, \fBLang\\ENABLE_TITLE\fP, \fBConfig\\ENABLED\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\installService()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logInfo()\fP, \fBreload()\fP, and \fBUtil\\removeService()\fP\&.
.SS "setPort ( $port)"
Sets the port for the Xlight FTP server\&.

.PP
\fBParameters\fP
.RS 4
\fI$port\fP The port number\&. 
.RE
.PP

.PP
Definition at line \fB409\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
409                                    {
410         $this\->replace(self::LOCAL_CFG_PORT, $port);
411     }
.PP
.fi

.PP
References \fB$port\fP, and \fBModule\\replace()\fP\&.
.PP
Referenced by \fBchangePort()\fP\&.
.SS "setSslPort ( $SslPort)"
Sets the SSL port for the Xlight FTP server\&.

.PP
\fBParameters\fP
.RS 4
\fI$SslPort\fP The SSL port number\&. 
.RE
.PP

.PP
Definition at line \fB391\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
391                                          {
392         $this\->replace(self::LOCAL_CFG_SSL_PORT, $SslPort);
393     }
.PP
.fi

.PP
References \fB$SslPort\fP, and \fBModule\\replace()\fP\&.
.SS "setVersion ( $version)"
Sets the version of the Xlight FTP server\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to set\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB311\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
311                                          {
312         global $bearsamppConfig;
313         $this\->version = $version;
314         $bearsamppConfig\->replace(self::ROOT_CFG_VERSION, $version);
315         $this\->reload();
316     }
.PP
.fi

.PP
References \fB$bearsamppConfig\fP, \fBModule\\$version\fP, and \fBreload()\fP\&.
.PP
Referenced by \fBupdateConfig()\fP\&.
.SS "switchVersion ( $version,  $showWindow = \fRfalse\fP)"
Switches the version of the Xlight FTP server\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to switch to\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the version was successfully switched, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB251\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
251                                                                  {
252         Util::logDebug('Switch ' \&. $this\->name \&. ' version to ' \&. $version);
253         return $this\->updateConfig($version, 0, $showWindow);
254     }
.PP
.fi

.PP
References \fBModule\\$version\fP, \fBUtil\\logDebug()\fP, and \fBupdateConfig()\fP\&.
.SS "updateConfig ( $version = \fRnull\fP,  $sub = \fR0\fP,  $showWindow = \fRfalse\fP)\fR [protected]\fP"
Updates the configuration of the Xlight FTP server\&.

.PP
\fBParameters\fP
.RS 4
\fI$version\fP The version to update to\&. If null, the current version is used\&. 
.br
\fI$sub\fP The sub-level for logging indentation\&. 
.br
\fI$showWindow\fP Whether to show a message box with the result\&. 
.RE
.PP
\fBReturns\fP
.RS 4
bool True if the configuration was successfully updated, false otherwise\&. 
.RE
.PP

.PP
Reimplemented from \fBModule\fP\&.
.PP
Definition at line \fB264\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.nf
264                                                                                     {
265         global $bearsamppLang, $bearsamppWinbinder;
266 
267         if (!$this\->enable) {
268             return true;
269         }
270 
271         $version = $version == null ? $this\->version : $version;
272         Util::logDebug(($sub > 0 ? str_repeat(' ', 2 * $sub) : '') \&. 'Update ' \&. $this\->name \&. ' ' \&. $version \&. ' config');
273 
274         $boxTitle = sprintf($bearsamppLang\->getValue(Lang::SWITCH_VERSION_TITLE), $this\->getName(), $version);
275 
276         $bearsamppConf = str_replace('xlight' \&. $this\->getVersion(), 'xlight' \&. $version, $this\->bearsamppConf);
277         if (!file_exists($bearsamppConf)) {
278             Util::logError('bearsampp config files not found for ' \&. $this\->getName() \&. ' ' \&. $version);
279             if ($showWindow) {
280                 $bearsamppWinbinder\->messageBoxError(
281                     sprintf($bearsamppLang\->getValue(Lang::BEARSAMPP_CONF_NOT_FOUND_ERROR), $this\->getName() \&. ' ' \&. $version),
282                     $boxTitle
283                 );
284             }
285             return false;
286         }
287 
288         $bearsamppConfRaw = parse_ini_file($bearsamppConf);
289         if ($bearsamppConfRaw === false || !isset($bearsamppConfRaw[self::ROOT_CFG_VERSION]) || $bearsamppConfRaw[self::ROOT_CFG_VERSION] != $version) {
290             Util::logError('bearsampp config file malformed for ' \&. $this\->getName() \&. ' ' \&. $version);
291             if ($showWindow) {
292                 $bearsamppWinbinder\->messageBoxError(
293                     sprintf($bearsamppLang\->getValue(Lang::BEARSAMPP_CONF_MALFORMED_ERROR), $this\->getName() \&. ' ' \&. $version),
294                     $boxTitle
295                 );
296             }
297             return false;
298         }
299 
300         // bearsampp\&.conf
301         $this\->setVersion($version);
302 
303         return true;
304     }
.PP
.fi

.PP
References \fBModule\\$bearsamppConf\fP, \fBModule\\$bearsamppConfRaw\fP, \fB$bearsamppLang\fP, \fBModule\\$version\fP, \fBLang\\BEARSAMPP_CONF_MALFORMED_ERROR\fP, \fBLang\\BEARSAMPP_CONF_NOT_FOUND_ERROR\fP, \fBModule\\getName()\fP, \fBModule\\getVersion()\fP, \fBUtil\\logDebug()\fP, \fBUtil\\logError()\fP, \fBsetVersion()\fP, and \fBLang\\SWITCH_VERSION_TITLE\fP\&.
.PP
Referenced by \fBswitchVersion()\fP\&.
.SH "Field Documentation"
.PP 
.SS "$exe\fR [private]\fP"

.PP
Definition at line \fB32\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.PP
Referenced by \fBgetExe()\fP\&.
.SS "$log\fR [private]\fP"

.PP
Definition at line \fB30\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.PP
Referenced by \fBgetLog()\fP\&.
.SS "$port\fR [private]\fP"

.PP
Definition at line \fB33\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.PP
Referenced by \fBchangePort()\fP, \fBcheckPort()\fP, \fBgetPort()\fP, and \fBsetPort()\fP\&.
.SS "$service\fR [private]\fP"

.PP
Definition at line \fB29\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.PP
Referenced by \fBgetService()\fP\&.
.SS "$SslPort\fR [private]\fP"

.PP
Definition at line \fB34\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.PP
Referenced by \fBgetUiPort()\fP, and \fBsetSslPort()\fP\&.
.SS "const LOCAL_CFG_EXE = 'xlightExe'"

.PP
Definition at line \fB25\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.SS "const LOCAL_CFG_PORT = 'xlightPort'"

.PP
Definition at line \fB27\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.SS "const LOCAL_CFG_SSL_PORT = 'xlightSslPort'"

.PP
Definition at line \fB26\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.SS "const ROOT_CFG_ENABLE = 'xlightEnable'"

.PP
Definition at line \fB22\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.SS "const ROOT_CFG_VERSION = 'xlightVersion'"

.PP
Definition at line \fB23\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.SS "const SERVICE_NAME = 'bearsamppxlight'"

.PP
Definition at line \fB19\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.
.PP
Referenced by \fBActionService\\__construct()\fP, \fBTplAppXlight\\getActionInstallXlightService()\fP, \fBTplAppXlight\\getActionRemoveXlightService()\fP, \fBBins\\getServices()\fP, \fBActionStartup\\installServices()\fP, \fBActionQuit\\processWindow()\fP, and \fBWin32Service\\start()\fP\&.
.SS "const SERVICE_PARAMS = ' \-startall'"

.PP
Definition at line \fB20\fP of file \fBclass\&.bin\&.xlight\&.php\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Bearsampp from the source code\&.
